goSrcDir: _tests/small/src
goSourcePath: /Users/craig/go/src
JokerSourceDir (for import line): github.com/candid82/joker
Matchfile(_tests/small/src/net/dnsclient.go) => true <nil>
Matchfile(_tests/small/src/net/ip.go) => true <nil>
Matchfile(_tests/small/src/net/iprawsock.go) => true <nil>
Matchfile(_tests/small/src/net/lookup.go) => true <nil>
Matchfile(_tests/small/src/net/net.go) => true <nil>
Matchfile(_tests/small/src/net/url/url.go) => true <nil>
Processing go:
Processing net/url:
Processing net:
Processing package=net/url:
Processing package=net:
JOKER CONSTANT IPv4len from net/ip.go:
(def
  ^{:doc "IP address lengths (bytes).\n"
    :added "1.0"
    :tag "Int"
    :const true
    :go "net.IPv4len"}
  IPv4len)

JOKER CONSTANT IPv6len from net/ip.go:
(def
  ^{:doc "IP address lengths (bytes).\n"
    :added "1.0"
    :tag "Int"
    :const true
    :go "net.IPv6len"}
  IPv6len)

JOKER VARIABLE DefaultResolver from net/lookup.go:
(def
  ^{:doc "DefaultResolver is the resolver used by the package-level Lookup\nfunctions and by Dialers without a specified Resolver.\n"
    :added "1.0"
    :tag "Var"
    :go "net.DefaultResolver"}
  DefaultResolver)

JOKER VARIABLE ErrWriteToConnected from net/net.go:
(def
  ^{:doc "Various errors contained in OpError.\n"
    :added "1.0"
    :tag "Var"
    :go "net.ErrWriteToConnected"}
  ErrWriteToConnected)

JOKER VARIABLE IPv4allrouter from net/ip.go:
(def
  ^{:doc "all routers\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv4allrouter"}
  IPv4allrouter)

JOKER VARIABLE IPv4allsys from net/ip.go:
(def
  ^{:doc "all systems\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv4allsys"}
  IPv4allsys)

JOKER VARIABLE IPv4bcast from net/ip.go:
(def
  ^{:doc "limited broadcast\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv4bcast"}
  IPv4bcast)

JOKER VARIABLE IPv4zero from net/ip.go:
(def
  ^{:doc "all zeros\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv4zero"}
  IPv4zero)

JOKER VARIABLE IPv6interfacelocalallnodes from net/ip.go:
(def
  ^{:doc "Well-known IPv6 addresses\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv6interfacelocalallnodes"}
  IPv6interfacelocalallnodes)

JOKER VARIABLE IPv6linklocalallnodes from net/ip.go:
(def
  ^{:doc "Well-known IPv6 addresses\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv6linklocalallnodes"}
  IPv6linklocalallnodes)

JOKER VARIABLE IPv6linklocalallrouters from net/ip.go:
(def
  ^{:doc "Well-known IPv6 addresses\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv6linklocalallrouters"}
  IPv6linklocalallrouters)

JOKER VARIABLE IPv6loopback from net/ip.go:
(def
  ^{:doc "Well-known IPv6 addresses\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv6loopback"}
  IPv6loopback)

JOKER VARIABLE IPv6unspecified from net/ip.go:
(def
  ^{:doc "Well-known IPv6 addresses\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv6unspecified"}
  IPv6unspecified)

JOKER VARIABLE IPv6zero from net/ip.go:
(def
  ^{:doc "Well-known IPv6 addresses\n"
    :added "1.0"
    :tag "Var"
    :go "net.IPv6zero"}
  IPv6zero)

JOKER TYPE net.Addr from net/net.go:
JOKER TYPE net.AddrError from net/net.go:
JOKER TYPE net.Buffers from net/net.go:
JOKER TYPE net.Conn from net/net.go:
JOKER TYPE net.DNSConfigError from net/net.go:
JOKER TYPE net.DNSError from net/net.go:
JOKER TYPE net.Error from net/net.go:
JOKER TYPE net.IP from net/ip.go:
JOKER TYPE net.IPAddr from net/iprawsock.go:
JOKER TYPE net.IPConn from net/iprawsock.go:
JOKER TYPE net.IPMask from net/ip.go:
JOKER TYPE net.IPNet from net/ip.go:
JOKER TYPE net.InvalidAddrError from net/net.go:
JOKER TYPE net.Listener from net/net.go:
JOKER TYPE net.MX from net/dnsclient.go:
JOKER TYPE net.NS from net/dnsclient.go:
JOKER TYPE net.OpError from net/net.go:
JOKER TYPE net.PacketConn from net/net.go:
JOKER TYPE net.ParseError from net/net.go:
JOKER TYPE net.Resolver from net/lookup.go:
JOKER TYPE net.SRV from net/dnsclient.go:
JOKER TYPE net.UnknownNetworkError from net/net.go:
JOKER FUNC net.CIDRMask from net/ip.go:
(defn CIDRMask
  "CIDRMask returns an IPMask consisting of `ones' 1 bits\nfollowed by 0s up to a total length of `bits' bits.\nFor a mask of this form, CIDRMask is the inverse of IPMask.Size.\n\nGo input arguments: (ones int, bits int)\n\nGo return type: IPMask\n\nJoker input arguments: [^Int ones, ^Int bits]\n\nJoker return type: go.std.net/IPMask"
  {:added "1.0"
   :go "_f_cIDRMask(_v_ones, _v_bits)"}
  [^Int _v_ones, ^Int _v_bits])

JOKER FUNC net.DialIP from net/iprawsock.go:
(defn DialIP
  "DialIP acts like Dial for IP networks.\n\nThe network must be an IP network name; see func Dial for details.\n\nIf laddr is nil, a local address is automatically chosen.\nIf the IP field of raddr is nil or an unspecified IP address, the\nlocal system is assumed.\n\nGo input arguments: (network string, laddr *IPAddr, raddr *IPAddr)\n\nGo return type: (*IPConn, error)\n\nJoker input arguments: [^String network, ^(ref-to go.std.net/IPAddr) laddr, ^(ref-to go.std.net/IPAddr) raddr]\n\nJoker return type: [*go.std.net/IPConn Error]"
  {:added "1.0"
   :go "_f_dialIP(_v_network, _v_laddr, _v_raddr)"}
  [^String _v_network, ^go.std.net/IPAddr _v_laddr, ^go.std.net/IPAddr _v_raddr])

JOKER FUNC net.IPv4 from net/ip.go:
(defn IPv4
  "IPv4 returns the IP address (in 16-byte form) of the\nIPv4 address a.b.c.d.\n\nGo input arguments: (a byte, b byte, c byte, d byte)\n\nGo return type: IP\n\nJoker input arguments: [^Int a, ^Int b, ^Int c, ^Int d]\n\nJoker return type: go.std.net/IP"
  {:added "1.0"
   :go "_f_iPv4(_v_a, _v_b, _v_c, _v_d)"}
  [^Byte _v_a, ^Byte _v_b, ^Byte _v_c, ^Byte _v_d])

JOKER FUNC net.IPv4Mask from net/ip.go:
(defn IPv4Mask
  "IPv4Mask returns the IP mask (in 4-byte form) of the\nIPv4 mask a.b.c.d.\n\nGo input arguments: (a byte, b byte, c byte, d byte)\n\nGo return type: IPMask\n\nJoker input arguments: [^Int a, ^Int b, ^Int c, ^Int d]\n\nJoker return type: go.std.net/IPMask"
  {:added "1.0"
   :go "_f_iPv4Mask(_v_a, _v_b, _v_c, _v_d)"}
  [^Byte _v_a, ^Byte _v_b, ^Byte _v_c, ^Byte _v_d])

JOKER FUNC net.ListenIP from net/iprawsock.go:
(defn ListenIP
  "ListenIP acts like ListenPacket for IP networks.\n\nThe network must be an IP network name; see func Dial for details.\n\nIf the IP field of laddr is nil or an unspecified IP address,\nListenIP listens on all available IP addresses of the local system\nexcept multicast IP addresses.\n\nGo input arguments: (network string, laddr *IPAddr)\n\nGo return type: (*IPConn, error)\n\nJoker input arguments: [^String network, ^(ref-to go.std.net/IPAddr) laddr]\n\nJoker return type: [*go.std.net/IPConn Error]"
  {:added "1.0"
   :go "_f_listenIP(_v_network, _v_laddr)"}
  [^String _v_network, ^go.std.net/IPAddr _v_laddr])

JOKER FUNC net.LookupAddr from net/lookup.go:
(defn LookupAddr
  "LookupAddr performs a reverse lookup for the given address, returning a list\nof names mapping to that address.\n\nWhen using the host C library resolver, at most one result will be\nreturned. To bypass the host resolver, use a custom Resolver.\n\nGo input arguments: (addr string)\n\nGo return type: (names []string, err error)\n\nJoker input arguments: [^String addr]\n\nJoker return type: [arrayOfString Error]"
  {:added "1.0"
   :go "_f_lookupAddr(_v_addr)"}
  [^String _v_addr])

JOKER FUNC net.LookupCNAME from net/lookup.go:
(defn LookupCNAME
  "LookupCNAME returns the canonical name for the given host.\nCallers that do not care about the canonical name can call\nLookupHost or LookupIP directly; both take care of resolving\nthe canonical name as part of the lookup.\n\nA canonical name is the final name after following zero\nor more CNAME records.\nLookupCNAME does not return an error if host does not\ncontain DNS \"CNAME\" records, as long as host resolves to\naddress records.\n\nGo input arguments: (host string)\n\nGo return type: (cname string, err error)\n\nJoker input arguments: [^String host]\n\nJoker return type: [String Error]"
  {:added "1.0"
   :go "_f_lookupCNAME(_v_host)"}
  [^String _v_host])

JOKER FUNC net.LookupHost from net/lookup.go:
(defn LookupHost
  "LookupHost looks up the given host using the local resolver.\nIt returns a slice of that host's addresses.\n\nGo input arguments: (host string)\n\nGo return type: (addrs []string, err error)\n\nJoker input arguments: [^String host]\n\nJoker return type: [arrayOfString Error]"
  {:added "1.0"
   :go "_f_lookupHost(_v_host)"}
  [^String _v_host])

JOKER FUNC net.LookupIP from net/lookup.go:
(defn LookupIP
  "LookupIP looks up host using the local resolver.\nIt returns a slice of that host's IPv4 and IPv6 addresses.\n\nGo input arguments: (host string)\n\nGo return type: ([]IP, error)\n\nJoker input arguments: [^String host]\n\nJoker return type: [go.std.net/arrayOfIP Error]"
  {:added "1.0"
   :go "_f_lookupIP(_v_host)"}
  [^String _v_host])

JOKER FUNC net.LookupMX from net/lookup.go:
(defn LookupMX
  "LookupMX returns the DNS MX records for the given domain name sorted by preference.\n\nGo input arguments: (name string)\n\nGo return type: ([]*MX, error)\n\nJoker input arguments: [^String name]\n\nJoker return type: [go.std.net/arrayOfrefToMX Error]"
  {:added "1.0"
   :go "_f_lookupMX(_v_name)"}
  [^String _v_name])

JOKER FUNC net.LookupNS from net/lookup.go:
(defn LookupNS
  "LookupNS returns the DNS NS records for the given domain name.\n\nGo input arguments: (name string)\n\nGo return type: ([]*NS, error)\n\nJoker input arguments: [^String name]\n\nJoker return type: [go.std.net/arrayOfrefToNS Error]"
  {:added "1.0"
   :go "_f_lookupNS(_v_name)"}
  [^String _v_name])

JOKER FUNC net.LookupPort from net/lookup.go:
(defn LookupPort
  "LookupPort looks up the port for the given network and service.\n\nGo input arguments: (network string, service string)\n\nGo return type: (port int, err error)\n\nJoker input arguments: [^String network, ^String service]\n\nJoker return type: [Int Error]"
  {:added "1.0"
   :go "_f_lookupPort(_v_network, _v_service)"}
  [^String _v_network, ^String _v_service])

JOKER FUNC net.LookupSRV from net/lookup.go:
(defn LookupSRV
  "LookupSRV tries to resolve an SRV query of the given service,\nprotocol, and domain name. The proto is \"tcp\" or \"udp\".\nThe returned records are sorted by priority and randomized\nby weight within a priority.\n\nLookupSRV constructs the DNS name to look up following RFC 2782.\nThat is, it looks up _service._proto.name. To accommodate services\npublishing SRV records under non-standard names, if both service\nand proto are empty strings, LookupSRV looks up name directly.\n\nGo input arguments: (service string, proto string, name string)\n\nGo return type: (cname string, addrs []*SRV, err error)\n\nJoker input arguments: [^String service, ^String proto, ^String name]\n\nJoker return type: [String go.std.net/arrayOfrefToSRV Error]"
  {:added "1.0"
   :go "_f_lookupSRV(_v_service, _v_proto, _v_name)"}
  [^String _v_service, ^String _v_proto, ^String _v_name])

JOKER FUNC net.LookupTXT from net/lookup.go:
(defn LookupTXT
  "LookupTXT returns the DNS TXT records for the given domain name.\n\nGo input arguments: (name string)\n\nGo return type: ([]string, error)\n\nJoker input arguments: [^String name]\n\nJoker return type: [arrayOfString Error]"
  {:added "1.0"
   :go "_f_lookupTXT(_v_name)"}
  [^String _v_name])

JOKER FUNC net.ParseCIDR from net/ip.go:
(defn ParseCIDR
  "ParseCIDR parses s as a CIDR notation IP address and prefix length,\nlike \"192.0.2.0/24\" or \"2001:db8::/32\", as defined in\nRFC 4632 and RFC 4291.\n\nIt returns the IP address and the network implied by the IP and\nprefix length.\nFor example, ParseCIDR(\"192.0.2.1/24\") returns the IP address\n192.0.2.1 and the network 192.0.2.0/24.\n\nGo input arguments: (s string)\n\nGo return type: (IP, *IPNet, error)\n\nJoker input arguments: [^String s]\n\nJoker return type: [go.std.net/IP *go.std.net/IPNet Error]"
  {:added "1.0"
   :go "_f_parseCIDR(_v_s)"}
  [^String _v_s])

JOKER FUNC net.ParseIP from net/ip.go:
(defn ParseIP
  "ParseIP parses s as an IP address, returning the result.\nThe string s can be in dotted decimal (\"192.0.2.1\")\nor IPv6 (\"2001:db8::68\") form.\nIf s is not a valid textual representation of an IP address,\nParseIP returns nil.\n\nGo input arguments: (s string)\n\nGo return type: IP\n\nJoker input arguments: [^String s]\n\nJoker return type: go.std.net/IP"
  {:added "1.0"
   :go "_f_parseIP(_v_s)"}
  [^String _v_s])

JOKER FUNC net.ResolveIPAddr from net/iprawsock.go:
(defn ResolveIPAddr
  "ResolveIPAddr returns an address of IP end point.\n\nThe network must be an IP network name.\n\nIf the host in the address parameter is not a literal IP address,\nResolveIPAddr resolves the address to an address of IP end point.\nOtherwise, it parses the address as a literal IP address.\nThe address parameter can use a host name, but this is not\nrecommended, because it will return at most one of the host name's\nIP addresses.\n\nSee func Dial for a description of the network and address\nparameters.\n\nGo input arguments: (network string, address string)\n\nGo return type: (*IPAddr, error)\n\nJoker input arguments: [^String network, ^String address]\n\nJoker return type: [*go.std.net/IPAddr Error]"
  {:added "1.0"
   :go "_f_resolveIPAddr(_v_network, _v_address)"}
  [^String _v_network, ^String _v_address])

JOKER TYPE go.std.net/Addr:
(def
  ^{:doc "Addr represents a network end point address.\n\nThe two methods Network and String conventionally return strings\nthat can be passed as the arguments to Dial, but the exact form\nand meaning of the strings is up to the implementation.\n"
    :added "1.0"
    :tag "GoType"
    :specificity 2
    :go "&info_Addr"}
  Addr)

JOKER TYPE go.std.net/AddrError:
(def
  ^{:doc ""
    :added "1.0"
    :tag "GoType"
    :go "&info_AddrError"}
  AddrError)

JOKER TYPE go.std.net/Buffers:
(def
  ^{:doc "Buffers contains zero or more runs of bytes to write.\n\nOn certain machines, for certain types of connections, this is\noptimized into an OS-specific batch write operation (such as\n\"writev\").\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_Buffers"}
  Buffers)

JOKER TYPE go.std.net/Conn:
(def
  ^{:doc "Conn is a generic stream-oriented network connection.\n\nMultiple goroutines may invoke methods on a Conn simultaneously.\n"
    :added "1.0"
    :tag "GoType"
    :specificity 8
    :go "&info_Conn"}
  Conn)

JOKER TYPE go.std.net/DNSConfigError:
(def
  ^{:doc "DNSConfigError represents an error reading the machine's DNS configuration.\n(No longer used; kept for compatibility.)\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_DNSConfigError"}
  DNSConfigError)

JOKER TYPE go.std.net/DNSError:
(def
  ^{:doc "DNSError represents a DNS lookup error.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_DNSError"}
  DNSError)

JOKER TYPE go.std.net/Error:
(def
  ^{:doc "An Error represents a network error.\n"
    :added "1.0"
    :tag "GoType"
    :specificity 3
    :go "&info_Error"}
  Error)

JOKER TYPE go.std.net/IP:
(def
  ^{:doc "An IP is a single IP address, a slice of bytes.\nFunctions in this package accept either 4-byte (IPv4)\nor 16-byte (IPv6) slices as input.\n\nNote that in this documentation, referring to an\nIP address as an IPv4 address or an IPv6 address\nis a semantic property of the address, not just the\nlength of the byte slice: a 16-byte slice can still\nbe an IPv4 address.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_IP"}
  IP)

JOKER TYPE go.std.net/IPAddr:
(def
  ^{:doc "IPAddr represents the address of an IP end point.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_IPAddr"}
  IPAddr)

JOKER TYPE go.std.net/IPConn:
(def
  ^{:doc "IPConn is the implementation of the Conn and PacketConn interfaces\nfor IP network connections.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_IPConn"}
  IPConn)

JOKER TYPE go.std.net/IPMask:
(def
  ^{:doc "An IP mask is an IP address.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_IPMask"}
  IPMask)

JOKER TYPE go.std.net/IPNet:
(def
  ^{:doc "An IPNet represents an IP network.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_IPNet"}
  IPNet)

JOKER TYPE go.std.net/InvalidAddrError:
(def
  ^{:doc ""
    :added "1.0"
    :tag "GoType"
    :go "&info_InvalidAddrError"}
  InvalidAddrError)

JOKER TYPE go.std.net/Listener:
(def
  ^{:doc "A Listener is a generic network listener for stream-oriented protocols.\n\nMultiple goroutines may invoke methods on a Listener simultaneously.\n"
    :added "1.0"
    :tag "GoType"
    :specificity 3
    :go "&info_Listener"}
  Listener)

JOKER TYPE go.std.net/MX:
(def
  ^{:doc "An MX represents a single DNS MX record.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_MX"}
  MX)

JOKER TYPE go.std.net/NS:
(def
  ^{:doc "An NS represents a single DNS NS record.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_NS"}
  NS)

JOKER TYPE go.std.net/OpError:
(def
  ^{:doc "OpError is the error type usually returned by functions in the net\npackage. It describes the operation, network type, and address of\nan error.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_OpError"}
  OpError)

JOKER TYPE go.std.net/PacketConn:
(def
  ^{:doc "PacketConn is a generic packet-oriented network connection.\n\nMultiple goroutines may invoke methods on a PacketConn simultaneously.\n"
    :added "1.0"
    :tag "GoType"
    :specificity 7
    :go "&info_PacketConn"}
  PacketConn)

JOKER TYPE go.std.net/ParseError:
(def
  ^{:doc "A ParseError is the error type of literal network address parsers.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_ParseError"}
  ParseError)

JOKER TYPE go.std.net/Resolver:
(def
  ^{:doc "A Resolver looks up names and numbers.\n\nA nil *Resolver is equivalent to a zero Resolver.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_Resolver"}
  Resolver)

JOKER TYPE go.std.net/SRV:
(def
  ^{:doc "An SRV represents a single DNS SRV record.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_SRV"}
  SRV)

JOKER TYPE go.std.net/UnknownNetworkError:
(def
  ^{:doc ""
    :added "1.0"
    :tag "GoType"
    :go "&info_UnknownNetworkError"}
  UnknownNetworkError)

;;;; Auto-generated by gostd at (omitted for testing), do not edit!!

(ns
  ^{:go-imports {"go.std.net" ["net" "net"]}
    :doc "Provides a low-level interface to the net package.\n\nPackage net provides a portable interface for network I/O, including\nTCP/IP, UDP, domain name resolution, and Unix domain sockets.\n\nAlthough the package provides access to low-level networking\nprimitives, most clients will need only the basic interface provided\nby the Dial, Listen, and Accept functions and the associated\nConn and Listener interfaces. The crypto/tls package uses\nthe same interfaces and similar Dial and Listen functions.\n\nThe Dial function connects to a server:\n\n\tconn, err := net.Dial(\"tcp\", \"golang.org:80\")\n\tif err != nil {\n\t\t// handle error\n\t}\n\tfmt.Fprintf(conn, \"GET / HTTP/1.0\\r\\n\\r\\n\")\n\tstatus, err := bufio.NewReader(conn).ReadString('\\n')\n\t// ...\n\nThe Listen function creates servers:\n\n\tln, err := net.Listen(\"tcp\", \":8080\")\n\tif err != nil {\n\t\t// handle error\n\t}\n\tfor {\n\t\tconn, err := ln.Accept()\n\t\tif err != nil {\n\t\t\t// handle error\n\t\t}\n\t\tgo handleConnection(conn)\n\t}\n\nName Resolution\n\nThe method for resolving domain names, whether indirectly with functions like Dial\nor directly with functions like LookupHost and LookupAddr, varies by operating system.\n\nOn Unix systems, the resolver has two options for resolving names.\nIt can use a pure Go resolver that sends DNS requests directly to the servers\nlisted in /etc/resolv.conf, or it can use a cgo-based resolver that calls C\nlibrary routines such as getaddrinfo and getnameinfo.\n\nBy default the pure Go resolver is used, because a blocked DNS request consumes\nonly a goroutine, while a blocked C call consumes an operating system thread.\nWhen cgo is available, the cgo-based resolver is used instead under a variety of\nconditions: on systems that do not let programs make direct DNS requests (OS X),\nwhen the LOCALDOMAIN environment variable is present (even if empty),\nwhen the RES_OPTIONS or HOSTALIASES environment variable is non-empty,\nwhen the ASR_CONFIG environment variable is non-empty (OpenBSD only),\nwhen /etc/resolv.conf or /etc/nsswitch.conf specify the use of features that the\nGo resolver does not implement, and when the name being looked up ends in .local\nor is an mDNS name.\n\nThe resolver decision can be overridden by setting the netdns value of the\nGODEBUG environment variable (see package runtime) to go or cgo, as in:\n\n\texport GODEBUG=netdns=go    # force pure Go resolver\n\texport GODEBUG=netdns=cgo   # force cgo resolver\n\nThe decision can also be forced while building the Go source tree\nby setting the netgo or netcgo build tag.\n\nA numeric netdns setting, as in GODEBUG=netdns=1, causes the resolver\nto print debugging information about its decisions.\nTo force a particular resolver while also printing debugging information,\njoin the two settings by a plus sign, as in GODEBUG=netdns=go+1.\n\nOn Plan 9, the resolver always accesses /net/cs and /net/dns.\n\nOn Windows, the resolver always uses C library functions, such as GetAddrInfo and DnsQuery.\n"
    :empty false}
  go.std.net)
JOKER TYPE net/url.Error from net/url/url.go:
JOKER TYPE net/url.EscapeError from net/url/url.go:
JOKER TYPE net/url.InvalidHostError from net/url/url.go:
JOKER TYPE net/url.URL from net/url/url.go:
JOKER TYPE net/url.Userinfo from net/url/url.go:
JOKER TYPE net/url.Values from net/url/url.go:
JOKER FUNC net/url.Parse from net/url/url.go:
(defn Parse
  "Parse parses rawurl into a URL structure.\n\nThe rawurl may be relative (a path, without a host) or absolute\n(starting with a scheme). Trying to parse a hostname and path\nwithout a scheme is invalid but may not necessarily return an\nerror, due to parsing ambiguities.\n\nGo input arguments: (rawurl string)\n\nGo return type: (*URL, error)\n\nJoker input arguments: [^String rawurl]\n\nJoker return type: [*go.std.net.url/URL Error]"
  {:added "1.0"
   :go "_f_parse(_v_rawurl)"}
  [^String _v_rawurl])

JOKER FUNC net/url.ParseQuery from net/url/url.go:
(defn ParseQuery
  "ParseQuery parses the URL-encoded query string and returns\na map listing the values specified for each key.\nParseQuery always returns a non-nil map containing all the\nvalid query parameters found; err describes the first decoding error\nencountered, if any.\n\nQuery is expected to be a list of key=value settings separated by\nampersands or semicolons. A setting without an equals sign is\ninterpreted as a key set to an empty value.\n\nGo input arguments: (query string)\n\nGo return type: (Values, error)\n\nJoker input arguments: [^String query]\n\nJoker return type: [go.std.net.url/Values Error]"
  {:added "1.0"
   :go "_f_parseQuery(_v_query)"}
  [^String _v_query])

JOKER FUNC net/url.ParseRequestURI from net/url/url.go:
(defn ParseRequestURI
  "ParseRequestURI parses rawurl into a URL structure. It assumes that\nrawurl was received in an HTTP request, so the rawurl is interpreted\nonly as an absolute URI or an absolute path.\nThe string rawurl is assumed not to have a #fragment suffix.\n(Web browsers strip #fragment before sending the URL to a web server.)\n\nGo input arguments: (rawurl string)\n\nGo return type: (*URL, error)\n\nJoker input arguments: [^String rawurl]\n\nJoker return type: [*go.std.net.url/URL Error]"
  {:added "1.0"
   :go "_f_parseRequestURI(_v_rawurl)"}
  [^String _v_rawurl])

JOKER FUNC net/url.PathEscape from net/url/url.go:
(defn ^"String" PathEscape
  "PathEscape escapes the string so it can be safely placed\ninside a URL path segment.\n\nGo input arguments: (s string)\n\nGo return type: string\n\nJoker input arguments: [^String s]\n\nJoker return type: String"
  {:added "1.0"
   :go "url.PathEscape(_v_s)"}
  [^String _v_s])

JOKER FUNC net/url.PathUnescape from net/url/url.go:
(defn PathUnescape
  "PathUnescape does the inverse transformation of PathEscape,\nconverting each 3-byte encoded substring of the form \"%AB\" into the\nhex-decoded byte 0xAB. It returns an error if any % is not followed\nby two hexadecimal digits.\n\nPathUnescape is identical to QueryUnescape except that it does not\nunescape '+' to ' ' (space).\n\nGo input arguments: (s string)\n\nGo return type: (string, error)\n\nJoker input arguments: [^String s]\n\nJoker return type: [String Error]"
  {:added "1.0"
   :go "_f_pathUnescape(_v_s)"}
  [^String _v_s])

JOKER FUNC net/url.QueryEscape from net/url/url.go:
(defn ^"String" QueryEscape
  "QueryEscape escapes the string so it can be safely placed\ninside a URL query.\n\nGo input arguments: (s string)\n\nGo return type: string\n\nJoker input arguments: [^String s]\n\nJoker return type: String"
  {:added "1.0"
   :go "url.QueryEscape(_v_s)"}
  [^String _v_s])

JOKER FUNC net/url.QueryUnescape from net/url/url.go:
(defn QueryUnescape
  "QueryUnescape does the inverse transformation of QueryEscape,\nconverting each 3-byte encoded substring of the form \"%AB\" into the\nhex-decoded byte 0xAB.\nIt returns an error if any % is not followed by two hexadecimal\ndigits.\n\nGo input arguments: (s string)\n\nGo return type: (string, error)\n\nJoker input arguments: [^String s]\n\nJoker return type: [String Error]"
  {:added "1.0"
   :go "_f_queryUnescape(_v_s)"}
  [^String _v_s])

JOKER FUNC net/url.User from net/url/url.go:
(defn User
  "User returns a Userinfo containing the provided username\nand no password set.\n\nGo input arguments: (username string)\n\nGo return type: *Userinfo\n\nJoker input arguments: [^String username]\n\nJoker return type: *go.std.net.url/Userinfo"
  {:added "1.0"
   :go "_f_user(_v_username)"}
  [^String _v_username])

JOKER FUNC net/url.UserPassword from net/url/url.go:
(defn UserPassword
  "UserPassword returns a Userinfo containing the provided username\nand password.\n\nThis functionality should only be used with legacy web sites.\nRFC 2396 warns that interpreting Userinfo this way\n``is NOT RECOMMENDED, because the passing of authentication\ninformation in clear text (such as URI) has proven to be a\nsecurity risk in almost every case where it has been used.''\n\nGo input arguments: (username string, password string)\n\nGo return type: *Userinfo\n\nJoker input arguments: [^String username, ^String password]\n\nJoker return type: *go.std.net.url/Userinfo"
  {:added "1.0"
   :go "_f_userPassword(_v_username, _v_password)"}
  [^String _v_username, ^String _v_password])

JOKER TYPE go.std.net.url/Error:
(def
  ^{:doc "Error reports an error and the operation and URL that caused it.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_Error"}
  Error)

JOKER TYPE go.std.net.url/EscapeError:
(def
  ^{:doc ""
    :added "1.0"
    :tag "GoType"
    :go "&info_EscapeError"}
  EscapeError)

JOKER TYPE go.std.net.url/InvalidHostError:
(def
  ^{:doc ""
    :added "1.0"
    :tag "GoType"
    :go "&info_InvalidHostError"}
  InvalidHostError)

JOKER TYPE go.std.net.url/URL:
(def
  ^{:doc "A URL represents a parsed URL (technically, a URI reference).\n\nThe general form represented is:\n\n\t[scheme:][//[userinfo@]host][/]path[?query][#fragment]\n\nURLs that do not start with a slash after the scheme are interpreted as:\n\n\tscheme:opaque[?query][#fragment]\n\nNote that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/.\nA consequence is that it is impossible to tell which slashes in the Path were\nslashes in the raw URL and which were %2f. This distinction is rarely important,\nbut when it is, code must not use Path directly.\nThe Parse function sets both Path and RawPath in the URL it returns,\nand URL's String method uses RawPath if it is a valid encoding of Path,\nby calling the EscapedPath method.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_URL"}
  URL)

JOKER TYPE go.std.net.url/Userinfo:
(def
  ^{:doc "The Userinfo type is an immutable encapsulation of username and\npassword details for a URL. An existing Userinfo value is guaranteed\nto have a username set (potentially empty, as allowed by RFC 2396),\nand optionally a password.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_Userinfo"}
  Userinfo)

JOKER TYPE go.std.net.url/Values:
(def
  ^{:doc "Values maps a string key to a list of values.\nIt is typically used for query parameters and form values.\nUnlike in the http.Header map, the keys in a Values map\nare case-sensitive.\n"
    :added "1.0"
    :tag "GoType"
    :go "&info_Values"}
  Values)

;;;; Auto-generated by gostd at (omitted for testing), do not edit!!

(ns
  ^{:go-imports {"go.std.net.url" ["url" "net/url"]}
    :doc "Provides a low-level interface to the net/url package.\n\nPackage url parses URLs and implements query escaping.\n"
    :empty false}
  go.std.net.url)
GO TYPE net.Addr from net/net.go:
func ExtractGoObjectAddr(args []Object, index int) *net.Addr {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.Addr:
			return &r
		case *net.Addr:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.Addr]"))
}

func ExtractGo_go_std_net__Addr(rcvr, arg string, args *ArraySeq, n int) (res net.Addr) {
	a := CheckGoNth(rcvr, "go.std.net/Addr", arg, args, n).O
	res, ok := a.(net.Addr)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/Addr], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

GO TYPE net.AddrError from net/net.go:
func ExtractGoObjectAddrError(args []Object, index int) *net.AddrError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.AddrError:
			return &r
		case *net.AddrError:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.AddrError]"))
}

func ExtractGo_go_std_net__AddrError(rcvr, arg string, args *ArraySeq, n int) (res net.AddrError) {
	a := CheckGoNth(rcvr, "go.std.net/AddrError", arg, args, n).O
	res, ok := a.(net.AddrError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/AddrError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToAddrError(o Map) *net.AddrError {
	return &net.AddrError{
		Err: FieldAsString(o, "Err"),
		Addr: FieldAsString(o, "Addr"),
	}
}

func _Ctor_AddrError(_v Object) *net.AddrError {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToAddrError(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.AddrError] or: Map"))
}

func _Wrapped_Ctor_AddrError(_o Object) Object {
	return MakeGoObject(_Ctor_AddrError(_o))
}

GO TYPE net.Buffers from net/net.go:
func ExtractGoObjectBuffers(args []Object, index int) *net.Buffers {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.Buffers:
			return &r
		case *net.Buffers:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.Buffers]"))
}

func ExtractGo_go_std_net__Buffers(rcvr, arg string, args *ArraySeq, n int) (res net.Buffers) {
	a := CheckGoNth(rcvr, "go.std.net/Buffers", arg, args, n).O
	res, ok := a.(net.Buffers)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/Buffers], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _Ctor_Buffers(_v Object) net.Buffers {
// 	switch _o := _v.(type) {
// 	default:
// 		return _net.Buffers(_o.ABEND674(codegen.go: unknown underlying type *ast.ArrayType for Buffers))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.Buffers] or: whatever"))
// }

// func _Wrapped_Ctor_Buffers(_o Object) Object {
// 	return MakeGoObject(_Ctor_Buffers(_o))
// }

GO TYPE net.Conn from net/net.go:
func ExtractGoObjectConn(args []Object, index int) *net.Conn {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.Conn:
			return &r
		case *net.Conn:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.Conn]"))
}

func ExtractGo_go_std_net__Conn(rcvr, arg string, args *ArraySeq, n int) (res net.Conn) {
	a := CheckGoNth(rcvr, "go.std.net/Conn", arg, args, n).O
	res, ok := a.(net.Conn)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/Conn], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

GO TYPE net.DNSConfigError from net/net.go:
func ExtractGoObjectDNSConfigError(args []Object, index int) *net.DNSConfigError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.DNSConfigError:
			return &r
		case *net.DNSConfigError:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.DNSConfigError]"))
}

func ExtractGo_go_std_net__DNSConfigError(rcvr, arg string, args *ArraySeq, n int) (res net.DNSConfigError) {
	a := CheckGoNth(rcvr, "go.std.net/DNSConfigError", arg, args, n).O
	res, ok := a.(net.DNSConfigError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/DNSConfigError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToDNSConfigError(o Map) *net.DNSConfigError {
	return &net.DNSConfigError{
		Err: FieldAsError(o, "Err"),
	}
}

func _Ctor_DNSConfigError(_v Object) *net.DNSConfigError {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToDNSConfigError(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.DNSConfigError] or: Map"))
}

func _Wrapped_Ctor_DNSConfigError(_o Object) Object {
	return MakeGoObject(_Ctor_DNSConfigError(_o))
}

GO TYPE net.DNSError from net/net.go:
func ExtractGoObjectDNSError(args []Object, index int) *net.DNSError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.DNSError:
			return &r
		case *net.DNSError:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.DNSError]"))
}

func ExtractGo_go_std_net__DNSError(rcvr, arg string, args *ArraySeq, n int) (res net.DNSError) {
	a := CheckGoNth(rcvr, "go.std.net/DNSError", arg, args, n).O
	res, ok := a.(net.DNSError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/DNSError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToDNSError(o Map) *net.DNSError {
	return &net.DNSError{
		Err: FieldAsString(o, "Err"),
		Name: FieldAsString(o, "Name"),
		Server: FieldAsString(o, "Server"),
		IsTimeout: FieldAsBoolean(o, "IsTimeout"),
		IsTemporary: FieldAsBoolean(o, "IsTemporary"),
	}
}

func _Ctor_DNSError(_v Object) *net.DNSError {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToDNSError(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.DNSError] or: Map"))
}

func _Wrapped_Ctor_DNSError(_o Object) Object {
	return MakeGoObject(_Ctor_DNSError(_o))
}

GO TYPE net.Error from net/net.go:
func ExtractGoObjectError(args []Object, index int) *net.Error {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.Error:
			return &r
		case *net.Error:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.Error]"))
}

func ExtractGo_go_std_net__Error(rcvr, arg string, args *ArraySeq, n int) (res net.Error) {
	a := CheckGoNth(rcvr, "go.std.net/Error", arg, args, n).O
	res, ok := a.(net.Error)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/Error], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

GO TYPE net.IP from net/ip.go:
func ExtractGoObjectIP(args []Object, index int) *net.IP {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.IP:
			return &r
		case *net.IP:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.IP]"))
}

func ExtractGo_go_std_net__IP(rcvr, arg string, args *ArraySeq, n int) (res net.IP) {
	a := CheckGoNth(rcvr, "go.std.net/IP", arg, args, n).O
	res, ok := a.(net.IP)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/IP], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _Ctor_IP(_v Object) net.IP {
// 	switch _o := _v.(type) {
// 	default:
// 		return _net.IP(_o.ABEND674(codegen.go: unknown underlying type *ast.ArrayType for IP))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.IP] or: whatever"))
// }

// func _Wrapped_Ctor_IP(_o Object) Object {
// 	return MakeGoObject(_Ctor_IP(_o))
// }

GO TYPE net.IPAddr from net/iprawsock.go:
func ExtractGoObjectIPAddr(args []Object, index int) *net.IPAddr {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.IPAddr:
			return &r
		case *net.IPAddr:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.IPAddr]"))
}

func ExtractGo_go_std_net__IPAddr(rcvr, arg string, args *ArraySeq, n int) (res net.IPAddr) {
	a := CheckGoNth(rcvr, "go.std.net/IPAddr", arg, args, n).O
	res, ok := a.(net.IPAddr)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/IPAddr], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _mapToIPAddr(o Map) *net.IPAddr {
// 	return &net.IPAddr{
// 		IP: ABEND048(codegen.go: no conversion from Clojure for net.IP ([]byte)),
// 		Zone: FieldAsString(o, "Zone"),
// 	}
// }

// func _Ctor_IPAddr(_v Object) *net.IPAddr {
// 	switch _o := _v.(type) {
// 	case *ArrayMap, *HashMap:
// 		return _mapToIPAddr(_o.(Map))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.IPAddr] or: Map"))
// }

// func _Wrapped_Ctor_IPAddr(_o Object) Object {
// 	return MakeGoObject(_Ctor_IPAddr(_o))
// }

GO TYPE net.IPConn from net/iprawsock.go:
func ExtractGoObjectIPConn(args []Object, index int) *net.IPConn {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.IPConn:
			return &r
		case *net.IPConn:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.IPConn]"))
}

func ExtractGo_go_std_net__IPConn(rcvr, arg string, args *ArraySeq, n int) (res net.IPConn) {
	a := CheckGoNth(rcvr, "go.std.net/IPConn", arg, args, n).O
	res, ok := a.(net.IPConn)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/IPConn], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToIPConn(o Map) *net.IPConn {
	return &net.IPConn{}
}

func _Ctor_IPConn(_v Object) *net.IPConn {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToIPConn(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.IPConn] or: Map"))
}

func _Wrapped_Ctor_IPConn(_o Object) Object {
	return MakeGoObject(_Ctor_IPConn(_o))
}

GO TYPE net.IPMask from net/ip.go:
func ExtractGoObjectIPMask(args []Object, index int) *net.IPMask {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.IPMask:
			return &r
		case *net.IPMask:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.IPMask]"))
}

func ExtractGo_go_std_net__IPMask(rcvr, arg string, args *ArraySeq, n int) (res net.IPMask) {
	a := CheckGoNth(rcvr, "go.std.net/IPMask", arg, args, n).O
	res, ok := a.(net.IPMask)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/IPMask], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _Ctor_IPMask(_v Object) net.IPMask {
// 	switch _o := _v.(type) {
// 	default:
// 		return _net.IPMask(_o.ABEND674(codegen.go: unknown underlying type *ast.ArrayType for IPMask))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.IPMask] or: whatever"))
// }

// func _Wrapped_Ctor_IPMask(_o Object) Object {
// 	return MakeGoObject(_Ctor_IPMask(_o))
// }

GO TYPE net.IPNet from net/ip.go:
func ExtractGoObjectIPNet(args []Object, index int) *net.IPNet {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.IPNet:
			return &r
		case *net.IPNet:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.IPNet]"))
}

func ExtractGo_go_std_net__IPNet(rcvr, arg string, args *ArraySeq, n int) (res net.IPNet) {
	a := CheckGoNth(rcvr, "go.std.net/IPNet", arg, args, n).O
	res, ok := a.(net.IPNet)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/IPNet], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _mapToIPNet(o Map) *net.IPNet {
// 	return &net.IPNet{
// 		IP: ABEND048(codegen.go: no conversion from Clojure for net.IP ([]byte)),
// 		Mask: ABEND048(codegen.go: no conversion from Clojure for net.IPMask ([]byte)),
// 	}
// }

// func _Ctor_IPNet(_v Object) *net.IPNet {
// 	switch _o := _v.(type) {
// 	case *ArrayMap, *HashMap:
// 		return _mapToIPNet(_o.(Map))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.IPNet] or: Map"))
// }

// func _Wrapped_Ctor_IPNet(_o Object) Object {
// 	return MakeGoObject(_Ctor_IPNet(_o))
// }

GO TYPE net.InvalidAddrError from net/net.go:
func ExtractGoObjectInvalidAddrError(args []Object, index int) *net.InvalidAddrError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.InvalidAddrError:
			return &r
		case *net.InvalidAddrError:
			return r
		}
	case String:
		v := net.InvalidAddrError(ExtractString(args, index))
		return &v
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.InvalidAddrError]"))
}

func ExtractGo_go_std_net__InvalidAddrError(rcvr, arg string, args *ArraySeq, n int) (res net.InvalidAddrError) {
	a := CheckGoNth(rcvr, "go.std.net/InvalidAddrError", arg, args, n).O
	res, ok := a.(net.InvalidAddrError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/InvalidAddrError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _Ctor_InvalidAddrError(_v Object) net.InvalidAddrError {
	switch _o := _v.(type) {
	case String:
		return net.InvalidAddrError(_o.S)
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.InvalidAddrError] or: String"))
}

func _Wrapped_Ctor_InvalidAddrError(_o Object) Object {
	return MakeGoObject(_Ctor_InvalidAddrError(_o))
}

GO TYPE net.Listener from net/net.go:
func ExtractGoObjectListener(args []Object, index int) *net.Listener {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.Listener:
			return &r
		case *net.Listener:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.Listener]"))
}

func ExtractGo_go_std_net__Listener(rcvr, arg string, args *ArraySeq, n int) (res net.Listener) {
	a := CheckGoNth(rcvr, "go.std.net/Listener", arg, args, n).O
	res, ok := a.(net.Listener)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/Listener], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

GO TYPE net.MX from net/dnsclient.go:
func ExtractGoObjectMX(args []Object, index int) *net.MX {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.MX:
			return &r
		case *net.MX:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.MX]"))
}

func ExtractGo_go_std_net__MX(rcvr, arg string, args *ArraySeq, n int) (res net.MX) {
	a := CheckGoNth(rcvr, "go.std.net/MX", arg, args, n).O
	res, ok := a.(net.MX)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/MX], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToMX(o Map) *net.MX {
	return &net.MX{
		Host: FieldAsString(o, "Host"),
		Pref: FieldAsUint16(o, "Pref"),
	}
}

func _Ctor_MX(_v Object) *net.MX {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToMX(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.MX] or: Map"))
}

func _Wrapped_Ctor_MX(_o Object) Object {
	return MakeGoObject(_Ctor_MX(_o))
}

GO TYPE net.NS from net/dnsclient.go:
func ExtractGoObjectNS(args []Object, index int) *net.NS {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.NS:
			return &r
		case *net.NS:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.NS]"))
}

func ExtractGo_go_std_net__NS(rcvr, arg string, args *ArraySeq, n int) (res net.NS) {
	a := CheckGoNth(rcvr, "go.std.net/NS", arg, args, n).O
	res, ok := a.(net.NS)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/NS], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToNS(o Map) *net.NS {
	return &net.NS{
		Host: FieldAsString(o, "Host"),
	}
}

func _Ctor_NS(_v Object) *net.NS {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToNS(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.NS] or: Map"))
}

func _Wrapped_Ctor_NS(_o Object) Object {
	return MakeGoObject(_Ctor_NS(_o))
}

GO TYPE net.OpError from net/net.go:
func ExtractGoObjectOpError(args []Object, index int) *net.OpError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.OpError:
			return &r
		case *net.OpError:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.OpError]"))
}

func ExtractGo_go_std_net__OpError(rcvr, arg string, args *ArraySeq, n int) (res net.OpError) {
	a := CheckGoNth(rcvr, "go.std.net/OpError", arg, args, n).O
	res, ok := a.(net.OpError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/OpError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _mapToOpError(o Map) *net.OpError {
// 	return &net.OpError{
// 		Op: FieldAsString(o, "Op"),
// 		Net: FieldAsString(o, "Net"),
// 		Source: ABEND048(codegen.go: no conversion from Clojure for net.Addr (interface{ABEND041(gtypes.go/fieldToString found something: ABEND001(NO GO NAME for *ast.FuncType)!), ABEND041(gtypes.go/fieldToString found something: ABEND001(NO GO NAME for *ast.FuncType)!)})),
// 		Addr: ABEND048(codegen.go: no conversion from Clojure for net.Addr (interface{ABEND041(gtypes.go/fieldToString found something: ABEND001(NO GO NAME for *ast.FuncType)!), ABEND041(gtypes.go/fieldToString found something: ABEND001(NO GO NAME for *ast.FuncType)!)})),
// 		Err: FieldAsError(o, "Err"),
// 	}
// }

// func _Ctor_OpError(_v Object) *net.OpError {
// 	switch _o := _v.(type) {
// 	case *ArrayMap, *HashMap:
// 		return _mapToOpError(_o.(Map))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.OpError] or: Map"))
// }

// func _Wrapped_Ctor_OpError(_o Object) Object {
// 	return MakeGoObject(_Ctor_OpError(_o))
// }

GO TYPE net.PacketConn from net/net.go:
func ExtractGoObjectPacketConn(args []Object, index int) *net.PacketConn {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.PacketConn:
			return &r
		case *net.PacketConn:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.PacketConn]"))
}

func ExtractGo_go_std_net__PacketConn(rcvr, arg string, args *ArraySeq, n int) (res net.PacketConn) {
	a := CheckGoNth(rcvr, "go.std.net/PacketConn", arg, args, n).O
	res, ok := a.(net.PacketConn)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/PacketConn], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

GO TYPE net.ParseError from net/net.go:
func ExtractGoObjectParseError(args []Object, index int) *net.ParseError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.ParseError:
			return &r
		case *net.ParseError:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.ParseError]"))
}

func ExtractGo_go_std_net__ParseError(rcvr, arg string, args *ArraySeq, n int) (res net.ParseError) {
	a := CheckGoNth(rcvr, "go.std.net/ParseError", arg, args, n).O
	res, ok := a.(net.ParseError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/ParseError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToParseError(o Map) *net.ParseError {
	return &net.ParseError{
		Type: FieldAsString(o, "Type"),
		Text: FieldAsString(o, "Text"),
	}
}

func _Ctor_ParseError(_v Object) *net.ParseError {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToParseError(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.ParseError] or: Map"))
}

func _Wrapped_Ctor_ParseError(_o Object) Object {
	return MakeGoObject(_Ctor_ParseError(_o))
}

GO TYPE net.Resolver from net/lookup.go:
func ExtractGoObjectResolver(args []Object, index int) *net.Resolver {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.Resolver:
			return &r
		case *net.Resolver:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.Resolver]"))
}

func ExtractGo_go_std_net__Resolver(rcvr, arg string, args *ArraySeq, n int) (res net.Resolver) {
	a := CheckGoNth(rcvr, "go.std.net/Resolver", arg, args, n).O
	res, ok := a.(net.Resolver)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/Resolver], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _mapToResolver(o Map) *net.Resolver {
// 	return &net.Resolver{
// 		PreferGo: FieldAsBoolean(o, "PreferGo"),
// 		StrictErrors: FieldAsBoolean(o, "StrictErrors"),
// 		Dial: ABEND049(codegen.go: no conversion to private type ABEND001(NO GO NAME for *ast.FuncType) (-)),
// 	}
// }

// func _Ctor_Resolver(_v Object) *net.Resolver {
// 	switch _o := _v.(type) {
// 	case *ArrayMap, *HashMap:
// 		return _mapToResolver(_o.(Map))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[net.Resolver] or: Map"))
// }

// func _Wrapped_Ctor_Resolver(_o Object) Object {
// 	return MakeGoObject(_Ctor_Resolver(_o))
// }

GO TYPE net.SRV from net/dnsclient.go:
func ExtractGoObjectSRV(args []Object, index int) *net.SRV {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.SRV:
			return &r
		case *net.SRV:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.SRV]"))
}

func ExtractGo_go_std_net__SRV(rcvr, arg string, args *ArraySeq, n int) (res net.SRV) {
	a := CheckGoNth(rcvr, "go.std.net/SRV", arg, args, n).O
	res, ok := a.(net.SRV)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/SRV], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToSRV(o Map) *net.SRV {
	return &net.SRV{
		Target: FieldAsString(o, "Target"),
		Port: FieldAsUint16(o, "Port"),
		Priority: FieldAsUint16(o, "Priority"),
		Weight: FieldAsUint16(o, "Weight"),
	}
}

func _Ctor_SRV(_v Object) *net.SRV {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToSRV(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.SRV] or: Map"))
}

func _Wrapped_Ctor_SRV(_o Object) Object {
	return MakeGoObject(_Ctor_SRV(_o))
}

GO TYPE net.UnknownNetworkError from net/net.go:
func ExtractGoObjectUnknownNetworkError(args []Object, index int) *net.UnknownNetworkError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case net.UnknownNetworkError:
			return &r
		case *net.UnknownNetworkError:
			return r
		}
	case String:
		v := net.UnknownNetworkError(ExtractString(args, index))
		return &v
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net.UnknownNetworkError]"))
}

func ExtractGo_go_std_net__UnknownNetworkError(rcvr, arg string, args *ArraySeq, n int) (res net.UnknownNetworkError) {
	a := CheckGoNth(rcvr, "go.std.net/UnknownNetworkError", arg, args, n).O
	res, ok := a.(net.UnknownNetworkError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net/UnknownNetworkError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _Ctor_UnknownNetworkError(_v Object) net.UnknownNetworkError {
	switch _o := _v.(type) {
	case String:
		return net.UnknownNetworkError(_o.S)
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[net.UnknownNetworkError] or: String"))
}

func _Wrapped_Ctor_UnknownNetworkError(_o Object) Object {
	return MakeGoObject(_Ctor_UnknownNetworkError(_o))
}

GO FUNC net.CIDRMask from net/ip.go:
func _f_cIDRMask(_v_ones int, _v_bits int) Object {
	_res := net.CIDRMask(_v_ones, _v_bits)
	return MakeGoObject(_res)
}

GO FUNC net.DialIP from net/iprawsock.go:
func _f_dialIP(_v_network string, _v_laddr *net.IPAddr, _v_raddr *net.IPAddr) Object {
	_res1, _res2 := net.DialIP(_v_network, _v_laddr, _v_raddr)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net.IPv4 from net/ip.go:
func _f_iPv4(_v_a byte, _v_b byte, _v_c byte, _v_d byte) Object {
	_res := net.IPv4(_v_a, _v_b, _v_c, _v_d)
	return MakeGoObject(_res)
}

GO FUNC net.IPv4Mask from net/ip.go:
func _f_iPv4Mask(_v_a byte, _v_b byte, _v_c byte, _v_d byte) Object {
	_res := net.IPv4Mask(_v_a, _v_b, _v_c, _v_d)
	return MakeGoObject(_res)
}

GO FUNC net.ListenIP from net/iprawsock.go:
func _f_listenIP(_v_network string, _v_laddr *net.IPAddr) Object {
	_res1, _res2 := net.ListenIP(_v_network, _v_laddr)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net.LookupAddr from net/lookup.go:
func _f_lookupAddr(_v_addr string) Object {
	names, err := net.LookupAddr(_v_addr)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(names))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

GO FUNC net.LookupCNAME from net/lookup.go:
func _f_lookupCNAME(_v_host string) Object {
	cname, err := net.LookupCNAME(_v_host)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeString(cname))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

GO FUNC net.LookupHost from net/lookup.go:
func _f_lookupHost(_v_host string) Object {
	addrs, err := net.LookupHost(_v_host)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(addrs))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

GO FUNC net.LookupIP from net/lookup.go:
func _f_lookupIP(_v_host string) Object {
	_res1, _res2 := net.LookupIP(_v_host)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net.LookupMX from net/lookup.go:
func _f_lookupMX(_v_name string) Object {
	_res1, _res2 := net.LookupMX(_v_name)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net.LookupNS from net/lookup.go:
func _f_lookupNS(_v_name string) Object {
	_res1, _res2 := net.LookupNS(_v_name)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net.LookupPort from net/lookup.go:
func _f_lookupPort(_v_network string, _v_service string) Object {
	port, err := net.LookupPort(_v_network, _v_service)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeInt(port))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

GO FUNC net.LookupSRV from net/lookup.go:
func _f_lookupSRV(_v_service string, _v_proto string, _v_name string) Object {
	cname, addrs, err := net.LookupSRV(_v_service, _v_proto, _v_name)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeString(cname))
	_res = _res.Conjoin(MakeGoObject(addrs))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

GO FUNC net.LookupTXT from net/lookup.go:
func _f_lookupTXT(_v_name string) Object {
	_res1, _res2 := net.LookupTXT(_v_name)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net.ParseCIDR from net/ip.go:
func _f_parseCIDR(_v_s string) Object {
	_res1, _res2, _res3 := net.ParseCIDR(_v_s)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(MakeGoObject(_res2))
	_res = _res.Conjoin(func () Object { if (_res3) == nil { return NIL } else { return MakeError(_res3) } }())
	return _res
}

GO FUNC net.ParseIP from net/ip.go:
func _f_parseIP(_v_s string) Object {
	_res := net.ParseIP(_v_s)
	return MakeGoObject(_res)
}

GO FUNC net.ResolveIPAddr from net/iprawsock.go:
func _f_resolveIPAddr(_v_network string, _v_address string) Object {
	_res1, _res2 := net.ResolveIPAddr(_v_network, _v_address)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net._f_addr_Network from net/net.go:
func _f_addr_Network(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Addr)Network()", args, 0, 0)
	_res := o.O.(net.Addr).Network()
	return MakeString(_res)
}

GO FUNC net._f_addr_String from net/net.go:
func _f_addr_String(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Addr)String()", args, 0, 0)
	_res := o.O.(net.Addr).String()
	return MakeString(_res)
}

GO FUNC net._f_conn_Close from net/net.go:
func _f_conn_Close(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Conn)Close()", args, 0, 0)
	_res := o.O.(net.Conn).Close()
	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
}

GO FUNC net._f_conn_LocalAddr from net/net.go:
func _f_conn_LocalAddr(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Conn)LocalAddr()", args, 0, 0)
	_res := o.O.(net.Conn).LocalAddr()
	return MakeGoObject(_res)
}

GO FUNC net._f_conn_Read from net/net.go:
// func _f_conn_Read(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.Conn)Read()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/net.go:117:9)
// 	n, err := o.O.(net.Conn).Read(_v_b)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_conn_RemoteAddr from net/net.go:
func _f_conn_RemoteAddr(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Conn)RemoteAddr()", args, 0, 0)
	_res := o.O.(net.Conn).RemoteAddr()
	return MakeGoObject(_res)
}

GO FUNC net._f_conn_SetDeadline from net/net.go:
// func _f_conn_SetDeadline(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.Conn)SetDeadline()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_t at: _tests/small/src/net/net.go:149:16)
// 	_res := o.O.(net.Conn).SetDeadline(_v_t)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_conn_SetReadDeadline from net/net.go:
// func _f_conn_SetReadDeadline(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.Conn)SetReadDeadline()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_t at: _tests/small/src/net/net.go:154:20)
// 	_res := o.O.(net.Conn).SetReadDeadline(_v_t)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_conn_SetWriteDeadline from net/net.go:
// func _f_conn_SetWriteDeadline(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.Conn)SetWriteDeadline()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_t at: _tests/small/src/net/net.go:161:21)
// 	_res := o.O.(net.Conn).SetWriteDeadline(_v_t)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_conn_Write from net/net.go:
// func _f_conn_Write(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.Conn)Write()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/net.go:122:10)
// 	n, err := o.O.(net.Conn).Write(_v_b)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_error_Error from net/net.go:
// func _f_error_Error(o GoObject, args Object) Object {  // Method
// 	CheckGoArity("(net.Error)Error()", args, 0, 0)
// 	return o.O.(net.Error).Error()
// 	ABEND124(post.go: no public information returned)
// }

GO FUNC net._f_error_Temporary from net/net.go:
func _f_error_Temporary(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Error)Temporary()", args, 0, 0)
	_res := o.O.(net.Error).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_error_Timeout from net/net.go:
func _f_error_Timeout(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Error)Timeout()", args, 0, 0)
	_res := o.O.(net.Error).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net._f_iPMask_Size from net/ip.go:
func _f_iPMask_Size(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IPMask)Size()", args, 0, 0)
	ones, bits := o.O.(net.IPMask).Size()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeInt(ones))
	_res = _res.Conjoin(MakeInt(bits))
	return _res
}

GO FUNC net._f_iPMask_String from net/ip.go:
func _f_iPMask_String(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IPMask)String()", args, 0, 0)
	_res := o.O.(net.IPMask).String()
	return MakeString(_res)
}

GO FUNC net._f_iP_DefaultMask from net/ip.go:
func _f_iP_DefaultMask(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)DefaultMask()", args, 0, 0)
	_res := o.O.(net.IP).DefaultMask()
	return MakeGoObject(_res)
}

GO FUNC net._f_iP_Equal from net/ip.go:
func _f_iP_Equal(o GoObject, args Object) Object {  // Receiver
	_argList := CheckGoArity("(net.IP)Equal()", args, 1, 1)
	_v_x := ExtractGo_go_std_net__IP("(net.IP)Equal()", "_v_x", _argList, 0)
	_res := o.O.(net.IP).Equal(_v_x)
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsGlobalUnicast from net/ip.go:
func _f_iP_IsGlobalUnicast(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsGlobalUnicast()", args, 0, 0)
	_res := o.O.(net.IP).IsGlobalUnicast()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsInterfaceLocalMulticast from net/ip.go:
func _f_iP_IsInterfaceLocalMulticast(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsInterfaceLocalMulticast()", args, 0, 0)
	_res := o.O.(net.IP).IsInterfaceLocalMulticast()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsLinkLocalMulticast from net/ip.go:
func _f_iP_IsLinkLocalMulticast(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsLinkLocalMulticast()", args, 0, 0)
	_res := o.O.(net.IP).IsLinkLocalMulticast()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsLinkLocalUnicast from net/ip.go:
func _f_iP_IsLinkLocalUnicast(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsLinkLocalUnicast()", args, 0, 0)
	_res := o.O.(net.IP).IsLinkLocalUnicast()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsLoopback from net/ip.go:
func _f_iP_IsLoopback(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsLoopback()", args, 0, 0)
	_res := o.O.(net.IP).IsLoopback()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsMulticast from net/ip.go:
func _f_iP_IsMulticast(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsMulticast()", args, 0, 0)
	_res := o.O.(net.IP).IsMulticast()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_IsUnspecified from net/ip.go:
func _f_iP_IsUnspecified(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)IsUnspecified()", args, 0, 0)
	_res := o.O.(net.IP).IsUnspecified()
	return MakeBoolean(_res)
}

GO FUNC net._f_iP_MarshalText from net/ip.go:
func _f_iP_MarshalText(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)MarshalText()", args, 0, 0)
	_res1, _res2 := o.O.(net.IP).MarshalText()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net._f_iP_Mask from net/ip.go:
func _f_iP_Mask(o GoObject, args Object) Object {  // Receiver
	_argList := CheckGoArity("(net.IP)Mask()", args, 1, 1)
	_v_mask := ExtractGo_go_std_net__IPMask("(net.IP)Mask()", "_v_mask", _argList, 0)
	_res := o.O.(net.IP).Mask(_v_mask)
	return MakeGoObject(_res)
}

GO FUNC net._f_iP_String from net/ip.go:
func _f_iP_String(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)String()", args, 0, 0)
	_res := o.O.(net.IP).String()
	return MakeString(_res)
}

GO FUNC net._f_iP_To16 from net/ip.go:
func _f_iP_To16(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)To16()", args, 0, 0)
	_res := o.O.(net.IP).To16()
	return MakeGoObject(_res)
}

GO FUNC net._f_iP_To4 from net/ip.go:
func _f_iP_To4(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.IP)To4()", args, 0, 0)
	_res := o.O.(net.IP).To4()
	return MakeGoObject(_res)
}

GO FUNC net._f_invalidAddrError_Error from net/net.go:
func _f_invalidAddrError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.InvalidAddrError)Error()", args, 0, 0)
	_res := o.O.(net.InvalidAddrError).Error()
	return MakeString(_res)
}

GO FUNC net._f_invalidAddrError_Temporary from net/net.go:
func _f_invalidAddrError_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.InvalidAddrError)Temporary()", args, 0, 0)
	_res := o.O.(net.InvalidAddrError).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_invalidAddrError_Timeout from net/net.go:
func _f_invalidAddrError_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.InvalidAddrError)Timeout()", args, 0, 0)
	_res := o.O.(net.InvalidAddrError).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net._f_listener_Accept from net/net.go:
func _f_listener_Accept(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Listener)Accept()", args, 0, 0)
	_res1, _res2 := o.O.(net.Listener).Accept()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net._f_listener_Addr from net/net.go:
func _f_listener_Addr(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Listener)Addr()", args, 0, 0)
	_res := o.O.(net.Listener).Addr()
	return MakeGoObject(_res)
}

GO FUNC net._f_listener_Close from net/net.go:
func _f_listener_Close(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.Listener)Close()", args, 0, 0)
	_res := o.O.(net.Listener).Close()
	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
}

GO FUNC net._f_packetConn_Close from net/net.go:
func _f_packetConn_Close(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.PacketConn)Close()", args, 0, 0)
	_res := o.O.(net.PacketConn).Close()
	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
}

GO FUNC net._f_packetConn_LocalAddr from net/net.go:
func _f_packetConn_LocalAddr(o GoObject, args Object) Object {  // Method
	CheckGoArity("(net.PacketConn)LocalAddr()", args, 0, 0)
	_res := o.O.(net.PacketConn).LocalAddr()
	return MakeGoObject(_res)
}

GO FUNC net._f_packetConn_ReadFrom from net/net.go:
// func _f_packetConn_ReadFrom(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.PacketConn)ReadFrom()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_p at: _tests/small/src/net/net.go:314:13)
// 	n, addr, err := o.O.(net.PacketConn).ReadFrom(_v_p)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(MakeGoObject(addr))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_packetConn_SetDeadline from net/net.go:
// func _f_packetConn_SetDeadline(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.PacketConn)SetDeadline()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_t at: _tests/small/src/net/net.go:345:16)
// 	_res := o.O.(net.PacketConn).SetDeadline(_v_t)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_packetConn_SetReadDeadline from net/net.go:
// func _f_packetConn_SetReadDeadline(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.PacketConn)SetReadDeadline()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_t at: _tests/small/src/net/net.go:350:20)
// 	_res := o.O.(net.PacketConn).SetReadDeadline(_v_t)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_packetConn_SetWriteDeadline from net/net.go:
// func _f_packetConn_SetWriteDeadline(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.PacketConn)SetWriteDeadline()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_t at: _tests/small/src/net/net.go:357:21)
// 	_res := o.O.(net.PacketConn).SetWriteDeadline(_v_t)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_packetConn_WriteTo from net/net.go:
// func _f_packetConn_WriteTo(o GoObject, args Object) Object {  // Method
// 	_argList := CheckGoArity("(net.PacketConn)WriteTo()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_p at: _tests/small/src/net/net.go:321:12)
// 	_v_addr := ExtractGo_go_std_net__Addr("(net.PacketConn)WriteTo()", "_v_addr", _argList, 1)
// 	n, err := o.O.(net.PacketConn).WriteTo(_v_p, _v_addr)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_AddrError_Error from net/net.go:
func _f_ptrTo_AddrError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.AddrError)Error()", args, 0, 0)
	_res := o.O.(*net.AddrError).Error()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_AddrError_Temporary from net/net.go:
func _f_ptrTo_AddrError_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.AddrError)Temporary()", args, 0, 0)
	_res := o.O.(*net.AddrError).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_AddrError_Timeout from net/net.go:
func _f_ptrTo_AddrError_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.AddrError)Timeout()", args, 0, 0)
	_res := o.O.(*net.AddrError).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_Buffers_Read from net/net.go:
// func _f_ptrTo_Buffers_Read(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Buffers)Read()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_p at: _tests/small/src/net/net.go:674:26)
// 	n, err := o.O.(*net.Buffers).Read(_v_p)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Buffers_WriteTo from net/net.go:
// func _f_ptrTo_Buffers_WriteTo(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Buffers)WriteTo()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_w at: _tests/small/src/net/net.go:658:29)
// 	n, err := o.O.(*net.Buffers).WriteTo(_v_w)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeBigInt(n))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_DNSConfigError_Error from net/net.go:
func _f_ptrTo_DNSConfigError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.DNSConfigError)Error()", args, 0, 0)
	_res := o.O.(*net.DNSConfigError).Error()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_DNSConfigError_Temporary from net/net.go:
func _f_ptrTo_DNSConfigError_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.DNSConfigError)Temporary()", args, 0, 0)
	_res := o.O.(*net.DNSConfigError).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_DNSConfigError_Timeout from net/net.go:
func _f_ptrTo_DNSConfigError_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.DNSConfigError)Timeout()", args, 0, 0)
	_res := o.O.(*net.DNSConfigError).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_DNSError_Error from net/net.go:
func _f_ptrTo_DNSError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.DNSError)Error()", args, 0, 0)
	_res := o.O.(*net.DNSError).Error()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_DNSError_Temporary from net/net.go:
func _f_ptrTo_DNSError_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.DNSError)Temporary()", args, 0, 0)
	_res := o.O.(*net.DNSError).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_DNSError_Timeout from net/net.go:
func _f_ptrTo_DNSError_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.DNSError)Timeout()", args, 0, 0)
	_res := o.O.(*net.DNSError).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_IPAddr_Network from net/iprawsock.go:
func _f_ptrTo_IPAddr_Network(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.IPAddr)Network()", args, 0, 0)
	_res := o.O.(*net.IPAddr).Network()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_IPAddr_String from net/iprawsock.go:
func _f_ptrTo_IPAddr_String(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.IPAddr)String()", args, 0, 0)
	_res := o.O.(*net.IPAddr).String()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_IPConn_ReadFrom from net/iprawsock.go:
// func _f_ptrTo_IPConn_ReadFrom(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IPConn)ReadFrom()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/iprawsock.go:125:29)
// 	_res1, _res2, _res3 := o.O.(*net.IPConn).ReadFrom(_v_b)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(_res1))
// 	_res = _res.Conjoin(MakeGoObject(_res2))
// 	_res = _res.Conjoin(func () Object { if (_res3) == nil { return NIL } else { return MakeError(_res3) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_IPConn_ReadFromIP from net/iprawsock.go:
// func _f_ptrTo_IPConn_ReadFromIP(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IPConn)ReadFromIP()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/iprawsock.go:113:31)
// 	_res1, _res2, _res3 := o.O.(*net.IPConn).ReadFromIP(_v_b)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(_res1))
// 	_res = _res.Conjoin(MakeGoObject(_res2))
// 	_res = _res.Conjoin(func () Object { if (_res3) == nil { return NIL } else { return MakeError(_res3) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_IPConn_ReadMsgIP from net/iprawsock.go:
// func _f_ptrTo_IPConn_ReadMsgIP(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IPConn)ReadMsgIP()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/iprawsock.go:146:35)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_oob at: _tests/small/src/net/iprawsock.go:146:35)
// 	n, oobn, flags, addr, err := o.O.(*net.IPConn).ReadMsgIP(_v_b, _v_oob)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(MakeInt(oobn))
// 	_res = _res.Conjoin(MakeInt(flags))
// 	_res = _res.Conjoin(MakeGoObject(addr))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_IPConn_SyscallConn from net/iprawsock.go:
func _f_ptrTo_IPConn_SyscallConn(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.IPConn)SyscallConn()", args, 0, 0)
	_res1, _res2 := o.O.(*net.IPConn).SyscallConn()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net._f_ptrTo_IPConn_WriteMsgIP from net/iprawsock.go:
// func _f_ptrTo_IPConn_WriteMsgIP(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IPConn)WriteMsgIP()", args, 3, 3)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/iprawsock.go:191:36)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_oob at: _tests/small/src/net/iprawsock.go:191:36)
// 	ABEND644(pre.go: unsupported built-in type *ast.StarExpr for _v_addr at: _tests/small/src/net/iprawsock.go:191:49)
// 	n, oobn, err := o.O.(*net.IPConn).WriteMsgIP(_v_b, _v_oob, _v_addr)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(n))
// 	_res = _res.Conjoin(MakeInt(oobn))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_IPConn_WriteTo from net/iprawsock.go:
// func _f_ptrTo_IPConn_WriteTo(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IPConn)WriteTo()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/iprawsock.go:170:28)
// 	_v_addr := ExtractGo_go_std_net__Addr("(*net.IPConn)WriteTo()", "_v_addr", _argList, 1)
// 	_res1, _res2 := o.O.(*net.IPConn).WriteTo(_v_b, _v_addr)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_IPConn_WriteToIP from net/iprawsock.go:
// func _f_ptrTo_IPConn_WriteToIP(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IPConn)WriteToIP()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_b at: _tests/small/src/net/iprawsock.go:158:30)
// 	ABEND644(pre.go: unsupported built-in type *ast.StarExpr for _v_addr at: _tests/small/src/net/iprawsock.go:158:43)
// 	_res1, _res2 := o.O.(*net.IPConn).WriteToIP(_v_b, _v_addr)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_IPNet_Contains from net/ip.go:
func _f_ptrTo_IPNet_Contains(o GoObject, args Object) Object {  // Receiver
	_argList := CheckGoArity("(*net.IPNet)Contains()", args, 1, 1)
	_v_ip := ExtractGo_go_std_net__IP("(*net.IPNet)Contains()", "_v_ip", _argList, 0)
	_res := o.O.(*net.IPNet).Contains(_v_ip)
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_IPNet_Network from net/ip.go:
func _f_ptrTo_IPNet_Network(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.IPNet)Network()", args, 0, 0)
	_res := o.O.(*net.IPNet).Network()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_IPNet_String from net/ip.go:
func _f_ptrTo_IPNet_String(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.IPNet)String()", args, 0, 0)
	_res := o.O.(*net.IPNet).String()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_IP_UnmarshalText from net/ip.go:
// func _f_ptrTo_IP_UnmarshalText(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.IP)UnmarshalText()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_text at: _tests/small/src/net/ip.go:390:34)
// 	_res := o.O.(*net.IP).UnmarshalText(_v_text)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net._f_ptrTo_OpError_Error from net/net.go:
func _f_ptrTo_OpError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.OpError)Error()", args, 0, 0)
	_res := o.O.(*net.OpError).Error()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_OpError_Temporary from net/net.go:
func _f_ptrTo_OpError_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.OpError)Temporary()", args, 0, 0)
	_res := o.O.(*net.OpError).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_OpError_Timeout from net/net.go:
func _f_ptrTo_OpError_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.OpError)Timeout()", args, 0, 0)
	_res := o.O.(*net.OpError).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net._f_ptrTo_ParseError_Error from net/net.go:
func _f_ptrTo_ParseError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*net.ParseError)Error()", args, 0, 0)
	_res := o.O.(*net.ParseError).Error()
	return MakeString(_res)
}

GO FUNC net._f_ptrTo_Resolver_LookupAddr from net/lookup.go:
// func _f_ptrTo_Resolver_LookupAddr(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupAddr()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:398:35)
// 	_v_addr := ExtractGoString("(*net.Resolver)LookupAddr()", "_v_addr", _argList, 1)
// 	names, err := o.O.(*net.Resolver).LookupAddr(_v_ctx, _v_addr)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(names))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupCNAME from net/lookup.go:
// func _f_ptrTo_Resolver_LookupCNAME(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupCNAME()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:327:36)
// 	_v_host := ExtractGoString("(*net.Resolver)LookupCNAME()", "_v_host", _argList, 1)
// 	cname, err := o.O.(*net.Resolver).LookupCNAME(_v_ctx, _v_host)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeString(cname))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupHost from net/lookup.go:
// func _f_ptrTo_Resolver_LookupHost(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupHost()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:163:35)
// 	_v_host := ExtractGoString("(*net.Resolver)LookupHost()", "_v_host", _argList, 1)
// 	addrs, err := o.O.(*net.Resolver).LookupHost(_v_ctx, _v_host)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(addrs))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupIPAddr from net/lookup.go:
// func _f_ptrTo_Resolver_LookupIPAddr(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupIPAddr()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:191:37)
// 	_v_host := ExtractGoString("(*net.Resolver)LookupIPAddr()", "_v_host", _argList, 1)
// 	_res1, _res2 := o.O.(*net.Resolver).LookupIPAddr(_v_ctx, _v_host)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupMX from net/lookup.go:
// func _f_ptrTo_Resolver_LookupMX(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupMX()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:363:33)
// 	_v_name := ExtractGoString("(*net.Resolver)LookupMX()", "_v_name", _argList, 1)
// 	_res1, _res2 := o.O.(*net.Resolver).LookupMX(_v_ctx, _v_name)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupNS from net/lookup.go:
// func _f_ptrTo_Resolver_LookupNS(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupNS()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:373:33)
// 	_v_name := ExtractGoString("(*net.Resolver)LookupNS()", "_v_name", _argList, 1)
// 	_res1, _res2 := o.O.(*net.Resolver).LookupNS(_v_ctx, _v_name)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupPort from net/lookup.go:
// func _f_ptrTo_Resolver_LookupPort(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupPort()", args, 3, 3)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:289:35)
// 	_v_network := ExtractGoString("(*net.Resolver)LookupPort()", "_v_network", _argList, 1)
// 	_v_service := ExtractGoString("(*net.Resolver)LookupPort()", "_v_service", _argList, 2)
// 	port, err := o.O.(*net.Resolver).LookupPort(_v_ctx, _v_network, _v_service)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeInt(port))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupSRV from net/lookup.go:
// func _f_ptrTo_Resolver_LookupSRV(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupSRV()", args, 4, 4)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:353:34)
// 	_v_service := ExtractGoString("(*net.Resolver)LookupSRV()", "_v_service", _argList, 1)
// 	_v_proto := ExtractGoString("(*net.Resolver)LookupSRV()", "_v_proto", _argList, 2)
// 	_v_name := ExtractGoString("(*net.Resolver)LookupSRV()", "_v_name", _argList, 3)
// 	cname, addrs, err := o.O.(*net.Resolver).LookupSRV(_v_ctx, _v_service, _v_proto, _v_name)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeString(cname))
// 	_res = _res.Conjoin(MakeGoObject(addrs))
// 	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
// 	return _res
// }

GO FUNC net._f_ptrTo_Resolver_LookupTXT from net/lookup.go:
// func _f_ptrTo_Resolver_LookupTXT(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*net.Resolver)LookupTXT()", args, 2, 2)
// 	ABEND644(pre.go: unsupported built-in type *ast.SelectorExpr for _v_ctx at: _tests/small/src/net/lookup.go:383:34)
// 	_v_name := ExtractGoString("(*net.Resolver)LookupTXT()", "_v_name", _argList, 1)
// 	_res1, _res2 := o.O.(*net.Resolver).LookupTXT(_v_ctx, _v_name)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

GO FUNC net._f_unknownNetworkError_Error from net/net.go:
func _f_unknownNetworkError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.UnknownNetworkError)Error()", args, 0, 0)
	_res := o.O.(net.UnknownNetworkError).Error()
	return MakeString(_res)
}

GO FUNC net._f_unknownNetworkError_Temporary from net/net.go:
func _f_unknownNetworkError_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.UnknownNetworkError)Temporary()", args, 0, 0)
	_res := o.O.(net.UnknownNetworkError).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net._f_unknownNetworkError_Timeout from net/net.go:
func _f_unknownNetworkError_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(net.UnknownNetworkError)Timeout()", args, 0, 0)
	_res := o.O.(net.UnknownNetworkError).Timeout()
	return MakeBoolean(_res)
}

GO VARDEF FOR TYPE go.std.net/Addr from _tests/small/src/net/net.go:105:6:
var info_Addr GoTypeInfo

GO VARDEF FOR TYPE go.std.net/AddrError from _tests/small/src/net/net.go:529:6:
var info_AddrError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/AddrError from _tests/small/src/net/net.go:529:6:
var info_PtrTo_AddrError GoTypeInfo

GO VARDEF FOR TYPE go.std.net/Buffers from _tests/small/src/net/net.go:651:6:
var info_Buffers GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/Buffers from _tests/small/src/net/net.go:651:6:
var info_PtrTo_Buffers GoTypeInfo

GO VARDEF FOR TYPE go.std.net/Conn from _tests/small/src/net/net.go:113:6:
var info_Conn GoTypeInfo

GO VARDEF FOR TYPE go.std.net/DNSConfigError from _tests/small/src/net/net.go:562:6:
var info_DNSConfigError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/DNSConfigError from _tests/small/src/net/net.go:562:6:
var info_PtrTo_DNSConfigError GoTypeInfo

GO VARDEF FOR TYPE go.std.net/DNSError from _tests/small/src/net/net.go:576:6:
var info_DNSError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/DNSError from _tests/small/src/net/net.go:576:6:
var info_PtrTo_DNSError GoTypeInfo

GO VARDEF FOR TYPE go.std.net/Error from _tests/small/src/net/net.go:387:6:
var info_Error GoTypeInfo

GO VARDEF FOR TYPE go.std.net/IP from _tests/small/src/net/ip.go:32:6:
var info_IP GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/IP from _tests/small/src/net/ip.go:32:6:
var info_PtrTo_IP GoTypeInfo

GO VARDEF FOR TYPE go.std.net/IPAddr from _tests/small/src/net/iprawsock.go:31:6:
var info_IPAddr GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/IPAddr from _tests/small/src/net/iprawsock.go:31:6:
var info_PtrTo_IPAddr GoTypeInfo

GO VARDEF FOR TYPE go.std.net/IPConn from _tests/small/src/net/iprawsock.go:99:6:
var info_IPConn GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/IPConn from _tests/small/src/net/iprawsock.go:99:6:
var info_PtrTo_IPConn GoTypeInfo

GO VARDEF FOR TYPE go.std.net/IPMask from _tests/small/src/net/ip.go:35:6:
var info_IPMask GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/IPMask from _tests/small/src/net/ip.go:35:6:
var info_PtrTo_IPMask GoTypeInfo

GO VARDEF FOR TYPE go.std.net/IPNet from _tests/small/src/net/ip.go:38:6:
var info_IPNet GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/IPNet from _tests/small/src/net/ip.go:38:6:
var info_PtrTo_IPNet GoTypeInfo

GO VARDEF FOR TYPE go.std.net/InvalidAddrError from _tests/small/src/net/net.go:554:6:
var info_InvalidAddrError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/InvalidAddrError from _tests/small/src/net/net.go:554:6:
var info_PtrTo_InvalidAddrError GoTypeInfo

GO VARDEF FOR TYPE go.std.net/Listener from _tests/small/src/net/net.go:374:6:
var info_Listener GoTypeInfo

GO VARDEF FOR TYPE go.std.net/MX from _tests/small/src/net/dnsclient.go:193:6:
var info_MX GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/MX from _tests/small/src/net/dnsclient.go:193:6:
var info_PtrTo_MX GoTypeInfo

GO VARDEF FOR TYPE go.std.net/NS from _tests/small/src/net/dnsclient.go:215:6:
var info_NS GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/NS from _tests/small/src/net/dnsclient.go:215:6:
var info_PtrTo_NS GoTypeInfo

GO VARDEF FOR TYPE go.std.net/OpError from _tests/small/src/net/net.go:425:6:
var info_OpError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/OpError from _tests/small/src/net/net.go:425:6:
var info_PtrTo_OpError GoTypeInfo

GO VARDEF FOR TYPE go.std.net/PacketConn from _tests/small/src/net/net.go:303:6:
var info_PacketConn GoTypeInfo

GO VARDEF FOR TYPE go.std.net/ParseError from _tests/small/src/net/net.go:518:6:
var info_ParseError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/ParseError from _tests/small/src/net/net.go:518:6:
var info_PtrTo_ParseError GoTypeInfo

GO VARDEF FOR TYPE go.std.net/Resolver from _tests/small/src/net/lookup.go:107:6:
var info_Resolver GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/Resolver from _tests/small/src/net/lookup.go:107:6:
var info_PtrTo_Resolver GoTypeInfo

GO VARDEF FOR TYPE go.std.net/SRV from _tests/small/src/net/dnsclient.go:139:6:
var info_SRV GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/SRV from _tests/small/src/net/dnsclient.go:139:6:
var info_PtrTo_SRV GoTypeInfo

GO VARDEF FOR TYPE go.std.net/UnknownNetworkError from _tests/small/src/net/net.go:548:6:
var info_UnknownNetworkError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net/UnknownNetworkError from _tests/small/src/net/net.go:548:6:
var info_PtrTo_UnknownNetworkError GoTypeInfo

GO INFO FOR TYPE go.std.net/Addr from _tests/small/src/net/net.go:105:6:
	info_Addr = GoTypeInfo{Name: "go.std.net/Addr",
		GoType: &GoType{T: &info_Addr},
		Members: GoMembers{
			"Network": MakeGoReceiver("Network", _f_addr_Network, "name of the network (for example, \"tcp\", \"udp\")\n", "1.0", NewVectorFrom()),
			"String": MakeGoReceiver("String", _f_addr_String, "string form of address (for example, \"192.0.2.1:25\", \"[2001:db8::1]:80\")\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/AddrError from _tests/small/src/net/net.go:529:6:
	info_AddrError = GoTypeInfo{Name: "go.std.net/AddrError",
		GoType: &GoType{T: &info_AddrError},
		Ctor: _Wrapped_Ctor_AddrError,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/AddrError from _tests/small/src/net/net.go:529:6:
	info_PtrTo_AddrError = GoTypeInfo{Name: "*go.std.net/AddrError",
		GoType: &GoType{T: &info_PtrTo_AddrError},
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_ptrTo_AddrError_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_ptrTo_AddrError_Temporary, "", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_ptrTo_AddrError_Timeout, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/Buffers from _tests/small/src/net/net.go:651:6:
	info_Buffers = GoTypeInfo{Name: "go.std.net/Buffers",
		GoType: &GoType{T: &info_Buffers},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/Buffers from _tests/small/src/net/net.go:651:6:
	info_PtrTo_Buffers = GoTypeInfo{Name: "*go.std.net/Buffers",
		GoType: &GoType{T: &info_PtrTo_Buffers},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/Conn from _tests/small/src/net/net.go:113:6:
	info_Conn = GoTypeInfo{Name: "go.std.net/Conn",
		GoType: &GoType{T: &info_Conn},
		Members: GoMembers{
			"Close": MakeGoReceiver("Close", _f_conn_Close, "Close closes the connection.\nAny blocked Read or Write operations will be unblocked and return errors.\n", "1.0", NewVectorFrom()),
			"LocalAddr": MakeGoReceiver("LocalAddr", _f_conn_LocalAddr, "LocalAddr returns the local network address.\n", "1.0", NewVectorFrom()),
			"RemoteAddr": MakeGoReceiver("RemoteAddr", _f_conn_RemoteAddr, "RemoteAddr returns the remote network address.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/DNSConfigError from _tests/small/src/net/net.go:562:6:
	info_DNSConfigError = GoTypeInfo{Name: "go.std.net/DNSConfigError",
		GoType: &GoType{T: &info_DNSConfigError},
		Ctor: _Wrapped_Ctor_DNSConfigError,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/DNSConfigError from _tests/small/src/net/net.go:562:6:
	info_PtrTo_DNSConfigError = GoTypeInfo{Name: "*go.std.net/DNSConfigError",
		GoType: &GoType{T: &info_PtrTo_DNSConfigError},
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_ptrTo_DNSConfigError_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_ptrTo_DNSConfigError_Temporary, "", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_ptrTo_DNSConfigError_Timeout, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/DNSError from _tests/small/src/net/net.go:576:6:
	info_DNSError = GoTypeInfo{Name: "go.std.net/DNSError",
		GoType: &GoType{T: &info_DNSError},
		Ctor: _Wrapped_Ctor_DNSError,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/DNSError from _tests/small/src/net/net.go:576:6:
	info_PtrTo_DNSError = GoTypeInfo{Name: "*go.std.net/DNSError",
		GoType: &GoType{T: &info_PtrTo_DNSError},
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_ptrTo_DNSError_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_ptrTo_DNSError_Temporary, "Temporary reports whether the DNS error is known to be temporary.\nThis is not always known; a DNS lookup may fail due to a temporary\nerror and return a DNSError for which Temporary returns false.\n", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_ptrTo_DNSError_Timeout, "Timeout reports whether the DNS lookup is known to have timed out.\nThis is not always known; a DNS lookup may fail due to a timeout\nand return a DNSError for which Timeout returns false.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/Error from _tests/small/src/net/net.go:387:6:
	info_Error = GoTypeInfo{Name: "go.std.net/Error",
		GoType: &GoType{T: &info_Error},
		Members: GoMembers{
			"Temporary": MakeGoReceiver("Temporary", _f_error_Temporary, "Is the error temporary?\n", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_error_Timeout, "Is the error a timeout?\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/IP from _tests/small/src/net/ip.go:32:6:
	info_IP = GoTypeInfo{Name: "go.std.net/IP",
		GoType: &GoType{T: &info_IP},
		Members: GoMembers{
			"DefaultMask": MakeGoReceiver("DefaultMask", _f_iP_DefaultMask, "DefaultMask returns the default IP mask for the IP address ip.\nOnly IPv4 addresses have default masks; DefaultMask returns\nnil if ip is not a valid IPv4 address.\n", "1.0", NewVectorFrom()),
			"Equal": MakeGoReceiver("Equal", _f_iP_Equal, "Equal reports whether ip and x are the same IP address.\nAn IPv4 address and that same address in IPv6 form are\nconsidered to be equal.\n", "1.0", NewVectorFrom(MakeSymbol("x"))),
			"IsGlobalUnicast": MakeGoReceiver("IsGlobalUnicast", _f_iP_IsGlobalUnicast, "IsGlobalUnicast reports whether ip is a global unicast\naddress.\n\nThe identification of global unicast addresses uses address type\nidentification as defined in RFC 1122, RFC 4632 and RFC 4291 with\nthe exception of IPv4 directed broadcast addresses.\nIt returns true even if ip is in IPv4 private address space or\nlocal IPv6 unicast address space.\n", "1.0", NewVectorFrom()),
			"IsInterfaceLocalMulticast": MakeGoReceiver("IsInterfaceLocalMulticast", _f_iP_IsInterfaceLocalMulticast, "IsInterfaceLocalMulticast reports whether ip is\nan interface-local multicast address.\n", "1.0", NewVectorFrom()),
			"IsLinkLocalMulticast": MakeGoReceiver("IsLinkLocalMulticast", _f_iP_IsLinkLocalMulticast, "IsLinkLocalMulticast reports whether ip is a link-local\nmulticast address.\n", "1.0", NewVectorFrom()),
			"IsLinkLocalUnicast": MakeGoReceiver("IsLinkLocalUnicast", _f_iP_IsLinkLocalUnicast, "IsLinkLocalUnicast reports whether ip is a link-local\nunicast address.\n", "1.0", NewVectorFrom()),
			"IsLoopback": MakeGoReceiver("IsLoopback", _f_iP_IsLoopback, "IsLoopback reports whether ip is a loopback address.\n", "1.0", NewVectorFrom()),
			"IsMulticast": MakeGoReceiver("IsMulticast", _f_iP_IsMulticast, "IsMulticast reports whether ip is a multicast address.\n", "1.0", NewVectorFrom()),
			"IsUnspecified": MakeGoReceiver("IsUnspecified", _f_iP_IsUnspecified, "IsUnspecified reports whether ip is an unspecified address, either\nthe IPv4 address \"0.0.0.0\" or the IPv6 address \"::\".\n", "1.0", NewVectorFrom()),
			"MarshalText": MakeGoReceiver("MarshalText", _f_iP_MarshalText, "MarshalText implements the encoding.TextMarshaler interface.\nThe encoding is the same as returned by String, with one exception:\nWhen len(ip) is zero, it returns an empty slice.\n", "1.0", NewVectorFrom()),
			"Mask": MakeGoReceiver("Mask", _f_iP_Mask, "Mask returns the result of masking the IP address ip with mask.\n", "1.0", NewVectorFrom(MakeSymbol("mask"))),
			"String": MakeGoReceiver("String", _f_iP_String, "String returns the string form of the IP address ip.\nIt returns one of 4 forms:\n  - \"<nil>\", if ip has length 0\n  - dotted decimal (\"192.0.2.1\"), if ip is an IPv4 or IP4-mapped IPv6 address\n  - IPv6 (\"2001:db8::1\"), if ip is a valid IPv6 address\n  - the hexadecimal form of ip, without punctuation, if no other cases apply\n", "1.0", NewVectorFrom()),
			"To16": MakeGoReceiver("To16", _f_iP_To16, "To16 converts the IP address ip to a 16-byte representation.\nIf ip is not an IP address (it is the wrong length), To16 returns nil.\n", "1.0", NewVectorFrom()),
			"To4": MakeGoReceiver("To4", _f_iP_To4, "To4 converts the IPv4 address ip to a 4-byte representation.\nIf ip is not an IPv4 address, To4 returns nil.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE *go.std.net/IP from _tests/small/src/net/ip.go:32:6:
	info_PtrTo_IP = GoTypeInfo{Name: "*go.std.net/IP",
		GoType: &GoType{T: &info_PtrTo_IP},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/IPAddr from _tests/small/src/net/iprawsock.go:31:6:
	info_IPAddr = GoTypeInfo{Name: "go.std.net/IPAddr",
		GoType: &GoType{T: &info_IPAddr},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/IPAddr from _tests/small/src/net/iprawsock.go:31:6:
	info_PtrTo_IPAddr = GoTypeInfo{Name: "*go.std.net/IPAddr",
		GoType: &GoType{T: &info_PtrTo_IPAddr},
		Members: GoMembers{
			"Network": MakeGoReceiver("Network", _f_ptrTo_IPAddr_Network, "Network returns the address's network name, \"ip\".\n", "1.0", NewVectorFrom()),
			"String": MakeGoReceiver("String", _f_ptrTo_IPAddr_String, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/IPConn from _tests/small/src/net/iprawsock.go:99:6:
	info_IPConn = GoTypeInfo{Name: "go.std.net/IPConn",
		GoType: &GoType{T: &info_IPConn},
		Ctor: _Wrapped_Ctor_IPConn,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/IPConn from _tests/small/src/net/iprawsock.go:99:6:
	info_PtrTo_IPConn = GoTypeInfo{Name: "*go.std.net/IPConn",
		GoType: &GoType{T: &info_PtrTo_IPConn},
		Members: GoMembers{
			"SyscallConn": MakeGoReceiver("SyscallConn", _f_ptrTo_IPConn_SyscallConn, "SyscallConn returns a raw network connection.\nThis implements the syscall.Conn interface.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/IPMask from _tests/small/src/net/ip.go:35:6:
	info_IPMask = GoTypeInfo{Name: "go.std.net/IPMask",
		GoType: &GoType{T: &info_IPMask},
		Members: GoMembers{
			"Size": MakeGoReceiver("Size", _f_iPMask_Size, "Size returns the number of leading ones and total bits in the mask.\nIf the mask is not in the canonical form--ones followed by zeros--then\nSize returns 0, 0.\n", "1.0", NewVectorFrom()),
			"String": MakeGoReceiver("String", _f_iPMask_String, "String returns the hexadecimal form of m, with no punctuation.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE *go.std.net/IPMask from _tests/small/src/net/ip.go:35:6:
	info_PtrTo_IPMask = GoTypeInfo{Name: "*go.std.net/IPMask",
		GoType: &GoType{T: &info_PtrTo_IPMask},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/IPNet from _tests/small/src/net/ip.go:38:6:
	info_IPNet = GoTypeInfo{Name: "go.std.net/IPNet",
		GoType: &GoType{T: &info_IPNet},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/IPNet from _tests/small/src/net/ip.go:38:6:
	info_PtrTo_IPNet = GoTypeInfo{Name: "*go.std.net/IPNet",
		GoType: &GoType{T: &info_PtrTo_IPNet},
		Members: GoMembers{
			"Contains": MakeGoReceiver("Contains", _f_ptrTo_IPNet_Contains, "Contains reports whether the network includes ip.\n", "1.0", NewVectorFrom(MakeSymbol("ip"))),
			"Network": MakeGoReceiver("Network", _f_ptrTo_IPNet_Network, "Network returns the address's network name, \"ip+net\".\n", "1.0", NewVectorFrom()),
			"String": MakeGoReceiver("String", _f_ptrTo_IPNet_String, "String returns the CIDR notation of n like \"192.0.2.1/24\"\nor \"2001:db8::/48\" as defined in RFC 4632 and RFC 4291.\nIf the mask is not in the canonical form, it returns the\nstring which consists of an IP address, followed by a slash\ncharacter and a mask expressed as hexadecimal form with no\npunctuation like \"198.51.100.1/c000ff00\".\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/InvalidAddrError from _tests/small/src/net/net.go:554:6:
	info_InvalidAddrError = GoTypeInfo{Name: "go.std.net/InvalidAddrError",
		GoType: &GoType{T: &info_InvalidAddrError},
		Ctor: _Wrapped_Ctor_InvalidAddrError,
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_invalidAddrError_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_invalidAddrError_Temporary, "", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_invalidAddrError_Timeout, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE *go.std.net/InvalidAddrError from _tests/small/src/net/net.go:554:6:
	info_PtrTo_InvalidAddrError = GoTypeInfo{Name: "*go.std.net/InvalidAddrError",
		GoType: &GoType{T: &info_PtrTo_InvalidAddrError},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/Listener from _tests/small/src/net/net.go:374:6:
	info_Listener = GoTypeInfo{Name: "go.std.net/Listener",
		GoType: &GoType{T: &info_Listener},
		Members: GoMembers{
			"Accept": MakeGoReceiver("Accept", _f_listener_Accept, "Accept waits for and returns the next connection to the listener.\n", "1.0", NewVectorFrom()),
			"Addr": MakeGoReceiver("Addr", _f_listener_Addr, "Addr returns the listener's network address.\n", "1.0", NewVectorFrom()),
			"Close": MakeGoReceiver("Close", _f_listener_Close, "Close closes the listener.\nAny blocked Accept operations will be unblocked and return errors.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/MX from _tests/small/src/net/dnsclient.go:193:6:
	info_MX = GoTypeInfo{Name: "go.std.net/MX",
		GoType: &GoType{T: &info_MX},
		Ctor: _Wrapped_Ctor_MX,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/MX from _tests/small/src/net/dnsclient.go:193:6:
	info_PtrTo_MX = GoTypeInfo{Name: "*go.std.net/MX",
		GoType: &GoType{T: &info_PtrTo_MX},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/NS from _tests/small/src/net/dnsclient.go:215:6:
	info_NS = GoTypeInfo{Name: "go.std.net/NS",
		GoType: &GoType{T: &info_NS},
		Ctor: _Wrapped_Ctor_NS,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/NS from _tests/small/src/net/dnsclient.go:215:6:
	info_PtrTo_NS = GoTypeInfo{Name: "*go.std.net/NS",
		GoType: &GoType{T: &info_PtrTo_NS},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/OpError from _tests/small/src/net/net.go:425:6:
	info_OpError = GoTypeInfo{Name: "go.std.net/OpError",
		GoType: &GoType{T: &info_OpError},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/OpError from _tests/small/src/net/net.go:425:6:
	info_PtrTo_OpError = GoTypeInfo{Name: "*go.std.net/OpError",
		GoType: &GoType{T: &info_PtrTo_OpError},
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_ptrTo_OpError_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_ptrTo_OpError_Temporary, "", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_ptrTo_OpError_Timeout, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/PacketConn from _tests/small/src/net/net.go:303:6:
	info_PacketConn = GoTypeInfo{Name: "go.std.net/PacketConn",
		GoType: &GoType{T: &info_PacketConn},
		Members: GoMembers{
			"Close": MakeGoReceiver("Close", _f_packetConn_Close, "Close closes the connection.\nAny blocked ReadFrom or WriteTo operations will be unblocked and return errors.\n", "1.0", NewVectorFrom()),
			"LocalAddr": MakeGoReceiver("LocalAddr", _f_packetConn_LocalAddr, "LocalAddr returns the local network address.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/ParseError from _tests/small/src/net/net.go:518:6:
	info_ParseError = GoTypeInfo{Name: "go.std.net/ParseError",
		GoType: &GoType{T: &info_ParseError},
		Ctor: _Wrapped_Ctor_ParseError,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/ParseError from _tests/small/src/net/net.go:518:6:
	info_PtrTo_ParseError = GoTypeInfo{Name: "*go.std.net/ParseError",
		GoType: &GoType{T: &info_PtrTo_ParseError},
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_ptrTo_ParseError_Error, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net/Resolver from _tests/small/src/net/lookup.go:107:6:
	info_Resolver = GoTypeInfo{Name: "go.std.net/Resolver",
		GoType: &GoType{T: &info_Resolver},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/Resolver from _tests/small/src/net/lookup.go:107:6:
	info_PtrTo_Resolver = GoTypeInfo{Name: "*go.std.net/Resolver",
		GoType: &GoType{T: &info_PtrTo_Resolver},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/SRV from _tests/small/src/net/dnsclient.go:139:6:
	info_SRV = GoTypeInfo{Name: "go.std.net/SRV",
		GoType: &GoType{T: &info_SRV},
		Ctor: _Wrapped_Ctor_SRV,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net/SRV from _tests/small/src/net/dnsclient.go:139:6:
	info_PtrTo_SRV = GoTypeInfo{Name: "*go.std.net/SRV",
		GoType: &GoType{T: &info_PtrTo_SRV},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net/UnknownNetworkError from _tests/small/src/net/net.go:548:6:
	info_UnknownNetworkError = GoTypeInfo{Name: "go.std.net/UnknownNetworkError",
		GoType: &GoType{T: &info_UnknownNetworkError},
		Ctor: _Wrapped_Ctor_UnknownNetworkError,
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_unknownNetworkError_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_unknownNetworkError_Temporary, "", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_unknownNetworkError_Timeout, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE *go.std.net/UnknownNetworkError from _tests/small/src/net/net.go:548:6:
	info_PtrTo_UnknownNetworkError = GoTypeInfo{Name: "*go.std.net/UnknownNetworkError",
		GoType: &GoType{T: &info_PtrTo_UnknownNetworkError},
		Members: GoMembers{
		},
	}


GO VECSET FOR TYPE go.std.net/Addr from _tests/small/src/net/net.go:105:6:
	GoTypesVec[27] = &info_Addr

GO VECSET FOR TYPE go.std.net/AddrError from _tests/small/src/net/net.go:529:6:
	GoTypesVec[0] = &info_AddrError

GO VECSET FOR TYPE *go.std.net/AddrError from _tests/small/src/net/net.go:529:6:
	GoTypesVec[0] = &info_PtrTo_AddrError

GO VECSET FOR TYPE go.std.net/Buffers from _tests/small/src/net/net.go:651:6:
	GoTypesVec[1] = &info_Buffers

GO VECSET FOR TYPE *go.std.net/Buffers from _tests/small/src/net/net.go:651:6:
	GoTypesVec[0] = &info_PtrTo_Buffers

GO VECSET FOR TYPE go.std.net/Conn from _tests/small/src/net/net.go:113:6:
	GoTypesVec[23] = &info_Conn

GO VECSET FOR TYPE go.std.net/DNSConfigError from _tests/small/src/net/net.go:562:6:
	GoTypesVec[2] = &info_DNSConfigError

GO VECSET FOR TYPE *go.std.net/DNSConfigError from _tests/small/src/net/net.go:562:6:
	GoTypesVec[0] = &info_PtrTo_DNSConfigError

GO VECSET FOR TYPE go.std.net/DNSError from _tests/small/src/net/net.go:576:6:
	GoTypesVec[3] = &info_DNSError

GO VECSET FOR TYPE *go.std.net/DNSError from _tests/small/src/net/net.go:576:6:
	GoTypesVec[0] = &info_PtrTo_DNSError

GO VECSET FOR TYPE go.std.net/Error from _tests/small/src/net/net.go:387:6:
	GoTypesVec[25] = &info_Error

GO VECSET FOR TYPE go.std.net/IP from _tests/small/src/net/ip.go:32:6:
	GoTypesVec[4] = &info_IP

GO VECSET FOR TYPE *go.std.net/IP from _tests/small/src/net/ip.go:32:6:
	GoTypesVec[0] = &info_PtrTo_IP

GO VECSET FOR TYPE go.std.net/IPAddr from _tests/small/src/net/iprawsock.go:31:6:
	GoTypesVec[5] = &info_IPAddr

GO VECSET FOR TYPE *go.std.net/IPAddr from _tests/small/src/net/iprawsock.go:31:6:
	GoTypesVec[0] = &info_PtrTo_IPAddr

GO VECSET FOR TYPE go.std.net/IPConn from _tests/small/src/net/iprawsock.go:99:6:
	GoTypesVec[6] = &info_IPConn

GO VECSET FOR TYPE *go.std.net/IPConn from _tests/small/src/net/iprawsock.go:99:6:
	GoTypesVec[0] = &info_PtrTo_IPConn

GO VECSET FOR TYPE go.std.net/IPMask from _tests/small/src/net/ip.go:35:6:
	GoTypesVec[7] = &info_IPMask

GO VECSET FOR TYPE *go.std.net/IPMask from _tests/small/src/net/ip.go:35:6:
	GoTypesVec[0] = &info_PtrTo_IPMask

GO VECSET FOR TYPE go.std.net/IPNet from _tests/small/src/net/ip.go:38:6:
	GoTypesVec[8] = &info_IPNet

GO VECSET FOR TYPE *go.std.net/IPNet from _tests/small/src/net/ip.go:38:6:
	GoTypesVec[0] = &info_PtrTo_IPNet

GO VECSET FOR TYPE go.std.net/InvalidAddrError from _tests/small/src/net/net.go:554:6:
	GoTypesVec[9] = &info_InvalidAddrError

GO VECSET FOR TYPE *go.std.net/InvalidAddrError from _tests/small/src/net/net.go:554:6:
	GoTypesVec[0] = &info_PtrTo_InvalidAddrError

GO VECSET FOR TYPE go.std.net/Listener from _tests/small/src/net/net.go:374:6:
	GoTypesVec[26] = &info_Listener

GO VECSET FOR TYPE go.std.net/MX from _tests/small/src/net/dnsclient.go:193:6:
	GoTypesVec[10] = &info_MX

GO VECSET FOR TYPE *go.std.net/MX from _tests/small/src/net/dnsclient.go:193:6:
	GoTypesVec[0] = &info_PtrTo_MX

GO VECSET FOR TYPE go.std.net/NS from _tests/small/src/net/dnsclient.go:215:6:
	GoTypesVec[11] = &info_NS

GO VECSET FOR TYPE *go.std.net/NS from _tests/small/src/net/dnsclient.go:215:6:
	GoTypesVec[0] = &info_PtrTo_NS

GO VECSET FOR TYPE go.std.net/OpError from _tests/small/src/net/net.go:425:6:
	GoTypesVec[12] = &info_OpError

GO VECSET FOR TYPE *go.std.net/OpError from _tests/small/src/net/net.go:425:6:
	GoTypesVec[0] = &info_PtrTo_OpError

GO VECSET FOR TYPE go.std.net/PacketConn from _tests/small/src/net/net.go:303:6:
	GoTypesVec[24] = &info_PacketConn

GO VECSET FOR TYPE go.std.net/ParseError from _tests/small/src/net/net.go:518:6:
	GoTypesVec[13] = &info_ParseError

GO VECSET FOR TYPE *go.std.net/ParseError from _tests/small/src/net/net.go:518:6:
	GoTypesVec[0] = &info_PtrTo_ParseError

GO VECSET FOR TYPE go.std.net/Resolver from _tests/small/src/net/lookup.go:107:6:
	GoTypesVec[14] = &info_Resolver

GO VECSET FOR TYPE *go.std.net/Resolver from _tests/small/src/net/lookup.go:107:6:
	GoTypesVec[0] = &info_PtrTo_Resolver

GO VECSET FOR TYPE go.std.net/SRV from _tests/small/src/net/dnsclient.go:139:6:
	GoTypesVec[15] = &info_SRV

GO VECSET FOR TYPE *go.std.net/SRV from _tests/small/src/net/dnsclient.go:139:6:
	GoTypesVec[0] = &info_PtrTo_SRV

GO VECSET FOR TYPE go.std.net/UnknownNetworkError from _tests/small/src/net/net.go:548:6:
	GoTypesVec[16] = &info_UnknownNetworkError

GO VECSET FOR TYPE *go.std.net/UnknownNetworkError from _tests/small/src/net/net.go:548:6:
	GoTypesVec[0] = &info_PtrTo_UnknownNetworkError

GO ENSURE-LOADED FOR net:
	EnsureLoaded("go.std.context")  // E.g. from: _tests/small/src/net/iprawsock.go:8:2
	EnsureLoaded("go.std.errors")  // E.g. from: _tests/small/src/net/net.go:83:2
	EnsureLoaded("go.std.golang_org.x.net.dns.dnsmessage")  // E.g. from: _tests/small/src/net/dnsclient.go:11:2
	EnsureLoaded("go.std.io")  // E.g. from: _tests/small/src/net/net.go:85:2
	EnsureLoaded("go.std.math.rand")  // E.g. from: _tests/small/src/net/dnsclient.go:8:2
	EnsureLoaded("go.std.os")  // E.g. from: _tests/small/src/net/net.go:86:2
	EnsureLoaded("go.std.sort")  // E.g. from: _tests/small/src/net/dnsclient.go:9:2
	EnsureLoaded("go.std.sync")  // E.g. from: _tests/small/src/net/lookup.go:11:2
	EnsureLoaded("go.std.syscall")  // E.g. from: _tests/small/src/net/iprawsock.go:9:2
	EnsureLoaded("go.std.time")  // E.g. from: _tests/small/src/net/net.go:89:2

// Auto-generated by gostd at (omitted for testing), do not edit!!

package net

import (
	"fmt"
	. "github.com/candid82/joker/core"
	"net"
)

func initNative() {
}

GO TYPE net/url.Error from net/url/url.go:
func ExtractGoObjectError(args []Object, index int) *url.Error {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case url.Error:
			return &r
		case *url.Error:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/url.Error]"))
}

func ExtractGo_go_std_net_url__Error(rcvr, arg string, args *ArraySeq, n int) (res url.Error) {
	a := CheckGoNth(rcvr, "go.std.net.url/Error", arg, args, n).O
	res, ok := a.(url.Error)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.url/Error], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToError(o Map) *url.Error {
	return &url.Error{
		Op: FieldAsString(o, "Op"),
		URL: FieldAsString(o, "URL"),
		Err: FieldAsError(o, "Err"),
	}
}

func _Ctor_Error(_v Object) *url.Error {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToError(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[url.Error] or: Map"))
}

func _Wrapped_Ctor_Error(_o Object) Object {
	return MakeGoObject(_Ctor_Error(_o))
}

GO TYPE net/url.EscapeError from net/url/url.go:
func ExtractGoObjectEscapeError(args []Object, index int) *url.EscapeError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case url.EscapeError:
			return &r
		case *url.EscapeError:
			return r
		}
	case String:
		v := url.EscapeError(ExtractString(args, index))
		return &v
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/url.EscapeError]"))
}

func ExtractGo_go_std_net_url__EscapeError(rcvr, arg string, args *ArraySeq, n int) (res url.EscapeError) {
	a := CheckGoNth(rcvr, "go.std.net.url/EscapeError", arg, args, n).O
	res, ok := a.(url.EscapeError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.url/EscapeError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _Ctor_EscapeError(_v Object) url.EscapeError {
	switch _o := _v.(type) {
	case String:
		return url.EscapeError(_o.S)
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[url.EscapeError] or: String"))
}

func _Wrapped_Ctor_EscapeError(_o Object) Object {
	return MakeGoObject(_Ctor_EscapeError(_o))
}

GO TYPE net/url.InvalidHostError from net/url/url.go:
func ExtractGoObjectInvalidHostError(args []Object, index int) *url.InvalidHostError {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case url.InvalidHostError:
			return &r
		case *url.InvalidHostError:
			return r
		}
	case String:
		v := url.InvalidHostError(ExtractString(args, index))
		return &v
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/url.InvalidHostError]"))
}

func ExtractGo_go_std_net_url__InvalidHostError(rcvr, arg string, args *ArraySeq, n int) (res url.InvalidHostError) {
	a := CheckGoNth(rcvr, "go.std.net.url/InvalidHostError", arg, args, n).O
	res, ok := a.(url.InvalidHostError)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.url/InvalidHostError], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _Ctor_InvalidHostError(_v Object) url.InvalidHostError {
	switch _o := _v.(type) {
	case String:
		return url.InvalidHostError(_o.S)
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[url.InvalidHostError] or: String"))
}

func _Wrapped_Ctor_InvalidHostError(_o Object) Object {
	return MakeGoObject(_Ctor_InvalidHostError(_o))
}

GO TYPE net/url.URL from net/url/url.go:
func ExtractGoObjectURL(args []Object, index int) *url.URL {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case url.URL:
			return &r
		case *url.URL:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/url.URL]"))
}

func ExtractGo_go_std_net_url__URL(rcvr, arg string, args *ArraySeq, n int) (res url.URL) {
	a := CheckGoNth(rcvr, "go.std.net.url/URL", arg, args, n).O
	res, ok := a.(url.URL)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.url/URL], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _mapToURL(o Map) *url.URL {
// 	return &url.URL{
// 		Scheme: FieldAsString(o, "Scheme"),
// 		Opaque: FieldAsString(o, "Opaque"),
// 		User: ABEND048(codegen.go: no conversion from Clojure for *net/url.Userinfo (-)),
// 		Host: FieldAsString(o, "Host"),
// 		Path: FieldAsString(o, "Path"),
// 		RawPath: FieldAsString(o, "RawPath"),
// 		ForceQuery: FieldAsBoolean(o, "ForceQuery"),
// 		RawQuery: FieldAsString(o, "RawQuery"),
// 		Fragment: FieldAsString(o, "Fragment"),
// 	}
// }

// func _Ctor_URL(_v Object) *url.URL {
// 	switch _o := _v.(type) {
// 	case *ArrayMap, *HashMap:
// 		return _mapToURL(_o.(Map))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[url.URL] or: Map"))
// }

// func _Wrapped_Ctor_URL(_o Object) Object {
// 	return MakeGoObject(_Ctor_URL(_o))
// }

GO TYPE net/url.Userinfo from net/url/url.go:
func ExtractGoObjectUserinfo(args []Object, index int) *url.Userinfo {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case url.Userinfo:
			return &r
		case *url.Userinfo:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/url.Userinfo]"))
}

func ExtractGo_go_std_net_url__Userinfo(rcvr, arg string, args *ArraySeq, n int) (res url.Userinfo) {
	a := CheckGoNth(rcvr, "go.std.net.url/Userinfo", arg, args, n).O
	res, ok := a.(url.Userinfo)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.url/Userinfo], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

func _mapToUserinfo(o Map) *url.Userinfo {
	return &url.Userinfo{}
}

func _Ctor_Userinfo(_v Object) *url.Userinfo {
	switch _o := _v.(type) {
	case *ArrayMap, *HashMap:
		return _mapToUserinfo(_o.(Map))
	}
	panic(RT.NewArgTypeError(0, _v, "GoObject[url.Userinfo] or: Map"))
}

func _Wrapped_Ctor_Userinfo(_o Object) Object {
	return MakeGoObject(_Ctor_Userinfo(_o))
}

GO TYPE net/url.Values from net/url/url.go:
func ExtractGoObjectValues(args []Object, index int) *url.Values {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case url.Values:
			return &r
		case *url.Values:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/url.Values]"))
}

func ExtractGo_go_std_net_url__Values(rcvr, arg string, args *ArraySeq, n int) (res url.Values) {
	a := CheckGoNth(rcvr, "go.std.net.url/Values", arg, args, n).O
	res, ok := a.(url.Values)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.url/Values], but is GoObject[%s]",
			n, rcvr, GoObjectTypeToString(a))))
	}
	return
}

// func _Ctor_Values(_v Object) url.Values {
// 	switch _o := _v.(type) {
// 	default:
// 		return _url.Values(_o.ABEND674(codegen.go: unknown underlying type *ast.MapType for Values))
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[url.Values] or: whatever"))
// }

// func _Wrapped_Ctor_Values(_o Object) Object {
// 	return MakeGoObject(_Ctor_Values(_o))
// }

GO FUNC net/url.Parse from net/url/url.go:
func _f_parse(_v_rawurl string) Object {
	_res1, _res2 := url.Parse(_v_rawurl)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net/url.ParseQuery from net/url/url.go:
func _f_parseQuery(_v_query string) Object {
	_res1, _res2 := url.ParseQuery(_v_query)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net/url.ParseRequestURI from net/url/url.go:
func _f_parseRequestURI(_v_rawurl string) Object {
	_res1, _res2 := url.ParseRequestURI(_v_rawurl)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net/url.PathUnescape from net/url/url.go:
func _f_pathUnescape(_v_s string) Object {
	_res1, _res2 := url.PathUnescape(_v_s)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeString(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net/url.QueryUnescape from net/url/url.go:
func _f_queryUnescape(_v_s string) Object {
	_res1, _res2 := url.QueryUnescape(_v_s)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeString(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net/url.User from net/url/url.go:
func _f_user(_v_username string) Object {
	_res := url.User(_v_username)
	return MakeGoObject(_res)
}

GO FUNC net/url.UserPassword from net/url/url.go:
func _f_userPassword(_v_username string, _v_password string) Object {
	_res := url.UserPassword(_v_username, _v_password)
	return MakeGoObject(_res)
}

GO FUNC net/url._f_escapeError_Error from net/url/url.go:
func _f_escapeError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(url.EscapeError)Error()", args, 0, 0)
	_res := o.O.(url.EscapeError).Error()
	return MakeString(_res)
}

GO FUNC net/url._f_invalidHostError_Error from net/url/url.go:
func _f_invalidHostError_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(url.InvalidHostError)Error()", args, 0, 0)
	_res := o.O.(url.InvalidHostError).Error()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_Error_Error from net/url/url.go:
func _f_ptrTo_Error_Error(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.Error)Error()", args, 0, 0)
	_res := o.O.(*url.Error).Error()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_Error_Temporary from net/url/url.go:
func _f_ptrTo_Error_Temporary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.Error)Temporary()", args, 0, 0)
	_res := o.O.(*url.Error).Temporary()
	return MakeBoolean(_res)
}

GO FUNC net/url._f_ptrTo_Error_Timeout from net/url/url.go:
func _f_ptrTo_Error_Timeout(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.Error)Timeout()", args, 0, 0)
	_res := o.O.(*url.Error).Timeout()
	return MakeBoolean(_res)
}

GO FUNC net/url._f_ptrTo_URL_EscapedPath from net/url/url.go:
func _f_ptrTo_URL_EscapedPath(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)EscapedPath()", args, 0, 0)
	_res := o.O.(*url.URL).EscapedPath()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_URL_Hostname from net/url/url.go:
func _f_ptrTo_URL_Hostname(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)Hostname()", args, 0, 0)
	_res := o.O.(*url.URL).Hostname()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_URL_IsAbs from net/url/url.go:
func _f_ptrTo_URL_IsAbs(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)IsAbs()", args, 0, 0)
	_res := o.O.(*url.URL).IsAbs()
	return MakeBoolean(_res)
}

GO FUNC net/url._f_ptrTo_URL_MarshalBinary from net/url/url.go:
func _f_ptrTo_URL_MarshalBinary(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)MarshalBinary()", args, 0, 0)
	text, err := o.O.(*url.URL).MarshalBinary()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(text))
	_res = _res.Conjoin(func () Object { if (err) == nil { return NIL } else { return MakeError(err) } }())
	return _res
}

GO FUNC net/url._f_ptrTo_URL_Parse from net/url/url.go:
func _f_ptrTo_URL_Parse(o GoObject, args Object) Object {  // Receiver
	_argList := CheckGoArity("(*url.URL)Parse()", args, 1, 1)
	_v_ref := ExtractGoString("(*url.URL)Parse()", "_v_ref", _argList, 0)
	_res1, _res2 := o.O.(*url.URL).Parse(_v_ref)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

GO FUNC net/url._f_ptrTo_URL_Port from net/url/url.go:
func _f_ptrTo_URL_Port(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)Port()", args, 0, 0)
	_res := o.O.(*url.URL).Port()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_URL_Query from net/url/url.go:
func _f_ptrTo_URL_Query(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)Query()", args, 0, 0)
	_res := o.O.(*url.URL).Query()
	return MakeGoObject(_res)
}

GO FUNC net/url._f_ptrTo_URL_RequestURI from net/url/url.go:
func _f_ptrTo_URL_RequestURI(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)RequestURI()", args, 0, 0)
	_res := o.O.(*url.URL).RequestURI()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_URL_ResolveReference from net/url/url.go:
// func _f_ptrTo_URL_ResolveReference(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*url.URL)ResolveReference()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.StarExpr for _v_ref at: _tests/small/src/net/url/url.go:973:36)
// 	_res := o.O.(*url.URL).ResolveReference(_v_ref)
// 	return MakeGoObject(_res)
// }

GO FUNC net/url._f_ptrTo_URL_String from net/url/url.go:
func _f_ptrTo_URL_String(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.URL)String()", args, 0, 0)
	_res := o.O.(*url.URL).String()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_URL_UnmarshalBinary from net/url/url.go:
// func _f_ptrTo_URL_UnmarshalBinary(o GoObject, args Object) Object {  // Receiver
// 	_argList := CheckGoArity("(*url.URL)UnmarshalBinary()", args, 1, 1)
// 	ABEND644(pre.go: unsupported built-in type *ast.ArrayType for _v_text at: _tests/small/src/net/url/url.go:1079:36)
// 	_res := o.O.(*url.URL).UnmarshalBinary(_v_text)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

GO FUNC net/url._f_ptrTo_Userinfo_Password from net/url/url.go:
func _f_ptrTo_Userinfo_Password(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.Userinfo)Password()", args, 0, 0)
	_res1, _res2 := o.O.(*url.Userinfo).Password()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeString(_res1))
	_res = _res.Conjoin(MakeBoolean(_res2))
	return _res
}

GO FUNC net/url._f_ptrTo_Userinfo_String from net/url/url.go:
func _f_ptrTo_Userinfo_String(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.Userinfo)String()", args, 0, 0)
	_res := o.O.(*url.Userinfo).String()
	return MakeString(_res)
}

GO FUNC net/url._f_ptrTo_Userinfo_Username from net/url/url.go:
func _f_ptrTo_Userinfo_Username(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(*url.Userinfo)Username()", args, 0, 0)
	_res := o.O.(*url.Userinfo).Username()
	return MakeString(_res)
}

GO FUNC net/url._f_values_Add from net/url/url.go:
// func _f_values_Add(o GoObject, args Object) Object {  // Receiver
// 	...ABEND275: TODO...
// }

GO FUNC net/url._f_values_Del from net/url/url.go:
// func _f_values_Del(o GoObject, args Object) Object {  // Receiver
// 	...ABEND275: TODO...
// }

GO FUNC net/url._f_values_Encode from net/url/url.go:
func _f_values_Encode(o GoObject, args Object) Object {  // Receiver
	CheckGoArity("(url.Values)Encode()", args, 0, 0)
	_res := o.O.(url.Values).Encode()
	return MakeString(_res)
}

GO FUNC net/url._f_values_Get from net/url/url.go:
func _f_values_Get(o GoObject, args Object) Object {  // Receiver
	_argList := CheckGoArity("(url.Values)Get()", args, 1, 1)
	_v_key := ExtractGoString("(url.Values)Get()", "_v_key", _argList, 0)
	_res := o.O.(url.Values).Get(_v_key)
	return MakeString(_res)
}

GO FUNC net/url._f_values_Set from net/url/url.go:
// func _f_values_Set(o GoObject, args Object) Object {  // Receiver
// 	...ABEND275: TODO...
// }

GO VARDEF FOR TYPE go.std.net.url/Error from _tests/small/src/net/url/url.go:22:6:
var info_Error GoTypeInfo

GO VARDEF FOR TYPE *go.std.net.url/Error from _tests/small/src/net/url/url.go:22:6:
var info_PtrTo_Error GoTypeInfo

GO VARDEF FOR TYPE go.std.net.url/EscapeError from _tests/small/src/net/url/url.go:84:6:
var info_EscapeError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net.url/EscapeError from _tests/small/src/net/url/url.go:84:6:
var info_PtrTo_EscapeError GoTypeInfo

GO VARDEF FOR TYPE go.std.net.url/InvalidHostError from _tests/small/src/net/url/url.go:90:6:
var info_InvalidHostError GoTypeInfo

GO VARDEF FOR TYPE *go.std.net.url/InvalidHostError from _tests/small/src/net/url/url.go:90:6:
var info_PtrTo_InvalidHostError GoTypeInfo

GO VARDEF FOR TYPE go.std.net.url/URL from _tests/small/src/net/url/url.go:344:6:
var info_URL GoTypeInfo

GO VARDEF FOR TYPE *go.std.net.url/URL from _tests/small/src/net/url/url.go:344:6:
var info_PtrTo_URL GoTypeInfo

GO VARDEF FOR TYPE go.std.net.url/Userinfo from _tests/small/src/net/url/url.go:378:6:
var info_Userinfo GoTypeInfo

GO VARDEF FOR TYPE *go.std.net.url/Userinfo from _tests/small/src/net/url/url.go:378:6:
var info_PtrTo_Userinfo GoTypeInfo

GO VARDEF FOR TYPE go.std.net.url/Values from _tests/small/src/net/url/url.go:804:6:
var info_Values GoTypeInfo

GO VARDEF FOR TYPE *go.std.net.url/Values from _tests/small/src/net/url/url.go:804:6:
var info_PtrTo_Values GoTypeInfo

GO INFO FOR TYPE go.std.net.url/Error from _tests/small/src/net/url/url.go:22:6:
	info_Error = GoTypeInfo{Name: "go.std.net.url/Error",
		GoType: &GoType{T: &info_Error},
		Ctor: _Wrapped_Ctor_Error,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net.url/Error from _tests/small/src/net/url/url.go:22:6:
	info_PtrTo_Error = GoTypeInfo{Name: "*go.std.net.url/Error",
		GoType: &GoType{T: &info_PtrTo_Error},
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_ptrTo_Error_Error, "", "1.0", NewVectorFrom()),
			"Temporary": MakeGoReceiver("Temporary", _f_ptrTo_Error_Temporary, "", "1.0", NewVectorFrom()),
			"Timeout": MakeGoReceiver("Timeout", _f_ptrTo_Error_Timeout, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net.url/EscapeError from _tests/small/src/net/url/url.go:84:6:
	info_EscapeError = GoTypeInfo{Name: "go.std.net.url/EscapeError",
		GoType: &GoType{T: &info_EscapeError},
		Ctor: _Wrapped_Ctor_EscapeError,
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_escapeError_Error, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE *go.std.net.url/EscapeError from _tests/small/src/net/url/url.go:84:6:
	info_PtrTo_EscapeError = GoTypeInfo{Name: "*go.std.net.url/EscapeError",
		GoType: &GoType{T: &info_PtrTo_EscapeError},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net.url/InvalidHostError from _tests/small/src/net/url/url.go:90:6:
	info_InvalidHostError = GoTypeInfo{Name: "go.std.net.url/InvalidHostError",
		GoType: &GoType{T: &info_InvalidHostError},
		Ctor: _Wrapped_Ctor_InvalidHostError,
		Members: GoMembers{
			"Error": MakeGoReceiver("Error", _f_invalidHostError_Error, "", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE *go.std.net.url/InvalidHostError from _tests/small/src/net/url/url.go:90:6:
	info_PtrTo_InvalidHostError = GoTypeInfo{Name: "*go.std.net.url/InvalidHostError",
		GoType: &GoType{T: &info_PtrTo_InvalidHostError},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE go.std.net.url/URL from _tests/small/src/net/url/url.go:344:6:
	info_URL = GoTypeInfo{Name: "go.std.net.url/URL",
		GoType: &GoType{T: &info_URL},
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net.url/URL from _tests/small/src/net/url/url.go:344:6:
	info_PtrTo_URL = GoTypeInfo{Name: "*go.std.net.url/URL",
		GoType: &GoType{T: &info_PtrTo_URL},
		Members: GoMembers{
			"EscapedPath": MakeGoReceiver("EscapedPath", _f_ptrTo_URL_EscapedPath, "EscapedPath returns the escaped form of u.Path.\nIn general there are multiple possible escaped forms of any path.\nEscapedPath returns u.RawPath when it is a valid escaping of u.Path.\nOtherwise EscapedPath ignores u.RawPath and computes an escaped\nform on its own.\nThe String and RequestURI methods use EscapedPath to construct\ntheir results.\nIn general, code should call EscapedPath instead of\nreading u.RawPath directly.\n", "1.0", NewVectorFrom()),
			"Hostname": MakeGoReceiver("Hostname", _f_ptrTo_URL_Hostname, "Hostname returns u.Host, without any port number.\n\nIf Host is an IPv6 literal with a port number, Hostname returns the\nIPv6 literal without the square brackets. IPv6 literals may include\na zone identifier.\n", "1.0", NewVectorFrom()),
			"IsAbs": MakeGoReceiver("IsAbs", _f_ptrTo_URL_IsAbs, "IsAbs reports whether the URL is absolute.\nAbsolute means that it has a non-empty scheme.\n", "1.0", NewVectorFrom()),
			"MarshalBinary": MakeGoReceiver("MarshalBinary", _f_ptrTo_URL_MarshalBinary, "", "1.0", NewVectorFrom()),
			"Parse": MakeGoReceiver("Parse", _f_ptrTo_URL_Parse, "Parse parses a URL in the context of the receiver. The provided URL\nmay be relative or absolute. Parse returns nil, err on parse\nfailure, otherwise its return value is the same as ResolveReference.\n", "1.0", NewVectorFrom(MakeSymbol("ref"))),
			"Port": MakeGoReceiver("Port", _f_ptrTo_URL_Port, "Port returns the port part of u.Host, without the leading colon.\nIf u.Host doesn't contain a port, Port returns an empty string.\n", "1.0", NewVectorFrom()),
			"Query": MakeGoReceiver("Query", _f_ptrTo_URL_Query, "Query parses RawQuery and returns the corresponding values.\nIt silently discards malformed value pairs.\nTo check errors use ParseQuery.\n", "1.0", NewVectorFrom()),
			"RequestURI": MakeGoReceiver("RequestURI", _f_ptrTo_URL_RequestURI, "RequestURI returns the encoded path?query or opaque?query\nstring that would be used in an HTTP request for u.\n", "1.0", NewVectorFrom()),
			"String": MakeGoReceiver("String", _f_ptrTo_URL_String, "String reassembles the URL into a valid URL string.\nThe general form of the result is one of:\n\n\tscheme:opaque?query#fragment\n\tscheme://userinfo@host/path?query#fragment\n\nIf u.Opaque is non-empty, String uses the first form;\notherwise it uses the second form.\nTo obtain the path, String uses u.EscapedPath().\n\nIn the second form, the following rules apply:\n\t- if u.Scheme is empty, scheme: is omitted.\n\t- if u.User is nil, userinfo@ is omitted.\n\t- if u.Host is empty, host/ is omitted.\n\t- if u.Scheme and u.Host are empty and u.User is nil,\n\t   the entire scheme://userinfo@host/ is omitted.\n\t- if u.Host is non-empty and u.Path begins with a /,\n\t   the form host/path does not add its own /.\n\t- if u.RawQuery is empty, ?query is omitted.\n\t- if u.Fragment is empty, #fragment is omitted.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net.url/Userinfo from _tests/small/src/net/url/url.go:378:6:
	info_Userinfo = GoTypeInfo{Name: "go.std.net.url/Userinfo",
		GoType: &GoType{T: &info_Userinfo},
		Ctor: _Wrapped_Ctor_Userinfo,
		Members: GoMembers{
		},
	}


GO INFO FOR TYPE *go.std.net.url/Userinfo from _tests/small/src/net/url/url.go:378:6:
	info_PtrTo_Userinfo = GoTypeInfo{Name: "*go.std.net.url/Userinfo",
		GoType: &GoType{T: &info_PtrTo_Userinfo},
		Members: GoMembers{
			"Password": MakeGoReceiver("Password", _f_ptrTo_Userinfo_Password, "Password returns the password in case it is set, and whether it is set.\n", "1.0", NewVectorFrom()),
			"String": MakeGoReceiver("String", _f_ptrTo_Userinfo_String, "String returns the encoded userinfo information in the standard form\nof \"username[:password]\".\n", "1.0", NewVectorFrom()),
			"Username": MakeGoReceiver("Username", _f_ptrTo_Userinfo_Username, "Username returns the username.\n", "1.0", NewVectorFrom()),
		},
	}


GO INFO FOR TYPE go.std.net.url/Values from _tests/small/src/net/url/url.go:804:6:
	info_Values = GoTypeInfo{Name: "go.std.net.url/Values",
		GoType: &GoType{T: &info_Values},
		Members: GoMembers{
			"Encode": MakeGoReceiver("Encode", _f_values_Encode, "Encode encodes the values into ``URL encoded'' form\n(\"bar=baz&foo=quux\") sorted by key.\n", "1.0", NewVectorFrom()),
			"Get": MakeGoReceiver("Get", _f_values_Get, "Get gets the first value associated with the given key.\nIf there are no values associated with the key, Get returns\nthe empty string. To access multiple values, use the map\ndirectly.\n", "1.0", NewVectorFrom(MakeSymbol("key"))),
		},
	}


GO INFO FOR TYPE *go.std.net.url/Values from _tests/small/src/net/url/url.go:804:6:
	info_PtrTo_Values = GoTypeInfo{Name: "*go.std.net.url/Values",
		GoType: &GoType{T: &info_PtrTo_Values},
		Members: GoMembers{
		},
	}


GO VECSET FOR TYPE go.std.net.url/Error from _tests/small/src/net/url/url.go:22:6:
	GoTypesVec[17] = &info_Error

GO VECSET FOR TYPE *go.std.net.url/Error from _tests/small/src/net/url/url.go:22:6:
	GoTypesVec[0] = &info_PtrTo_Error

GO VECSET FOR TYPE go.std.net.url/EscapeError from _tests/small/src/net/url/url.go:84:6:
	GoTypesVec[18] = &info_EscapeError

GO VECSET FOR TYPE *go.std.net.url/EscapeError from _tests/small/src/net/url/url.go:84:6:
	GoTypesVec[0] = &info_PtrTo_EscapeError

GO VECSET FOR TYPE go.std.net.url/InvalidHostError from _tests/small/src/net/url/url.go:90:6:
	GoTypesVec[19] = &info_InvalidHostError

GO VECSET FOR TYPE *go.std.net.url/InvalidHostError from _tests/small/src/net/url/url.go:90:6:
	GoTypesVec[0] = &info_PtrTo_InvalidHostError

GO VECSET FOR TYPE go.std.net.url/URL from _tests/small/src/net/url/url.go:344:6:
	GoTypesVec[20] = &info_URL

GO VECSET FOR TYPE *go.std.net.url/URL from _tests/small/src/net/url/url.go:344:6:
	GoTypesVec[0] = &info_PtrTo_URL

GO VECSET FOR TYPE go.std.net.url/Userinfo from _tests/small/src/net/url/url.go:378:6:
	GoTypesVec[21] = &info_Userinfo

GO VECSET FOR TYPE *go.std.net.url/Userinfo from _tests/small/src/net/url/url.go:378:6:
	GoTypesVec[0] = &info_PtrTo_Userinfo

GO VECSET FOR TYPE go.std.net.url/Values from _tests/small/src/net/url/url.go:804:6:
	GoTypesVec[22] = &info_Values

GO VECSET FOR TYPE *go.std.net.url/Values from _tests/small/src/net/url/url.go:804:6:
	GoTypesVec[0] = &info_PtrTo_Values

GO ENSURE-LOADED FOR url:
	EnsureLoaded("go.std.errors")  // E.g. from: _tests/small/src/net/url/url.go:14:2
	EnsureLoaded("go.std.fmt")  // E.g. from: _tests/small/src/net/url/url.go:15:2
	EnsureLoaded("go.std.sort")  // E.g. from: _tests/small/src/net/url/url.go:16:2
	EnsureLoaded("go.std.strconv")  // E.g. from: _tests/small/src/net/url/url.go:17:2
	EnsureLoaded("go.std.strings")  // E.g. from: _tests/small/src/net/url/url.go:18:2

// Auto-generated by gostd at (omitted for testing), do not edit!!

package url

import (
	"fmt"
	. "github.com/candid82/joker/core"
	"net/url"
)

func initNative() {
}

Adding only 28 types (out of 52) to core/goswitch.go
Generated file goswitch.go:
// Auto-modified by gostd at (omitted for testing)

package core

import (
	"net"
	"net/url"
)

var GoTypesVec [28]*GoTypeInfo

func SwitchGoType(g interface{}) int {
	switch g.(type) {
	case net.AddrError:
		return 0
	case net.Buffers:
		return 1
	case net.DNSConfigError:
		return 2
	case net.DNSError:
		return 3
	case net.IP:
		return 4
	case net.IPAddr:
		return 5
	case net.IPConn:
		return 6
	case net.IPMask:
		return 7
	case net.IPNet:
		return 8
	case net.InvalidAddrError:
		return 9
	case net.MX:
		return 10
	case net.NS:
		return 11
	case net.OpError:
		return 12
	case net.ParseError:
		return 13
	case net.Resolver:
		return 14
	case net.SRV:
		return 15
	case net.UnknownNetworkError:
		return 16
	case url.Error:
		return 17
	case url.EscapeError:
		return 18
	case url.InvalidHostError:
		return 19
	case url.URL:
		return 20
	case url.Userinfo:
		return 21
	case url.Values:
		return 22
	case net.Conn:  // Specificity=8
		return 23
	case net.PacketConn:  // Specificity=7
		return 24
	case net.Error:  // Specificity=3
		return 25
	case net.Listener:  // Specificity=3
		return 26
	case net.Addr:  // Specificity=2
		return 27
	}
	return -1
}
ABENDs: 644(34) 048(6) 001(5) 041(4) 674(4) 275(3) 049(1) 124(1)
Totals: functions=132 generated=98 (74.24%)
          non-receivers=26 (19.70%) generated=26 (100.00%)
          receivers=83 (62.88%) generated=60 (72.29%)
          methods=23 (17.42%) generated=12 (52.17%)
        types=51
          constructable=46 ctors=14 (30.43%)
        constants=2 generated=2 (100.00%)
        variables=12 generated=12 (100.00%)
