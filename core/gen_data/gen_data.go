package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"strings"

	. "github.com/candid82/joker/core"
	. "github.com/candid82/joker/core/gen_common"
)

const template string = `// Generated by gen_data. Don't modify manually!

// +build !gen_data

package core

var {name}Data []byte

func init() {
	{name}Data = []byte("{content}")
}
`

const hextable = "0123456789abcdef"

func main() {
	namespaces := map[string]struct{}{}

	for _, f := range CoreSourceFiles {
		GLOBAL_ENV.SetCurrentNamespace(GLOBAL_ENV.CoreNamespace)
		nsName := CoreNameAsNamespaceName(f.Name)
		nsNamePtr := STRINGS.Intern(nsName)

		_, found := GLOBAL_ENV.Namespaces[nsNamePtr]

		content, err := ioutil.ReadFile("data/" + f.Filename)
		PanicOnErr(err)
		content, err = PackReader(NewReader(bytes.NewReader(content), f.Name), "")
		PanicOnErr(err)

		namespaces[GLOBAL_ENV.CurrentNamespace().Name.Name()] = struct{}{}

		if !found || f.Filename == "core.joke" {
			// Don't generate data files that'll get their own code files.
			continue
		}

		dst := make([]byte, len(content)*4)
		for i, v := range content {
			dst[i*4] = '\\'
			dst[i*4+1] = 'x'
			dst[i*4+2] = hextable[v>>4]
			dst[i*4+3] = hextable[v&0x0f]
		}

		name := f.Filename[0 : len(f.Filename)-5] // assumes .joke extension
		fileContent := strings.ReplaceAll(template, "{name}", name)
		fileContent = strings.Replace(fileContent, "{content}", string(dst), 1)
		ioutil.WriteFile("a_"+name+"_data.go", []byte(fileContent), 0666)
	}

	const dataTemplate = `// Generated by gen_data. Don't modify manually!

package core

func init() {
	coreNamespaces = []string{
{coreNamespaces}
	}
}
`

	coreNamespaces := []string{}
	for ns, _ := range namespaces {
		coreNamespaces = append(coreNamespaces, fmt.Sprintf(`
		"%s",`[1:],
			ns))
	}
	dataContent := strings.Replace(dataTemplate, "{coreNamespaces}", strings.Join(coreNamespaces, "\n"), 1)
	ioutil.WriteFile("a_data.go", []byte(dataContent), 0666)
}
