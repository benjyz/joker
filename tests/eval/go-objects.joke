(def EE Error)

(ns joker.test-joker.go-objects
  (:use joker.core joker.test go.std.os go.std.hash.crc32 go.std.net go.std.math go.std.html.template go.std.fmt)
  (:require [go.std.errors :as errors])
  (:require [go.std.flag :as flag]))

;; Temporary workaround for lack of support for type aliases in gostd:
(def fs-namespace (get (set (map str (all-ns))) "go.std.io.fs" "go.std.os"))
(use (symbol fs-namespace))

(deftest comparable-types
  (let [res1 ((go.std.os/Stat "run.sh") 0)
        res2 ((go.std.os/Stat "core") 0)
        res3 (NewIEEE)]
    (is (= (str (type res1)) "GoObject"))
    (is (= (str (type res2)) "GoObject"))
    (is (= (str (type res3)) "GoObject"))
    (is (= (str (GoTypeOf res1)) (str fs-namespace "/FileInfo")))
    (is (= (str (GoTypeOf res2)) (str fs-namespace"/FileInfo")))
    (is (= (str (GoTypeOf res3)) "go.std.hash/Hash32"))
    (is (= (type res1) (type res2)))
    (is (= (type res1) (type res3)))
    (is (= (type res2) (type res3)))
    (is (= (GoTypeOf res1) (GoTypeOf res2)))
    (is (not= (GoTypeOf res1) (GoTypeOf res3)))
    (is (not= (GoTypeOf res2) (GoTypeOf res3)))
    (is (not= res1 res2))
    (is (not= res1 res3))
    (is (not= res2 res3))))

(deftest receivers-work
  (let [i (IPv4 1 2 3 4)
        j (go.std.net/ParseIP "::ffff:c000:0280")
        k (go.std.net/ParseIP "2001:0db8:85a3:0000:0000:8a2e:0370:7334")
        im (IPv4Mask 252 0 0 0)
        sz (. im Size)]
    (is (= (. i String) "1.2.3.4"))
    (is (= (. j String) "192.0.2.128"))
    (is (= (.String k) "2001:db8:85a3::8a2e:370:7334"))
    (is (. i IsGlobalUnicast))
    (is (not (. i IsMulticast)))
    (is (= (. (. k To4) String) "<nil>"))
    (is (. i Equal i))
    (is (. j Equal j))
    (is (.Equal k k))
    (is (not (. i Equal j)))
    (is (not (.Equal i k)))
    (is (not (. j Equal i)))
    (is (= (get sz 0) 6))
    (is (= (get sz 1) 32))
    (is (= (Sprint i (go.std.net/IPv4Mask 255 255 255 127) "hey" true) "1.2.3.4 ffffff7fheytrue"))
    ))

(deftest constants-work
  (is (> E 2.0))
  (is (< E 3.0))
  (is (= (str go.std.net/FlagUp) "up")))

(deftest variables-work
  (is (= (str (type IPv6zero)) "GoObject"))
  (is (= (str (GoTypeOf IPv6zero)) "go.std.net/refToIP"))
  (is (= (str IPv6zero) "::"))
  (is (= (str @flag/ErrHelp) (str (errors/New "flag: help requested"))))
  (let [n (errors/New "hey")]
    (is (= (set! flag/ErrHelp n)) n)
    (is (= @flag/ErrHelp n))))

(deftest ctors-work
  (is (= (str (new FileMode 0123)) "---x-w--wx"))
  (is (= (str (new go.std.net/MX {:Host "burleyarch.com" :Pref 10})) "&{burleyarch.com 10}"))
  (is (= (str (new go.std.net/MX {:Host "burleyarch.com"})) "&{burleyarch.com 0}"))
  (is (= (str (new go.std.net/MX {:Pref 99})) "&{ 99}"))
  (is (= (str (HTML. "this is an html object")) "this is an html object"))
  (is (= (str (LinkError. {:Op "hey" :Old "there" :New "you" :Err "silly"})) "hey there you: silly")))

(deftest fields-work
  (let [silly (errors/New "silly")
        le (new LinkError {:Op "hey" :Old "there" :New "you" :Err silly})
        dle (deref le)
        ]
    (is (= (. le Op) "hey"))
    (is (= (.-Op le) "hey"))
    (is (= (.Old dle) "there"))
    (is (= (set! (.Old le) "wow") "wow"))
    (is (= (.Old le) "wow"))
    (is (= (.Old dle) "there"))
    (is (= (str le) "hey wow you: silly"))
    (is (= (str dle) "{hey there you silly}"))
    (is (= (count le) 4))
    (is (= (count dle) 4))
    (is (= (seq le) `([:Op "hey"] [:Old "wow"] [:New "you"] [:Err ~silly])))
    (is (= (seq dle) `([:Op "hey"] [:Old "there"] [:New "you"] [:Err ~silly])))
    (is (= (vec le) [[:Op "hey"] [:Old "wow"] [:New "you"] [:Err silly]]))
    (is (= (vec dle) [[:Op "hey"] [:Old "there"] [:New "you"] [:Err silly]]))
    (is (errors/Is (. le Err) (.Err le)))))

(deftest more-variables-work
  (let [dnserr (new DNSError {})]
    (is (not (.IsTemporary dnserr)))
    (is (not (.IsTimeout dnserr)))
    (is (set! (.IsTemporary dnserr) true))
    (is (.IsTemporary dnserr))
    (is (not (.IsTimeout dnserr)))
    (set! (.IsTimeout dnserr) true)
    (is (.IsTimeout dnserr))))

(deftest native-wrapping-works
  (let [one (joker.core/Go 1 '<>)
        un (deref one)
        f (joker.core/Go false '<>)
        ff (deref f)
        c (joker.core/Go (nth "hey" 1) '<>)
        si (deref c)]
    (is (= (str one) "1"))
    (is (= un 1))
    (is (= (str (type one)) "GoObject"))
    (is (= (type un) Int))
    (is (not ff))
    (is (= (type ff) Boolean))
    (is (= (type c) GoObject))
    (is (= (type si) Int))))

(deftest array-args-work
  (is (go.std.bytes/Equal "hey" "hey"))
  (is (not (go.std.bytes/Equal "hey" "there")))
  ;; (is (go.std.sort/IntsAreSorted [1 2 3 4]))
  ;; (is (not (go.std.sort/IntsAreSorted [1 2 4 3]))))
  )

(deftest simple-errno
  (is (= (type (new go.std.syscall/Errno 3)) GoObject)))

(deftest do-not-crash-joker
  (is (= (try (.Write (new go.std.os/File {}) "hi there") (catch Error e "ok")) "ok")))

(deftest vector-to-string
  (is (= (go.std.fmt/Sprintf [65 66 67]) "ABC")))
