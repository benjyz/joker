(ns joker.test-joker.go-objects
  (:use joker.test go.std.os go.std.hash.crc32 go.std.net go.std.math go.std.html.template))

(deftest comparable-types
  (let [res1 ((Stat "run.sh") 0)
        res2 ((Stat "core") 0)
        res3 (NewIEEE)]
    (is (= (str (type res1)) "GoObject"))
    (is (= (str (type res2)) "GoObject"))
    (is (= (str (type res3)) "GoObject"))
    (is (= (str (GoTypeOf res1)) "go.std.os/FileInfo"))
    (is (= (str (GoTypeOf res2)) "go.std.os/FileInfo"))
    (is (= (str (GoTypeOf res3)) "go.std.hash/Hash32"))
    (is (= (type res1) (type res2)))
    (is (= (type res1) (type res3)))
    (is (= (type res2) (type res3)))
    (is (= (GoTypeOf res1) (GoTypeOf res2)))
    (is (not= (GoTypeOf res1) (GoTypeOf res3)))
    (is (not= (GoTypeOf res2) (GoTypeOf res3)))
    (is (not= res1 res2))
    (is (not= res1 res3))
    (is (not= res2 res3))))

(deftest receivers-work
  (let [i (IPv4 1 2 3 4)
        j (go.std.net/ParseIP "::ffff:c000:0280")
        k (go.std.net/ParseIP "2001:0db8:85a3:0000:0000:8a2e:0370:7334")
        im (IPv4Mask 252 0 0 0)
        sz (Go im "Size")]
    (is (= (Go i "String") "1.2.3.4"))
    (is (= (Go j "String") "192.0.2.128"))
    (is (= (Go k "String") "2001:db8:85a3::8a2e:370:7334"))
    (is (Go i "IsGlobalUnicast"))
    (is (not (Go i "IsMulticast")))
    (is (= (Go (Go k "To4") "String") "<nil>"))
    (is (Go i "Equal" i))
    (is (Go j "Equal" j))
    (is (Go k "Equal" k))
    (is (not (Go i "Equal" j)))
    (is (not (Go i "Equal" k)))
    (is (not (Go j "Equal" i)))
    (is (= (get sz 0) 6))
    (is (= (get sz 1) 32))
    ))

(deftest constants-work
  (is (> E 2.0))
  (is (< E 3.0)))

(deftest variables-work
  (is (= (str (type IPv6zero)) "GoVar"))
  (is (= (str (GoTypeOf IPv6zero)) "go.std.net/IP"))
  (is (= (str IPv6zero) "::")))

(deftest ctors-work
  (is (= (str (new FileMode 0123)) "---x-w--wx"))
  (is (= (str (new go.std.net/MX {:Host "burleyarch.com" :Pref 10})) "&{burleyarch.com 10}"))
  (is (= (str (new go.std.net/MX {:Host "burleyarch.com"})) "&{burleyarch.com 0}"))
  (is (= (str (new go.std.net/MX {:Pref 99})) "&{ 99}"))
  (is (= (str (new HTML "this is an html object")) "this is an html object"))
  (is (= (str (new LinkError {:Op "hey" :Old "there" :New "you" :Err "silly"})) "hey there you: silly")))

(deftest fields-work
  (let [le (new LinkError {:Op "hey" :Old "there" :New "you" :Err "silly"})
        old (Go le :Old)]
    (is (= (deref (Go le :Op)) "hey"))
    (is (= (deref old) "there"))
    (is (= (var-set old "wow") "wow"))
    (is (= (deref old) "wow"))
    (is (= (str le) "hey wow you: silly"))))

(deftest govars-work
  (let [dnserr (new DNSError {})
        temp (Go dnserr :IsTemporary)
        notfound (Go dnserr :IsNotFound)]
    (is (not (deref notfound)))
    (is (not (deref temp)))
    (is (var-set temp true))
    (is (deref temp))
    (is (not (deref notfound)))
    (var-set notfound temp)
    (is (deref notfound))))

(deftest native-wrapping-works
  (let [one (Go 1 :<>)
        c (Go (nth "hey" 1) :<>)]
    (is (= (str one) "1"))
    (is (= (deref one) 1))
    (is (= (str (type one)) "GoObject"))
    (is (= (type (deref one)) Int))
    (is (= (type c) GoObject))
    (is (= (type (deref c)) Int))))

(deftest array-args-work
  (is (go.std.bytes/Equal "hey" "hey"))
  (is (not (go.std.bytes/Equal "hey" "there")))
  (is (go.std.sort/IntsAreSorted [1 2 3 4]))
  (is (not (go.std.sort/IntsAreSorted [1 2 4 3]))))
