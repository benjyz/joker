(ns joker.test-joker.go-objects
  (:use joker.test go.std.os go.std.hash.crc32 go.std.net))

(deftest comparable-types
  (let [res1 ((Stat "run.sh") 0)
        res2 ((Stat "core") 0)
        res3 (NewIEEE)]
    (is (= (str (type res1)) "GoObject[*os.fileStat]"))
    (is (= (str (type res2)) "GoObject[*os.fileStat]"))
    (is (= (str (type res3)) "GoObject[*hash/crc32.digest]"))
    (is (= (type res1) (type res2)))
    (is (not= (type res1) (type res3)))
    (is (not= (type res2) (type res3)))
    (is (not= res1 res2))
    (is (not= res1 res3))
    (is (not= res2 res3))))

(deftest receivers-work
  (let [i (IPv4 1 2 3 4)
        j (go.std.net/ParseIP "::ffff:c000:0280")
        k (go.std.net/ParseIP "2001:0db8:85a3:0000:0000:8a2e:0370:7334")
        im (IPv4Mask 252 0 0 0)
        sz (Go im "Size")]
    (is (= (Go i "String") "1.2.3.4"))
    (is (= (Go j "String") "192.0.2.128"))
    (is (= (Go k "String") "2001:db8:85a3::8a2e:370:7334"))
    (is (Go i "IsGlobalUnicast"))
    (is (not (Go i "IsMulticast")))
    (is (= (Go (Go k "To4") "String") "<nil>"))
    (is (Go i "Equal" i))
    (is (Go j "Equal" j))
    (is (Go k "Equal" k))
    (is (not (Go i "Equal" j)))
    (is (not (Go i "Equal" k)))
    (is (not (Go j "Equal" i)))
    (is (= (get sz 0) 6))
    (is (= (get sz 1) 32))
    ))
