(ns
  ^{:go-imports ["time"]
    :doc "Provides functionality for measuring and displaying time."}
  time)

(defn sleep
  "Pauses the execution thread for at least the duration d (expressed in nanoseconds).
  A negative or zero duration causes sleep to return immediately."
  {:added "1.0"
  :go "sleep(d)"}
  [^Int d])

(defn ^Time now
  "Returns the current local time."
  {:added "1.0"
  :go "time.Now()"}
  [])

(defn ^Time from-unix
  "Returns the local Time corresponding to the given Unix time, sec seconds and
  nsec nanoseconds since January 1, 1970 UTC. It is valid to pass nsec outside the range [0, 999999999]."
  {:added "1.0"
  :go "time.Unix(int64(sec), int64(nsec))"}
  [^Int sec ^Int nsec])

(defn ^Int unix
  "Returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC."
  {:added "1.0"
  :go "int(t.Unix())"}
  [^Time t])

(defn ^Int sub
  "Returns the duration t-u in nanoseconds."
  {:added "1.0"
  :go "int(t.Sub(u))"}
  [^Time t ^Time u])

(defn ^Time add
  "Returns the time t+d."
  {:added "1.0"
  :go "t.Add(time.Duration(d))"}
  [^Time t ^Int d])

(defn ^Int parse-duration
  "Parses a duration string. A duration string is a possibly signed sequence of decimal numbers,
  each with optional fraction and a unit suffix, such as 300ms, -1.5h or 2h45m. Valid time units are
  ns, us (or Âµs), ms, s, m, h."
  {:added "1.0"
  :go "!t, err := time.ParseDuration(s); PanicOnErr(err); _res := int(t)"}
  [^String s])

(defn ^Int since
  "Returns the time in nanoseconds elapsed since t."
  {:added "1.0"
  :go "int(time.Since(t))"}
  [^Time t])

(defn ^Int until
  "Returns the duration in nanoseconds until t."
  {:added "1.0"
  :go "int(time.Until(t))"}
  [^Time t])

(defn ^String format
  "Returns a textual representation of the time value formatted according to layout,
  which defines the format by showing how the reference time, defined to be
  Mon Jan 2 15:04:05 -0700 MST 2006
  would be displayed if it were the value; it serves as an example of the desired output.
  The same display rules will then be applied to the time value.."
  {:added "1.0"
  :go "t.Format(layout)"}
  [^Time t ^String layout])

(defn ^Double hours
  "Returns the duration (passed as a number of nanoseconds) as a floating point number of hours."
  {:added "1.0"
  :go "time.Duration(d).Hours()"}
  [^Int d])

(defn ^Double minutes
  "Returns the duration (passed as a number of nanoseconds) as a floating point number of minutes."
  {:added "1.0"
  :go "time.Duration(d).Minutes()"}
  [^Int d])

(defn ^Int round
  "Returns the result of rounding d to the nearest multiple of m. d and m represent time durations in nanoseconds.
  The rounding behavior for halfway values is to round away from zero. If m <= 0, returns d unchanged."
  {:added "1.0"
  :go "int(time.Duration(d).Round(time.Duration(m)))"}
  [^Int d ^Int m])

(defn ^Double seconds
  "Returns the duration (passed as a number of nanoseconds) as a floating point number of seconds."
  {:added "1.0"
  :go "time.Duration(d).Seconds()"}
  [^Int d])

(defn ^String string
  "Returns a string representing the duration in the form 72h3m0.5s."
  {:added "1.0"
  :go "time.Duration(d).String()"}
  [^Int d])

(defn ^Int truncate
  "Returns the result of rounding d toward zero to a multiple of m. If m <= 0, returns d unchanged."
  {:added "1.0"
  :go "int(time.Duration(d).Truncate(time.Duration(m)))"}
  [^Int d ^Int m])
