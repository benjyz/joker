// This file is generated by generate-std.joke script. Do not edit manually!

package textproto

import (
	. "github.com/candid82/joker/core"
	"net/textproto"
)

var textprotoNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.textproto"))



var CanonicalMIMEHeaderKey_ Proc

func __CanonicalMIMEHeaderKey_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__s := ExtractString(_args, 0)
		_res := textproto.CanonicalMIMEHeaderKey(__s)
		return MakeString(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Conn_ Proc

func __Conn_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructConn(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Dial_ Proc

func __Dial_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__network := ExtractString(_args, 0)
		__addr := ExtractString(_args, 1)
		_res := __dial(__network, __addr)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var Error_ Proc

func __Error_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructError(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Pipeline_ Proc

func __Pipeline_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructPipeline(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ProtocolError_ Proc

func __ProtocolError_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructProtocolError(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var TrimString_ Proc

func __TrimString_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__s := ExtractString(_args, 0)
		_res := textproto.TrimString(__s)
		return MakeString(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	CanonicalMIMEHeaderKey_ = __CanonicalMIMEHeaderKey_
	Conn_ = __Conn_
	Dial_ = __Dial_
	Error_ = __Error_
	Pipeline_ = __Pipeline_
	ProtocolError_ = __ProtocolError_
	TrimString_ = __TrimString_

	initNative()

	textprotoNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/textproto package.

Package textproto implements generic support for text-based request/response
protocols in the style of HTTP, NNTP, and SMTP.

The package provides:

Error, which represents a numeric error response from
a server.

Pipeline, to manage pipelined requests and responses
in a client.

Reader, to read numeric response code lines,
key: value headers, lines wrapped with leading spaces
on continuation lines, and whole text blocks ending
with a dot on a line by itself.

Writer, to write dot-encoded text blocks.

Conn, a convenient packaging of Reader, Writer, and Pipeline for use
with a single network connection.
`, "1.0"))

	
	textprotoNamespace.InternVar("CanonicalMIMEHeaderKey", CanonicalMIMEHeaderKey_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__s"))),
			`CanonicalMIMEHeaderKey returns the canonical format of the
MIME header key s. The canonicalization converts the first
letter and any letter following a hyphen to upper case;
the rest are converted to lowercase. For example, the
canonical key for "accept-encoding" is "Accept-Encoding".
MIME header keys are assumed to be ASCII only.
If s contains a space or invalid header field bytes, it is
returned without modifications.

Go input arguments: (s string)

Go return type: string

Joker input arguments: [^String s]

Joker return type: String`, "1.0"))

	textprotoNamespace.InternVar("Conn.", Conn_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for textproto.Conn`, "1.0"))

	textprotoNamespace.InternVar("Dial", Dial_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__network"), MakeSymbol("__addr"))),
			`Dial connects to the given address on the given network using net.Dial
and then returns a new Conn for the connection.

Go input arguments: (network string, addr string)

Go return type: (*Conn, error)

Joker input arguments: [^String network, ^String addr]

Joker return type: [(atom-of go.std.net.textproto/Conn) Error]`, "1.0"))

	textprotoNamespace.InternVar("Error.", Error_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for textproto.Error`, "1.0"))

	textprotoNamespace.InternVar("Pipeline.", Pipeline_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for textproto.Pipeline`, "1.0"))

	textprotoNamespace.InternVar("ProtocolError.", ProtocolError_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for textproto.ProtocolError`, "1.0"))

	textprotoNamespace.InternVar("TrimString", TrimString_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__s"))),
			`TrimString returns s without leading and trailing ASCII space.

Go input arguments: (s string)

Go return type: string

Joker input arguments: [^String s]

Joker return type: String`, "1.0"))

}

func init() {
	textprotoNamespace.Lazy = Init
}
