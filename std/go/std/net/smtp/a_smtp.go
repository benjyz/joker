// This file is generated by generate-std.joke script. Do not edit manually!

package smtp

import (
	. "github.com/candid82/joker/core"
)

var smtpNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.smtp"))



var CRAMMD5Auth_ Proc

func __CRAMMD5Auth_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__username := ExtractString(_args, 0)
		__secret := ExtractString(_args, 1)
		_res := __cRAMMD5Auth(__username, __secret)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var Dial_ Proc

func __Dial_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__addr := ExtractString(_args, 0)
		_res := __dial(__addr)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var PlainAuth_ Proc

func __PlainAuth_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 4:
		__identity := ExtractString(_args, 0)
		__username := ExtractString(_args, 1)
		__password := ExtractString(_args, 2)
		__host := ExtractString(_args, 3)
		_res := __plainAuth(__identity, __username, __password, __host)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	CRAMMD5Auth_ = __CRAMMD5Auth_
	Dial_ = __Dial_
	PlainAuth_ = __PlainAuth_

	initNative()

	smtpNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/smtp package.

Package smtp implements the Simple Mail Transfer Protocol as defined in RFC 5321.
It also implements the following extensions:
	8BITMIME  RFC 1652
	AUTH      RFC 2554
	STARTTLS  RFC 3207
Additional extensions may be handled by clients.

The smtp package is frozen and is not accepting new features.
Some external packages provide more functionality. See:

  https://godoc.org/?q=smtp
`, "1.0"))

	
	smtpNamespace.InternVar("CRAMMD5Auth", CRAMMD5Auth_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__username"), MakeSymbol("__secret"))),
			`CRAMMD5Auth returns an Auth that implements the CRAM-MD5 authentication
mechanism as defined in RFC 2195.
The returned Auth uses the given username and secret to authenticate
to the server using the challenge-response mechanism.

Go input arguments: (username string, secret string)

Go return type: Auth

Joker input arguments: [^String username, ^String secret]

Joker return type: go.std.net.smtp/Auth`, "1.0"))

	smtpNamespace.InternVar("Dial", Dial_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__addr"))),
			`Dial returns a new Client connected to an SMTP server at addr.
The addr must include a port, as in "mail.example.com:smtp".

Go input arguments: (addr string)

Go return type: (*Client, error)

Joker input arguments: [^String addr]

Joker return type: [(atom-of go.std.net.smtp/Client) Error]`, "1.0"))

	smtpNamespace.InternVar("PlainAuth", PlainAuth_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__identity"), MakeSymbol("__username"), MakeSymbol("__password"), MakeSymbol("__host"))),
			`PlainAuth returns an Auth that implements the PLAIN authentication
mechanism as defined in RFC 4616. The returned Auth uses the given
username and password to authenticate to host and act as identity.
Usually identity should be the empty string, to act as username.

PlainAuth will only send the credentials if the connection is using TLS
or is connected to localhost. Otherwise authentication will fail with an
error, without sending the credentials.

Go input arguments: (identity string, username string, password string, host string)

Go return type: Auth

Joker input arguments: [^String identity, ^String username, ^String password, ^String host]

Joker return type: go.std.net.smtp/Auth`, "1.0"))

}

func init() {
	smtpNamespace.Lazy = Init
}
