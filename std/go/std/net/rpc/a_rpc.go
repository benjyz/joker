// This file is generated by generate-std.joke script. Do not edit manually!

package rpc

import (
	. "github.com/candid82/joker/core"
	"net/rpc"
)

var rpcNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.rpc"))

var DefaultDebugPath_ String
var DefaultRPCPath_ String
var DefaultServer_ *GoVar
var ErrShutdown_ *GoVar

var Client_ Proc

func __Client_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructClient(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Dial_ Proc

func __Dial_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__network := ExtractString(_args, 0)
		__address := ExtractString(_args, 1)
		_res := __dial(__network, __address)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var DialHTTP_ Proc

func __DialHTTP_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__network := ExtractString(_args, 0)
		__address := ExtractString(_args, 1)
		_res := __dialHTTP(__network, __address)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var DialHTTPPath_ Proc

func __DialHTTPPath_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 3:
		__network := ExtractString(_args, 0)
		__address := ExtractString(_args, 1)
		__path := ExtractString(_args, 2)
		_res := __dialHTTPPath(__network, __address, __path)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var NewClientWithCodec_ Proc

func __NewClientWithCodec_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__codec := ExtractGoObjectClientCodec(_args, 0)
		_res := __newClientWithCodec(*__codec)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var NewServer_ Proc

func __NewServer_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 0:
		_res := __newServer()
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var Request_ Proc

func __Request_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructRequest(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Response_ Proc

func __Response_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructResponse(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ServeRequest_ Proc

func __ServeRequest_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__codec := ExtractGoObjectServerCodec(_args, 0)
		_res := rpc.ServeRequest(*__codec)
		return MakeError(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Server_ Proc

func __Server_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructServer(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ServerError_ Proc

func __ServerError_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructServerError(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {
	DefaultDebugPath_ = MakeString(rpc.DefaultDebugPath)
	DefaultRPCPath_ = MakeString(rpc.DefaultRPCPath)
	DefaultServer_ = &GoVar{Value: &rpc.DefaultServer}
	ErrShutdown_ = &GoVar{Value: &rpc.ErrShutdown}
	Client_ = __Client_
	Dial_ = __Dial_
	DialHTTP_ = __DialHTTP_
	DialHTTPPath_ = __DialHTTPPath_
	NewClientWithCodec_ = __NewClientWithCodec_
	NewServer_ = __NewServer_
	Request_ = __Request_
	Response_ = __Response_
	ServeRequest_ = __ServeRequest_
	Server_ = __Server_
	ServerError_ = __ServerError_

	initNative()

	rpcNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/rpc package.

	Package rpc provides access to the exported methods of an object across a
	network or other I/O connection.  A server registers an object, making it visible
	as a service with the name of the type of the object.  After registration, exported
	methods of the object will be accessible remotely.  A server may register multiple
	objects (services) of different types but it is an error to register multiple
	objects of the same type.

	Only methods that satisfy these criteria will be made available for remote access;
	other methods will be ignored:

		- the method's type is exported.
		- the method is exported.
		- the method has two arguments, both exported (or builtin) types.
		- the method's second argument is a pointer.
		- the method has return type error.

	In effect, the method must look schematically like

		func (t *T) MethodName(argType T1, replyType *T2) error

	where T1 and T2 can be marshaled by encoding/gob.
	These requirements apply even if a different codec is used.
	(In the future, these requirements may soften for custom codecs.)

	The method's first argument represents the arguments provided by the caller; the
	second argument represents the result parameters to be returned to the caller.
	The method's return value, if non-nil, is passed back as a string that the client
	sees as if created by errors.New.  If an error is returned, the reply parameter
	will not be sent back to the client.

	The server may handle requests on a single connection by calling ServeConn.  More
	typically it will create a network listener and call Accept or, for an HTTP
	listener, HandleHTTP and http.Serve.

	A client wishing to use the service establishes a connection and then invokes
	NewClient on the connection.  The convenience function Dial (DialHTTP) performs
	both steps for a raw network connection (an HTTP connection).  The resulting
	Client object has two methods, Call and Go, that specify the service and method to
	call, a pointer containing the arguments, and a pointer to receive the result
	parameters.

	The Call method waits for the remote call to complete while the Go method
	launches the call asynchronously and signals completion using the Call
	structure's Done channel.

	Unless an explicit codec is set up, package encoding/gob is used to
	transport the data.

	Here is a simple example.  A server wishes to export an object of type Arith:

		package server

		import "errors"

		type Args struct {
			A, B int
		}

		type Quotient struct {
			Quo, Rem int
		}

		type Arith int

		func (t *Arith) Multiply(args *Args, reply *int) error {
			*reply = args.A * args.B
			return nil
		}

		func (t *Arith) Divide(args *Args, quo *Quotient) error {
			if args.B == 0 {
				return errors.New("divide by zero")
			}
			quo.Quo = args.A / args.B
			quo.Rem = args.A % args.B
			return nil
		}

	The server calls (for HTTP service):

		arith := new(Arith)
		rpc.Register(arith)
		rpc.HandleHTTP()
		l, e := net.Listen("tcp", ":1234")
		if e != nil {
			log.Fatal("listen error:", e)
		}
		go http.Serve(l, nil)

	At this point, clients can see a service "Arith" with methods "Arith.Multiply" and
	"Arith.Divide".  To invoke one, a client first dials the server:

		client, err := rpc.DialHTTP("tcp", serverAddress + ":1234")
		if err != nil {
			log.Fatal("dialing:", err)
		}

	Then it can make a remote call:

		// Synchronous call
		args := &server.Args{7,8}
		var reply int
		err = client.Call("Arith.Multiply", args, &reply)
		if err != nil {
			log.Fatal("arith error:", err)
		}
		fmt.Printf("Arith: %d*%d=%d", args.A, args.B, reply)

	or

		// Asynchronous call
		quotient := new(Quotient)
		divCall := client.Go("Arith.Divide", args, quotient, nil)
		replyCall := <-divCall.Done	// will be equal to divCall
		// check errors, print, etc.

	A server implementation will often provide a simple, type-safe wrapper for the
	client.

	The net/rpc package is frozen and is not accepting new features.
`, "1.0"))

	rpcNamespace.InternVar("DefaultDebugPath", DefaultDebugPath_,
		MakeMeta(
			nil,
			``, "1.0"))

	rpcNamespace.InternVar("DefaultRPCPath", DefaultRPCPath_,
		MakeMeta(
			nil,
			`Defaults used by HandleHTTP
`, "1.0"))

	rpcNamespace.InternVar("DefaultServer", DefaultServer_,
		MakeMeta(
			nil,
			`DefaultServer is the default instance of *Server.
`, "1.0"))

	rpcNamespace.InternVar("ErrShutdown", ErrShutdown_,
		MakeMeta(
			nil,
			``, "1.0"))

	rpcNamespace.InternVar("Client.", Client_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for rpc.Client`, "1.0"))

	rpcNamespace.InternVar("Dial", Dial_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__network"), MakeSymbol("__address"))),
			`Dial connects to an RPC server at the specified network address.

Go input arguments: (network string, address string)

Go return type: (*Client, error)

Joker input arguments: [^String network, ^String address]

Joker return type: [(atom-of go.std.net.rpc/Client) Error]`, "1.0"))

	rpcNamespace.InternVar("DialHTTP", DialHTTP_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__network"), MakeSymbol("__address"))),
			`DialHTTP connects to an HTTP RPC server at the specified network address
listening on the default HTTP RPC path.

Go input arguments: (network string, address string)

Go return type: (*Client, error)

Joker input arguments: [^String network, ^String address]

Joker return type: [(atom-of go.std.net.rpc/Client) Error]`, "1.0"))

	rpcNamespace.InternVar("DialHTTPPath", DialHTTPPath_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__network"), MakeSymbol("__address"), MakeSymbol("__path"))),
			`DialHTTPPath connects to an HTTP RPC server
at the specified network address and path.

Go input arguments: (network string, address string, path string)

Go return type: (*Client, error)

Joker input arguments: [^String network, ^String address, ^String path]

Joker return type: [(atom-of go.std.net.rpc/Client) Error]`, "1.0"))

	rpcNamespace.InternVar("NewClientWithCodec", NewClientWithCodec_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__codec"))),
			`NewClientWithCodec is like NewClient but uses the specified
codec to encode requests and decode responses.

Go input arguments: (codec ClientCodec)

Go return type: *Client

Joker input arguments: [^go.std.net.rpc/ClientCodec codec]

Joker return type: (atom-of go.std.net.rpc/Client)`, "1.0"))

	rpcNamespace.InternVar("NewServer", NewServer_,
		MakeMeta(
			NewListFrom(NewVectorFrom()),
			`NewServer returns a new Server.

Go return type: *Server

Joker input arguments: []

Joker return type: (atom-of go.std.net.rpc/Server)`, "1.0"))

	rpcNamespace.InternVar("Request.", Request_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for rpc.Request`, "1.0"))

	rpcNamespace.InternVar("Response.", Response_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for rpc.Response`, "1.0"))

	rpcNamespace.InternVar("ServeRequest", ServeRequest_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__codec"))),
			`ServeRequest is like ServeCodec but synchronously serves a single request.
It does not close the codec upon completion.

Go input arguments: (codec ServerCodec)

Go return type: error

Joker input arguments: [^go.std.net.rpc/ServerCodec codec]

Joker return type: Error`, "1.0"))

	rpcNamespace.InternVar("Server.", Server_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for rpc.Server`, "1.0"))

	rpcNamespace.InternVar("ServerError.", ServerError_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for rpc.ServerError`, "1.0"))

}

func init() {
	rpcNamespace.Lazy = Init
}
