// This file is generated by generate-std.joke script. Do not edit manually!

package jsonrpc

import (
	. "github.com/candid82/joker/core"
)

var jsonrpcNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.rpc.jsonrpc"))



var Dial_ Proc

func __Dial_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__network := ExtractString(_args, 0)
		__address := ExtractString(_args, 1)
		_res := __dial(__network, __address)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	Dial_ = __Dial_

	initNative()

	jsonrpcNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/rpc/jsonrpc package.

Package jsonrpc implements a JSON-RPC 1.0 ClientCodec and ServerCodec
for the rpc package.
For JSON-RPC 2.0 support, see https://godoc.org/?q=json-rpc+2.0
`, "1.0"))

	
	jsonrpcNamespace.InternVar("Dial", Dial_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__network"), MakeSymbol("__address"))),
			`Dial connects to a JSON-RPC server at the specified network address.

Go input arguments: (network string, address string)

Go return type: (*net/rpc.Client, error)

Joker input arguments: [^String network, ^String address]

Joker return type: [(atom-of go.std.net.rpc/Client) Error]`, "1.0"))

}

func init() {
	jsonrpcNamespace.Lazy = Init
}
