// This file is generated by generate-std.joke script. Do not edit manually!

package mail

import (
	. "github.com/candid82/joker/core"
	"net/mail"
)

var mailNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.mail"))

var ErrHeaderNotPresent_ *GoVar

var Address_ Proc

func __Address_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructAddress(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ParseAddress_ Proc

func __ParseAddress_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__address := ExtractString(_args, 0)
		_res := __parseAddress(__address)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var ParseAddressList_ Proc

func __ParseAddressList_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__list := ExtractString(_args, 0)
		_res := __parseAddressList(__list)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var ParseDate_ Proc

func __ParseDate_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__date := ExtractString(_args, 0)
		_res := __parseDate(__date)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {
	ErrHeaderNotPresent_ = &GoVar{Value: &mail.ErrHeaderNotPresent}
	Address_ = __Address_
	ParseAddress_ = __ParseAddress_
	ParseAddressList_ = __ParseAddressList_
	ParseDate_ = __ParseDate_

	initNative()

	mailNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/mail package.

Package mail implements parsing of mail messages.

For the most part, this package follows the syntax as specified by RFC 5322 and
extended by RFC 6532.
Notable divergences:
	* Obsolete address formats are not parsed, including addresses with
	  embedded route information.
	* The full range of spacing (the CFWS syntax element) is not supported,
	  such as breaking addresses across lines.
	* No unicode normalization is performed.
	* The special characters ()[]:;@\, are allowed to appear unquoted in names.
`, "1.0"))

	mailNamespace.InternVar("ErrHeaderNotPresent", ErrHeaderNotPresent_,
		MakeMeta(
			nil,
			``, "1.0"))

	mailNamespace.InternVar("Address.", Address_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for mail.Address`, "1.0"))

	mailNamespace.InternVar("ParseAddress", ParseAddress_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__address"))),
			`Parses a single RFC 5322 address, e.g. "Barry Gibbs <bg@example.com>"

Go input arguments: (address string)

Go return type: (*Address, error)

Joker input arguments: [^String address]

Joker return type: [(atom-of go.std.net.mail/Address) Error]`, "1.0"))

	mailNamespace.InternVar("ParseAddressList", ParseAddressList_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__list"))),
			`ParseAddressList parses the given string as a list of addresses.

Go input arguments: (list string)

Go return type: ([]*Address, error)

Joker input arguments: [^String list]

Joker return type: [(vector-of (atom-of go.std.net.mail/Address)) Error]`, "1.0"))

	mailNamespace.InternVar("ParseDate", ParseDate_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__date"))),
			`ParseDate parses an RFC 5322 date string.

Go input arguments: (date string)

Go return type: (time.Time, error)

Joker input arguments: [^String date]

Joker return type: [go.std.time/Time Error]`, "1.0"))

}

func init() {
	mailNamespace.Lazy = Init
}
