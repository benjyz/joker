// Auto-generated by gostd at 2019-09-17T13:14:28.216621211-04:00 by version 0.1, do not edit!!

package httptest

import (
	"fmt"
	. "github.com/candid82/joker/core"
	_httptest "net/http/httptest"
	_reflect "reflect"
)

func ExtractGoObjectResponseRecorder(args []Object, index int) *_httptest.ResponseRecorder {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case _httptest.ResponseRecorder:
			return &r
		case *_httptest.ResponseRecorder:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/http/httptest.ResponseRecorder]"))
}

// func _mapToResponseRecorder(o Map) *_httptest.ResponseRecorder {
// 	return &_httptest.ResponseRecorder{}
// }

// func _vectorToResponseRecorder(o *Vector) *_httptest.ResponseRecorder {
// 	return &_httptest.ResponseRecorder{
// 		Code: AssertInt(o.Nth(0), "").I,
// 		HeaderMap: ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 		Body: *ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 		Flushed: ToBool(o.Nth(3)),
// 	}
// }

// func _ConstructResponseRecorder(_v Object) *_httptest.ResponseRecorder {
// 	switch _o := _v.(type) {
// 	case GoObject:
// 		switch _g := _o.O.(type) {
// 		case _httptest.ResponseRecorder:
// 			return &_g
// 		case *_httptest.ResponseRecorder:
// 			return _g
// 		}
// 	case *ArrayMap, *HashMap:
// 		return _mapToResponseRecorder(_o.(Map))
// 	case *Vector:
// 		return _vectorToResponseRecorder(_o)
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[httptest.ResponseRecorder] or: Map or Vector"))
// }

func ExtractGo_go_std_net_http_httptest__ResponseRecorder(rcvr, arg string, args *ArraySeq, n int) (res _httptest.ResponseRecorder) {
	a := CheckGoNth(rcvr, "go.std.net.http.httptest/ResponseRecorder", arg, args, n).O
	res, ok := a.(_httptest.ResponseRecorder)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.http.httptest/ResponseRecorder], but is GoObject[%s]",
			n, rcvr, GoTypeToString(_reflect.TypeOf(a)))))
	}
	return
}

func ExtractGoObjectServer(args []Object, index int) *_httptest.Server {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case _httptest.Server:
			return &r
		case *_httptest.Server:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/http/httptest.Server]"))
}

// func _mapToServer(o Map) *_httptest.Server {
// 	return &_httptest.Server{}
// }

// func _vectorToServer(o *Vector) *_httptest.Server {
// 	return &_httptest.Server{
// 		URL: AssertString(o.Nth(0), "").S,
// 		Listener: ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 		TLS: *ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 		Config: *ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 	}
// }

// func _ConstructServer(_v Object) *_httptest.Server {
// 	switch _o := _v.(type) {
// 	case GoObject:
// 		switch _g := _o.O.(type) {
// 		case _httptest.Server:
// 			return &_g
// 		case *_httptest.Server:
// 			return _g
// 		}
// 	case *ArrayMap, *HashMap:
// 		return _mapToServer(_o.(Map))
// 	case *Vector:
// 		return _vectorToServer(_o)
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[httptest.Server] or: Map or Vector"))
// }

func ExtractGo_go_std_net_http_httptest__Server(rcvr, arg string, args *ArraySeq, n int) (res _httptest.Server) {
	a := CheckGoNth(rcvr, "go.std.net.http.httptest/Server", arg, args, n).O
	res, ok := a.(_httptest.Server)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.http.httptest/Server], but is GoObject[%s]",
			n, rcvr, GoTypeToString(_reflect.TypeOf(a)))))
	}
	return
}

func __newRecorder() Object {
	_res := _httptest.NewRecorder()
	return MakeGoObject(_res)
}

// func __newRequest(__method string, __target string, __body ABEND987(genutils.go: imports not yet supported: io.Reader)) Object {
// 	_res := _httptest.NewRequest(__method, __target, __body)
// 	return MakeGoObject(_res)
// }

// func __newServer(__handler ABEND987(genutils.go: imports not yet supported: http.Handler)) Object {
// 	_res := _httptest.NewServer(__handler)
// 	return MakeGoObject(_res)
// }

// func __newTLSServer(__handler ABEND987(genutils.go: imports not yet supported: http.Handler)) Object {
// 	_res := _httptest.NewTLSServer(__handler)
// 	return MakeGoObject(_res)
// }

// func __newUnstartedServer(__handler ABEND987(genutils.go: imports not yet supported: http.Handler)) Object {
// 	_res := _httptest.NewUnstartedServer(__handler)
// 	return MakeGoObject(_res)
// }

// func __ptrTo_ResponseRecorder_Flush(o GoObject, args Object) Object {
// 	...ABEND275: TODO...
// }

func __ptrTo_ResponseRecorder_Header(o GoObject, args Object) Object {
	CheckGoArity("(*_net/http/httptest.ResponseRecorder)Header()", args, 0, 0)
	_res := o.O.(*_httptest.ResponseRecorder).Header()
	return MakeGoObject(_res)
}

func __ptrTo_ResponseRecorder_Result(o GoObject, args Object) Object {
	CheckGoArity("(*_net/http/httptest.ResponseRecorder)Result()", args, 0, 0)
	_res := o.O.(*_httptest.ResponseRecorder).Result()
	return MakeGoObject(_res)
}

// func __ptrTo_ResponseRecorder_Write(o GoObject, args Object) Object {
// (ABEND902(pre.go: custom-runtime routine not implemented: ConvertToArrayOfbyte(__buf)))}

// func __ptrTo_ResponseRecorder_WriteHeader(o GoObject, args Object) Object {
// 	...ABEND275: TODO...
// }

func __ptrTo_ResponseRecorder_WriteString(o GoObject, args Object) Object {
	_argList := CheckGoArity("(*_net/http/httptest.ResponseRecorder)WriteString()", args, 1, 1)
	__str := ExtractGoString("(*_net/http/httptest.ResponseRecorder)WriteString()", "__str", _argList, 0)
	_res1, _res2 := o.O.(*_httptest.ResponseRecorder).WriteString(__str)
	_res := EmptyVector()
	_res = _res.Conjoin(MakeInt(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

func __ptrTo_Server_Certificate(o GoObject, args Object) Object {
	CheckGoArity("(*_net/http/httptest.Server)Certificate()", args, 0, 0)
	_res := o.O.(*_httptest.Server).Certificate()
	return MakeGoObject(_res)
}

func __ptrTo_Server_Client(o GoObject, args Object) Object {
	CheckGoArity("(*_net/http/httptest.Server)Client()", args, 0, 0)
	_res := o.O.(*_httptest.Server).Client()
	return MakeGoObject(_res)
}

// func __ptrTo_Server_Close(o GoObject, args Object) Object {
// 	...ABEND275: TODO...
// }

// func __ptrTo_Server_CloseClientConnections(o GoObject, args Object) Object {
// 	...ABEND275: TODO...
// }

// func __ptrTo_Server_Start(o GoObject, args Object) Object {
// 	...ABEND275: TODO...
// }

// func __ptrTo_Server_StartTLS(o GoObject, args Object) Object {
// 	...ABEND275: TODO...
// }
var members_PtrTo_ResponseRecorder GoTypeInfo
var members_PtrTo_Server GoTypeInfo

func initNative() {
	members_PtrTo_ResponseRecorder = GoTypeInfo{Members: GoMembers{
		"Header": __ptrTo_ResponseRecorder_Header,
		"Result": __ptrTo_ResponseRecorder_Result,
		"WriteString": __ptrTo_ResponseRecorder_WriteString,
	}}

	members_PtrTo_Server = GoTypeInfo{Members: GoMembers{
		"Certificate": __ptrTo_Server_Certificate,
		"Client": __ptrTo_Server_Client,
	}}

	GoTypes[_reflect.TypeOf((*_httptest.ResponseRecorder)(nil))] = &members_PtrTo_ResponseRecorder
	GoTypes[_reflect.TypeOf((*_httptest.Server)(nil))] = &members_PtrTo_Server
}
