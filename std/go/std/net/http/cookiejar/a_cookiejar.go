// This file is generated by generate-std.joke script. Do not edit manually!

package cookiejar

import (
	. "github.com/candid82/joker/core"
)

var cookiejarNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.http.cookiejar"))



var Jar_ Proc

func __Jar_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructJar(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var New_ Proc

func __New_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__o := ExtractGoObjectOptions(_args, 0)
		_res := __new(__o)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	Jar_ = __Jar_
	New_ = __New_

	initNative()

	cookiejarNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/http/cookiejar package.

Package cookiejar implements an in-memory RFC 6265-compliant http.CookieJar.
`, "1.0"))

	
	cookiejarNamespace.InternVar("Jar.", Jar_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for cookiejar.Jar`, "1.0"))

	cookiejarNamespace.InternVar("New", New_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__o"))),
			`New returns a new cookie jar. A nil *Options is equivalent to a zero
Options.

Go input arguments: (o *Options)

Go return type: (*Jar, error)

Joker input arguments: [^(atom-of go.std.net.http.cookiejar/Options) o]

Joker return type: [(atom-of go.std.net.http.cookiejar/Jar) Error]`, "1.0"))

}

func init() {
	cookiejarNamespace.Lazy = Init
}
