// This file is generated by generate-std.joke script. Do not edit manually!

package http

import (
	. "github.com/candid82/joker/core"
	"net/http"
)

var httpNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.http"))

var DefaultClient_ *GoVar
var DefaultMaxHeaderBytes_ *BigInt
var DefaultMaxIdleConnsPerHost_ Int
var DefaultServeMux_ *GoVar
var DefaultTransport_ *GoVar
var ErrAbortHandler_ *GoVar
var ErrBodyNotAllowed_ *GoVar
var ErrBodyReadAfterClose_ *GoVar
var ErrContentLength_ *GoVar
var ErrHandlerTimeout_ *GoVar
var ErrHeaderTooLong_ *GoVar
var ErrHijacked_ *GoVar
var ErrLineTooLong_ *GoVar
var ErrMissingBoundary_ *GoVar
var ErrMissingContentLength_ *GoVar
var ErrMissingFile_ *GoVar
var ErrNoCookie_ *GoVar
var ErrNoLocation_ *GoVar
var ErrNotMultipart_ *GoVar
var ErrNotSupported_ *GoVar
var ErrServerClosed_ *GoVar
var ErrShortBody_ *GoVar
var ErrSkipAltProtocol_ *GoVar
var ErrUnexpectedTrailer_ *GoVar
var ErrUseLastResponse_ *GoVar
var ErrWriteAfterFlush_ *GoVar
var LocalAddrContextKey_ *GoVar
var MethodConnect_ String
var MethodDelete_ String
var MethodGet_ String
var MethodHead_ String
var MethodOptions_ String
var MethodPatch_ String
var MethodPost_ String
var MethodPut_ String
var MethodTrace_ String
var NoBody_ *GoVar
var SameSiteDefaultMode_ Int
var SameSiteLaxMode_ Int
var SameSiteStrictMode_ Int
var ServerContextKey_ *GoVar
var StateActive_ Int
var StateClosed_ Int
var StateHijacked_ Int
var StateIdle_ Int
var StateNew_ Int
var StatusAccepted_ Int
var StatusAlreadyReported_ Int
var StatusBadGateway_ Int
var StatusBadRequest_ Int
var StatusConflict_ Int
var StatusContinue_ Int
var StatusCreated_ Int
var StatusExpectationFailed_ Int
var StatusFailedDependency_ Int
var StatusForbidden_ Int
var StatusFound_ Int
var StatusGatewayTimeout_ Int
var StatusGone_ Int
var StatusHTTPVersionNotSupported_ Int
var StatusIMUsed_ Int
var StatusInsufficientStorage_ Int
var StatusInternalServerError_ Int
var StatusLengthRequired_ Int
var StatusLocked_ Int
var StatusLoopDetected_ Int
var StatusMethodNotAllowed_ Int
var StatusMisdirectedRequest_ Int
var StatusMovedPermanently_ Int
var StatusMultiStatus_ Int
var StatusMultipleChoices_ Int
var StatusNetworkAuthenticationRequired_ Int
var StatusNoContent_ Int
var StatusNonAuthoritativeInfo_ Int
var StatusNotAcceptable_ Int
var StatusNotExtended_ Int
var StatusNotFound_ Int
var StatusNotImplemented_ Int
var StatusNotModified_ Int
var StatusOK_ Int
var StatusPartialContent_ Int
var StatusPaymentRequired_ Int
var StatusPermanentRedirect_ Int
var StatusPreconditionFailed_ Int
var StatusPreconditionRequired_ Int
var StatusProcessing_ Int
var StatusProxyAuthRequired_ Int
var StatusRequestEntityTooLarge_ Int
var StatusRequestHeaderFieldsTooLarge_ Int
var StatusRequestTimeout_ Int
var StatusRequestURITooLong_ Int
var StatusRequestedRangeNotSatisfiable_ Int
var StatusResetContent_ Int
var StatusSeeOther_ Int
var StatusServiceUnavailable_ Int
var StatusSwitchingProtocols_ Int
var StatusTeapot_ Int
var StatusTemporaryRedirect_ Int
var StatusTooEarly_ Int
var StatusTooManyRequests_ Int
var StatusUnauthorized_ Int
var StatusUnavailableForLegalReasons_ Int
var StatusUnprocessableEntity_ Int
var StatusUnsupportedMediaType_ Int
var StatusUpgradeRequired_ Int
var StatusUseProxy_ Int
var StatusVariantAlsoNegotiates_ Int
var TimeFormat_ String
var TrailerPrefix_ String

var CanonicalHeaderKey_ Proc

func __CanonicalHeaderKey_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__s := ExtractString(_args, 0)
		_res := http.CanonicalHeaderKey(__s)
		return MakeString(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ConnState_ Proc

func __ConnState_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructConnState(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var Dir_ Proc

func __Dir_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructDir(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var FileServer_ Proc

func __FileServer_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__root := ExtractGoObjectFileSystem(_args, 0)
		_res := __fileServer(*__root)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var Get_ Proc

func __Get_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__url := ExtractString(_args, 0)
		_res := __get(__url)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var Head_ Proc

func __Head_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__url := ExtractString(_args, 0)
		_res := __head(__url)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var ListenAndServe_ Proc

func __ListenAndServe_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__addr := ExtractString(_args, 0)
		__handler := ExtractGoObjectHandler(_args, 1)
		_res := http.ListenAndServe(__addr, *__handler)
		return MakeError(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ListenAndServeTLS_ Proc

func __ListenAndServeTLS_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 4:
		__addr := ExtractString(_args, 0)
		__certFile := ExtractString(_args, 1)
		__keyFile := ExtractString(_args, 2)
		__handler := ExtractGoObjectHandler(_args, 3)
		_res := http.ListenAndServeTLS(__addr, __certFile, __keyFile, *__handler)
		return MakeError(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var NewFileTransport_ Proc

func __NewFileTransport_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__fs := ExtractGoObjectFileSystem(_args, 0)
		_res := __newFileTransport(*__fs)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var NewServeMux_ Proc

func __NewServeMux_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 0:
		_res := __newServeMux()
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var NotFoundHandler_ Proc

func __NotFoundHandler_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 0:
		_res := __notFoundHandler()
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var ParseHTTPVersion_ Proc

func __ParseHTTPVersion_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__vers := ExtractString(_args, 0)
		_res := __parseHTTPVersion(__vers)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var ParseTime_ Proc

func __ParseTime_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__text := ExtractString(_args, 0)
		_res := __parseTime(__text)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var ProtocolError_ Proc

func __ProtocolError_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructProtocolError(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ProxyFromEnvironment_ Proc

func __ProxyFromEnvironment_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__req := ExtractGoObjectRequest(_args, 0)
		_res := __proxyFromEnvironment(__req)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var RedirectHandler_ Proc

func __RedirectHandler_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__url := ExtractString(_args, 0)
		__code := ExtractInt(_args, 1)
		_res := __redirectHandler(__url, __code)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

var SameSite_ Proc

func __SameSite_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructSameSite(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var ServeMux_ Proc

func __ServeMux_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		_v := ExtractObject(_args, 0)
		_res := _ConstructServeMux(_v)
		return MakeGoObject(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var StatusText_ Proc

func __StatusText_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__code := ExtractInt(_args, 0)
		_res := http.StatusText(__code)
		return MakeString(_res)

	default:
		PanicArity(_c)
	}
	return NIL
}

var StripPrefix_ Proc

func __StripPrefix_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 2:
		__prefix := ExtractString(_args, 0)
		__h := ExtractGoObjectHandler(_args, 1)
		_res := __stripPrefix(__prefix, *__h)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {
	DefaultClient_ = &GoVar{Value: &http.DefaultClient}
	DefaultMaxHeaderBytes_ = MakeNumber(int64(http.DefaultMaxHeaderBytes))
	DefaultMaxIdleConnsPerHost_ = MakeInt(http.DefaultMaxIdleConnsPerHost)
	DefaultServeMux_ = &GoVar{Value: &http.DefaultServeMux}
	DefaultTransport_ = &GoVar{Value: &http.DefaultTransport}
	ErrAbortHandler_ = &GoVar{Value: &http.ErrAbortHandler}
	ErrBodyNotAllowed_ = &GoVar{Value: &http.ErrBodyNotAllowed}
	ErrBodyReadAfterClose_ = &GoVar{Value: &http.ErrBodyReadAfterClose}
	ErrContentLength_ = &GoVar{Value: &http.ErrContentLength}
	ErrHandlerTimeout_ = &GoVar{Value: &http.ErrHandlerTimeout}
	ErrHeaderTooLong_ = &GoVar{Value: &http.ErrHeaderTooLong}
	ErrHijacked_ = &GoVar{Value: &http.ErrHijacked}
	ErrLineTooLong_ = &GoVar{Value: &http.ErrLineTooLong}
	ErrMissingBoundary_ = &GoVar{Value: &http.ErrMissingBoundary}
	ErrMissingContentLength_ = &GoVar{Value: &http.ErrMissingContentLength}
	ErrMissingFile_ = &GoVar{Value: &http.ErrMissingFile}
	ErrNoCookie_ = &GoVar{Value: &http.ErrNoCookie}
	ErrNoLocation_ = &GoVar{Value: &http.ErrNoLocation}
	ErrNotMultipart_ = &GoVar{Value: &http.ErrNotMultipart}
	ErrNotSupported_ = &GoVar{Value: &http.ErrNotSupported}
	ErrServerClosed_ = &GoVar{Value: &http.ErrServerClosed}
	ErrShortBody_ = &GoVar{Value: &http.ErrShortBody}
	ErrSkipAltProtocol_ = &GoVar{Value: &http.ErrSkipAltProtocol}
	ErrUnexpectedTrailer_ = &GoVar{Value: &http.ErrUnexpectedTrailer}
	ErrUseLastResponse_ = &GoVar{Value: &http.ErrUseLastResponse}
	ErrWriteAfterFlush_ = &GoVar{Value: &http.ErrWriteAfterFlush}
	LocalAddrContextKey_ = &GoVar{Value: &http.LocalAddrContextKey}
	MethodConnect_ = MakeString(http.MethodConnect)
	MethodDelete_ = MakeString(http.MethodDelete)
	MethodGet_ = MakeString(http.MethodGet)
	MethodHead_ = MakeString(http.MethodHead)
	MethodOptions_ = MakeString(http.MethodOptions)
	MethodPatch_ = MakeString(http.MethodPatch)
	MethodPost_ = MakeString(http.MethodPost)
	MethodPut_ = MakeString(http.MethodPut)
	MethodTrace_ = MakeString(http.MethodTrace)
	NoBody_ = &GoVar{Value: &http.NoBody}
	SameSiteDefaultMode_ = MakeInt(int(http.SameSiteDefaultMode))
	SameSiteLaxMode_ = MakeInt(int(http.SameSiteLaxMode))
	SameSiteStrictMode_ = MakeInt(int(http.SameSiteStrictMode))
	ServerContextKey_ = &GoVar{Value: &http.ServerContextKey}
	StateActive_ = MakeInt(int(http.StateActive))
	StateClosed_ = MakeInt(int(http.StateClosed))
	StateHijacked_ = MakeInt(int(http.StateHijacked))
	StateIdle_ = MakeInt(int(http.StateIdle))
	StateNew_ = MakeInt(int(http.StateNew))
	StatusAccepted_ = MakeInt(http.StatusAccepted)
	StatusAlreadyReported_ = MakeInt(http.StatusAlreadyReported)
	StatusBadGateway_ = MakeInt(http.StatusBadGateway)
	StatusBadRequest_ = MakeInt(http.StatusBadRequest)
	StatusConflict_ = MakeInt(http.StatusConflict)
	StatusContinue_ = MakeInt(http.StatusContinue)
	StatusCreated_ = MakeInt(http.StatusCreated)
	StatusExpectationFailed_ = MakeInt(http.StatusExpectationFailed)
	StatusFailedDependency_ = MakeInt(http.StatusFailedDependency)
	StatusForbidden_ = MakeInt(http.StatusForbidden)
	StatusFound_ = MakeInt(http.StatusFound)
	StatusGatewayTimeout_ = MakeInt(http.StatusGatewayTimeout)
	StatusGone_ = MakeInt(http.StatusGone)
	StatusHTTPVersionNotSupported_ = MakeInt(http.StatusHTTPVersionNotSupported)
	StatusIMUsed_ = MakeInt(http.StatusIMUsed)
	StatusInsufficientStorage_ = MakeInt(http.StatusInsufficientStorage)
	StatusInternalServerError_ = MakeInt(http.StatusInternalServerError)
	StatusLengthRequired_ = MakeInt(http.StatusLengthRequired)
	StatusLocked_ = MakeInt(http.StatusLocked)
	StatusLoopDetected_ = MakeInt(http.StatusLoopDetected)
	StatusMethodNotAllowed_ = MakeInt(http.StatusMethodNotAllowed)
	StatusMisdirectedRequest_ = MakeInt(http.StatusMisdirectedRequest)
	StatusMovedPermanently_ = MakeInt(http.StatusMovedPermanently)
	StatusMultiStatus_ = MakeInt(http.StatusMultiStatus)
	StatusMultipleChoices_ = MakeInt(http.StatusMultipleChoices)
	StatusNetworkAuthenticationRequired_ = MakeInt(http.StatusNetworkAuthenticationRequired)
	StatusNoContent_ = MakeInt(http.StatusNoContent)
	StatusNonAuthoritativeInfo_ = MakeInt(http.StatusNonAuthoritativeInfo)
	StatusNotAcceptable_ = MakeInt(http.StatusNotAcceptable)
	StatusNotExtended_ = MakeInt(http.StatusNotExtended)
	StatusNotFound_ = MakeInt(http.StatusNotFound)
	StatusNotImplemented_ = MakeInt(http.StatusNotImplemented)
	StatusNotModified_ = MakeInt(http.StatusNotModified)
	StatusOK_ = MakeInt(http.StatusOK)
	StatusPartialContent_ = MakeInt(http.StatusPartialContent)
	StatusPaymentRequired_ = MakeInt(http.StatusPaymentRequired)
	StatusPermanentRedirect_ = MakeInt(http.StatusPermanentRedirect)
	StatusPreconditionFailed_ = MakeInt(http.StatusPreconditionFailed)
	StatusPreconditionRequired_ = MakeInt(http.StatusPreconditionRequired)
	StatusProcessing_ = MakeInt(http.StatusProcessing)
	StatusProxyAuthRequired_ = MakeInt(http.StatusProxyAuthRequired)
	StatusRequestEntityTooLarge_ = MakeInt(http.StatusRequestEntityTooLarge)
	StatusRequestHeaderFieldsTooLarge_ = MakeInt(http.StatusRequestHeaderFieldsTooLarge)
	StatusRequestTimeout_ = MakeInt(http.StatusRequestTimeout)
	StatusRequestURITooLong_ = MakeInt(http.StatusRequestURITooLong)
	StatusRequestedRangeNotSatisfiable_ = MakeInt(http.StatusRequestedRangeNotSatisfiable)
	StatusResetContent_ = MakeInt(http.StatusResetContent)
	StatusSeeOther_ = MakeInt(http.StatusSeeOther)
	StatusServiceUnavailable_ = MakeInt(http.StatusServiceUnavailable)
	StatusSwitchingProtocols_ = MakeInt(http.StatusSwitchingProtocols)
	StatusTeapot_ = MakeInt(http.StatusTeapot)
	StatusTemporaryRedirect_ = MakeInt(http.StatusTemporaryRedirect)
	StatusTooEarly_ = MakeInt(http.StatusTooEarly)
	StatusTooManyRequests_ = MakeInt(http.StatusTooManyRequests)
	StatusUnauthorized_ = MakeInt(http.StatusUnauthorized)
	StatusUnavailableForLegalReasons_ = MakeInt(http.StatusUnavailableForLegalReasons)
	StatusUnprocessableEntity_ = MakeInt(http.StatusUnprocessableEntity)
	StatusUnsupportedMediaType_ = MakeInt(http.StatusUnsupportedMediaType)
	StatusUpgradeRequired_ = MakeInt(http.StatusUpgradeRequired)
	StatusUseProxy_ = MakeInt(http.StatusUseProxy)
	StatusVariantAlsoNegotiates_ = MakeInt(http.StatusVariantAlsoNegotiates)
	TimeFormat_ = MakeString(http.TimeFormat)
	TrailerPrefix_ = MakeString(http.TrailerPrefix)
	CanonicalHeaderKey_ = __CanonicalHeaderKey_
	ConnState_ = __ConnState_
	Dir_ = __Dir_
	FileServer_ = __FileServer_
	Get_ = __Get_
	Head_ = __Head_
	ListenAndServe_ = __ListenAndServe_
	ListenAndServeTLS_ = __ListenAndServeTLS_
	NewFileTransport_ = __NewFileTransport_
	NewServeMux_ = __NewServeMux_
	NotFoundHandler_ = __NotFoundHandler_
	ParseHTTPVersion_ = __ParseHTTPVersion_
	ParseTime_ = __ParseTime_
	ProtocolError_ = __ProtocolError_
	ProxyFromEnvironment_ = __ProxyFromEnvironment_
	RedirectHandler_ = __RedirectHandler_
	SameSite_ = __SameSite_
	ServeMux_ = __ServeMux_
	StatusText_ = __StatusText_
	StripPrefix_ = __StripPrefix_

	initNative()

	httpNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/http package.

Package http provides HTTP client and server implementations.

Get, Head, Post, and PostForm make HTTP (or HTTPS) requests:

	resp, err := http.Get("http://example.com/")
	...
	resp, err := http.Post("http://example.com/upload", "image/jpeg", &buf)
	...
	resp, err := http.PostForm("http://example.com/form",
		url.Values{"key": {"Value"}, "id": {"123"}})

The client must close the response body when finished with it:

	resp, err := http.Get("http://example.com/")
	if err != nil {
		// handle error
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	// ...

For control over HTTP client headers, redirect policy, and other
settings, create a Client:

	client := &http.Client{
		CheckRedirect: redirectPolicyFunc,
	}

	resp, err := client.Get("http://example.com")
	// ...

	req, err := http.NewRequest("GET", "http://example.com", nil)
	// ...
	req.Header.Add("If-None-Match", ` + "`" + `W/"wyzzy"` + "`" + `)
	resp, err := client.Do(req)
	// ...

For control over proxies, TLS configuration, keep-alives,
compression, and other settings, create a Transport:

	tr := &http.Transport{
		MaxIdleConns:       10,
		IdleConnTimeout:    30 * time.Second,
		DisableCompression: true,
	}
	client := &http.Client{Transport: tr}
	resp, err := client.Get("https://example.com")

Clients and Transports are safe for concurrent use by multiple
goroutines and for efficiency should only be created once and re-used.

ListenAndServe starts an HTTP server with a given address and handler.
The handler is usually nil, which means to use DefaultServeMux.
Handle and HandleFunc add handlers to DefaultServeMux:

	http.Handle("/foo", fooHandler)

	http.HandleFunc("/bar", func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello, %q", html.EscapeString(r.URL.Path))
	})

	log.Fatal(http.ListenAndServe(":8080", nil))

More control over the server's behavior is available by creating a
custom Server:

	s := &http.Server{
		Addr:           ":8080",
		Handler:        myHandler,
		ReadTimeout:    10 * time.Second,
		WriteTimeout:   10 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}
	log.Fatal(s.ListenAndServe())

Starting with Go 1.6, the http package has transparent support for the
HTTP/2 protocol when using HTTPS. Programs that must disable HTTP/2
can do so by setting Transport.TLSNextProto (for clients) or
Server.TLSNextProto (for servers) to a non-nil, empty
map. Alternatively, the following GODEBUG environment variables are
currently supported:

	GODEBUG=http2client=0  # disable HTTP/2 client support
	GODEBUG=http2server=0  # disable HTTP/2 server support
	GODEBUG=http2debug=1   # enable verbose HTTP/2 debug logs
	GODEBUG=http2debug=2   # ... even more verbose, with frame dumps

The GODEBUG variables are not covered by Go's API compatibility
promise. Please report any issues before disabling HTTP/2
support: https://golang.org/s/http2bug

The http package's Transport and Server both automatically enable
HTTP/2 support for simple configurations. To enable HTTP/2 for more
complex configurations, to use lower-level HTTP/2 features, or to use
a newer version of Go's http2 package, import "golang.org/x/net/http2"
directly and use its ConfigureTransport and/or ConfigureServer
functions. Manually configuring HTTP/2 via the golang.org/x/net/http2
package takes precedence over the net/http package's built-in HTTP/2
support.
`, "1.0"))

	httpNamespace.InternVar("DefaultClient", DefaultClient_,
		MakeMeta(
			nil,
			`DefaultClient is the default Client and is used by Get, Head, and Post.
`, "1.0"))

	httpNamespace.InternVar("DefaultMaxHeaderBytes", DefaultMaxHeaderBytes_,
		MakeMeta(
			nil,
			`1 MB
`, "1.0"))

	httpNamespace.InternVar("DefaultMaxIdleConnsPerHost", DefaultMaxIdleConnsPerHost_,
		MakeMeta(
			nil,
			`DefaultMaxIdleConnsPerHost is the default value of Transport's
MaxIdleConnsPerHost.
`, "1.0"))

	httpNamespace.InternVar("DefaultServeMux", DefaultServeMux_,
		MakeMeta(
			nil,
			`DefaultServeMux is the default ServeMux used by Serve.
`, "1.0"))

	httpNamespace.InternVar("DefaultTransport", DefaultTransport_,
		MakeMeta(
			nil,
			`DefaultTransport is the default implementation of Transport and is
used by DefaultClient. It establishes network connections as needed
and caches them for reuse by subsequent calls. It uses HTTP proxies
as directed by the $HTTP_PROXY and $NO_PROXY (or $http_proxy and
$no_proxy) environment variables.
`, "1.0"))

	httpNamespace.InternVar("ErrAbortHandler", ErrAbortHandler_,
		MakeMeta(
			nil,
			`ErrAbortHandler is a sentinel panic value to abort a handler.
While any panic from ServeHTTP aborts the response to the client,
panicking with ErrAbortHandler also suppresses logging of a stack
trace to the server's error log.
`, "1.0"))

	httpNamespace.InternVar("ErrBodyNotAllowed", ErrBodyNotAllowed_,
		MakeMeta(
			nil,
			`ErrBodyNotAllowed is returned by ResponseWriter.Write calls
when the HTTP method or response code does not permit a
body.
`, "1.0"))

	httpNamespace.InternVar("ErrBodyReadAfterClose", ErrBodyReadAfterClose_,
		MakeMeta(
			nil,
			`ErrBodyReadAfterClose is returned when reading a Request or Response
Body after the body has been closed. This typically happens when the body is
read after an HTTP Handler calls WriteHeader or Write on its
ResponseWriter.
`, "1.0"))

	httpNamespace.InternVar("ErrContentLength", ErrContentLength_,
		MakeMeta(
			nil,
			`ErrContentLength is returned by ResponseWriter.Write calls
when a Handler set a Content-Length response header with a
declared size and then attempted to write more bytes than
declared.
`, "1.0"))

	httpNamespace.InternVar("ErrHandlerTimeout", ErrHandlerTimeout_,
		MakeMeta(
			nil,
			`ErrHandlerTimeout is returned on ResponseWriter Write calls
in handlers which have timed out.
`, "1.0"))

	httpNamespace.InternVar("ErrHeaderTooLong", ErrHeaderTooLong_,
		MakeMeta(
			nil,
			`Deprecated: ErrHeaderTooLong is no longer returned by
anything in the net/http package. Callers should not
compare errors against this variable.
`, "1.0"))

	httpNamespace.InternVar("ErrHijacked", ErrHijacked_,
		MakeMeta(
			nil,
			`ErrHijacked is returned by ResponseWriter.Write calls when
the underlying connection has been hijacked using the
Hijacker interface. A zero-byte write on a hijacked
connection will return ErrHijacked without any other side
effects.
`, "1.0"))

	httpNamespace.InternVar("ErrLineTooLong", ErrLineTooLong_,
		MakeMeta(
			nil,
			`ErrLineTooLong is returned when reading request or response bodies
with malformed chunked encoding.
`, "1.0"))

	httpNamespace.InternVar("ErrMissingBoundary", ErrMissingBoundary_,
		MakeMeta(
			nil,
			`ErrMissingBoundary is returned by Request.MultipartReader when the
request's Content-Type does not include a "boundary" parameter.
`, "1.0"))

	httpNamespace.InternVar("ErrMissingContentLength", ErrMissingContentLength_,
		MakeMeta(
			nil,
			`Deprecated: ErrMissingContentLength is no longer returned by
anything in the net/http package. Callers should not
compare errors against this variable.
`, "1.0"))

	httpNamespace.InternVar("ErrMissingFile", ErrMissingFile_,
		MakeMeta(
			nil,
			`ErrMissingFile is returned by FormFile when the provided file field name
is either not present in the request or not a file field.
`, "1.0"))

	httpNamespace.InternVar("ErrNoCookie", ErrNoCookie_,
		MakeMeta(
			nil,
			`ErrNoCookie is returned by Request's Cookie method when a cookie is not found.
`, "1.0"))

	httpNamespace.InternVar("ErrNoLocation", ErrNoLocation_,
		MakeMeta(
			nil,
			`ErrNoLocation is returned by Response's Location method
when no Location header is present.
`, "1.0"))

	httpNamespace.InternVar("ErrNotMultipart", ErrNotMultipart_,
		MakeMeta(
			nil,
			`ErrNotMultipart is returned by Request.MultipartReader when the
request's Content-Type is not multipart/form-data.
`, "1.0"))

	httpNamespace.InternVar("ErrNotSupported", ErrNotSupported_,
		MakeMeta(
			nil,
			`ErrNotSupported is returned by the Push method of Pusher
implementations to indicate that HTTP/2 Push support is not
available.
`, "1.0"))

	httpNamespace.InternVar("ErrServerClosed", ErrServerClosed_,
		MakeMeta(
			nil,
			`ErrServerClosed is returned by the Server's Serve, ServeTLS, ListenAndServe,
and ListenAndServeTLS methods after a call to Shutdown or Close.
`, "1.0"))

	httpNamespace.InternVar("ErrShortBody", ErrShortBody_,
		MakeMeta(
			nil,
			`Deprecated: ErrShortBody is no longer returned by
anything in the net/http package. Callers should not
compare errors against this variable.
`, "1.0"))

	httpNamespace.InternVar("ErrSkipAltProtocol", ErrSkipAltProtocol_,
		MakeMeta(
			nil,
			`ErrSkipAltProtocol is a sentinel error value defined by Transport.RegisterProtocol.
`, "1.0"))

	httpNamespace.InternVar("ErrUnexpectedTrailer", ErrUnexpectedTrailer_,
		MakeMeta(
			nil,
			`Deprecated: ErrUnexpectedTrailer is no longer returned by
anything in the net/http package. Callers should not
compare errors against this variable.
`, "1.0"))

	httpNamespace.InternVar("ErrUseLastResponse", ErrUseLastResponse_,
		MakeMeta(
			nil,
			`ErrUseLastResponse can be returned by Client.CheckRedirect hooks to
control how redirects are processed. If returned, the next request
is not sent and the most recent response is returned with its body
unclosed.
`, "1.0"))

	httpNamespace.InternVar("ErrWriteAfterFlush", ErrWriteAfterFlush_,
		MakeMeta(
			nil,
			`Deprecated: ErrWriteAfterFlush is no longer returned by
anything in the net/http package. Callers should not
compare errors against this variable.
`, "1.0"))

	httpNamespace.InternVar("LocalAddrContextKey", LocalAddrContextKey_,
		MakeMeta(
			nil,
			`LocalAddrContextKey is a context key. It can be used in
HTTP handlers with context.WithValue to access the local
address the connection arrived on.
The associated value will be of type net.Addr.
`, "1.0"))

	httpNamespace.InternVar("MethodConnect", MethodConnect_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodDelete", MethodDelete_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodGet", MethodGet_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodHead", MethodHead_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodOptions", MethodOptions_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodPatch", MethodPatch_,
		MakeMeta(
			nil,
			`RFC 5789
`, "1.0"))

	httpNamespace.InternVar("MethodPost", MethodPost_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodPut", MethodPut_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("MethodTrace", MethodTrace_,
		MakeMeta(
			nil,
			`Common HTTP methods.

Unless otherwise noted, these are defined in RFC 7231 section 4.3.
`, "1.0"))

	httpNamespace.InternVar("NoBody", NoBody_,
		MakeMeta(
			nil,
			`NoBody is an io.ReadCloser with no bytes. Read always returns EOF
and Close always returns nil. It can be used in an outgoing client
request to explicitly signal that a request has zero bytes.
An alternative, however, is to simply set Request.Body to nil.
`, "1.0"))

	httpNamespace.InternVar("SameSiteDefaultMode", SameSiteDefaultMode_,
		MakeMeta(
			nil,
			``, "1.0"))

	httpNamespace.InternVar("SameSiteLaxMode", SameSiteLaxMode_,
		MakeMeta(
			nil,
			``, "1.0"))

	httpNamespace.InternVar("SameSiteStrictMode", SameSiteStrictMode_,
		MakeMeta(
			nil,
			``, "1.0"))

	httpNamespace.InternVar("ServerContextKey", ServerContextKey_,
		MakeMeta(
			nil,
			`ServerContextKey is a context key. It can be used in HTTP
handlers with context.WithValue to access the server that
started the handler. The associated value will be of
type *Server.
`, "1.0"))

	httpNamespace.InternVar("StateActive", StateActive_,
		MakeMeta(
			nil,
			`StateActive represents a connection that has read 1 or more
bytes of a request. The Server.ConnState hook for
StateActive fires before the request has entered a handler
and doesn't fire again until the request has been
handled. After the request is handled, the state
transitions to StateClosed, StateHijacked, or StateIdle.
For HTTP/2, StateActive fires on the transition from zero
to one active request, and only transitions away once all
active requests are complete. That means that ConnState
cannot be used to do per-request work; ConnState only notes
the overall state of the connection.
`, "1.0"))

	httpNamespace.InternVar("StateClosed", StateClosed_,
		MakeMeta(
			nil,
			`StateClosed represents a closed connection.
This is a terminal state. Hijacked connections do not
transition to StateClosed.
`, "1.0"))

	httpNamespace.InternVar("StateHijacked", StateHijacked_,
		MakeMeta(
			nil,
			`StateHijacked represents a hijacked connection.
This is a terminal state. It does not transition to StateClosed.
`, "1.0"))

	httpNamespace.InternVar("StateIdle", StateIdle_,
		MakeMeta(
			nil,
			`StateIdle represents a connection that has finished
handling a request and is in the keep-alive state, waiting
for a new request. Connections transition from StateIdle
to either StateActive or StateClosed.
`, "1.0"))

	httpNamespace.InternVar("StateNew", StateNew_,
		MakeMeta(
			nil,
			`StateNew represents a new connection that is expected to
send a request immediately. Connections begin at this
state and then transition to either StateActive or
StateClosed.
`, "1.0"))

	httpNamespace.InternVar("StatusAccepted", StatusAccepted_,
		MakeMeta(
			nil,
			`RFC 7231, 6.3.3
`, "1.0"))

	httpNamespace.InternVar("StatusAlreadyReported", StatusAlreadyReported_,
		MakeMeta(
			nil,
			`RFC 5842, 7.1
`, "1.0"))

	httpNamespace.InternVar("StatusBadGateway", StatusBadGateway_,
		MakeMeta(
			nil,
			`RFC 7231, 6.6.3
`, "1.0"))

	httpNamespace.InternVar("StatusBadRequest", StatusBadRequest_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.1
`, "1.0"))

	httpNamespace.InternVar("StatusConflict", StatusConflict_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.8
`, "1.0"))

	httpNamespace.InternVar("StatusContinue", StatusContinue_,
		MakeMeta(
			nil,
			`RFC 7231, 6.2.1
`, "1.0"))

	httpNamespace.InternVar("StatusCreated", StatusCreated_,
		MakeMeta(
			nil,
			`RFC 7231, 6.3.2
`, "1.0"))

	httpNamespace.InternVar("StatusExpectationFailed", StatusExpectationFailed_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.14
`, "1.0"))

	httpNamespace.InternVar("StatusFailedDependency", StatusFailedDependency_,
		MakeMeta(
			nil,
			`RFC 4918, 11.4
`, "1.0"))

	httpNamespace.InternVar("StatusForbidden", StatusForbidden_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.3
`, "1.0"))

	httpNamespace.InternVar("StatusFound", StatusFound_,
		MakeMeta(
			nil,
			`RFC 7231, 6.4.3
`, "1.0"))

	httpNamespace.InternVar("StatusGatewayTimeout", StatusGatewayTimeout_,
		MakeMeta(
			nil,
			`RFC 7231, 6.6.5
`, "1.0"))

	httpNamespace.InternVar("StatusGone", StatusGone_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.9
`, "1.0"))

	httpNamespace.InternVar("StatusHTTPVersionNotSupported", StatusHTTPVersionNotSupported_,
		MakeMeta(
			nil,
			`RFC 7231, 6.6.6
`, "1.0"))

	httpNamespace.InternVar("StatusIMUsed", StatusIMUsed_,
		MakeMeta(
			nil,
			`RFC 3229, 10.4.1
`, "1.0"))

	httpNamespace.InternVar("StatusInsufficientStorage", StatusInsufficientStorage_,
		MakeMeta(
			nil,
			`RFC 4918, 11.5
`, "1.0"))

	httpNamespace.InternVar("StatusInternalServerError", StatusInternalServerError_,
		MakeMeta(
			nil,
			`RFC 7231, 6.6.1
`, "1.0"))

	httpNamespace.InternVar("StatusLengthRequired", StatusLengthRequired_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.10
`, "1.0"))

	httpNamespace.InternVar("StatusLocked", StatusLocked_,
		MakeMeta(
			nil,
			`RFC 4918, 11.3
`, "1.0"))

	httpNamespace.InternVar("StatusLoopDetected", StatusLoopDetected_,
		MakeMeta(
			nil,
			`RFC 5842, 7.2
`, "1.0"))

	httpNamespace.InternVar("StatusMethodNotAllowed", StatusMethodNotAllowed_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.5
`, "1.0"))

	httpNamespace.InternVar("StatusMisdirectedRequest", StatusMisdirectedRequest_,
		MakeMeta(
			nil,
			`RFC 7540, 9.1.2
`, "1.0"))

	httpNamespace.InternVar("StatusMovedPermanently", StatusMovedPermanently_,
		MakeMeta(
			nil,
			`RFC 7231, 6.4.2
`, "1.0"))

	httpNamespace.InternVar("StatusMultiStatus", StatusMultiStatus_,
		MakeMeta(
			nil,
			`RFC 4918, 11.1
`, "1.0"))

	httpNamespace.InternVar("StatusMultipleChoices", StatusMultipleChoices_,
		MakeMeta(
			nil,
			`RFC 7231, 6.4.1
`, "1.0"))

	httpNamespace.InternVar("StatusNetworkAuthenticationRequired", StatusNetworkAuthenticationRequired_,
		MakeMeta(
			nil,
			`RFC 6585, 6
`, "1.0"))

	httpNamespace.InternVar("StatusNoContent", StatusNoContent_,
		MakeMeta(
			nil,
			`RFC 7231, 6.3.5
`, "1.0"))

	httpNamespace.InternVar("StatusNonAuthoritativeInfo", StatusNonAuthoritativeInfo_,
		MakeMeta(
			nil,
			`RFC 7231, 6.3.4
`, "1.0"))

	httpNamespace.InternVar("StatusNotAcceptable", StatusNotAcceptable_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.6
`, "1.0"))

	httpNamespace.InternVar("StatusNotExtended", StatusNotExtended_,
		MakeMeta(
			nil,
			`RFC 2774, 7
`, "1.0"))

	httpNamespace.InternVar("StatusNotFound", StatusNotFound_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.4
`, "1.0"))

	httpNamespace.InternVar("StatusNotImplemented", StatusNotImplemented_,
		MakeMeta(
			nil,
			`RFC 7231, 6.6.2
`, "1.0"))

	httpNamespace.InternVar("StatusNotModified", StatusNotModified_,
		MakeMeta(
			nil,
			`RFC 7232, 4.1
`, "1.0"))

	httpNamespace.InternVar("StatusOK", StatusOK_,
		MakeMeta(
			nil,
			`RFC 7231, 6.3.1
`, "1.0"))

	httpNamespace.InternVar("StatusPartialContent", StatusPartialContent_,
		MakeMeta(
			nil,
			`RFC 7233, 4.1
`, "1.0"))

	httpNamespace.InternVar("StatusPaymentRequired", StatusPaymentRequired_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.2
`, "1.0"))

	httpNamespace.InternVar("StatusPermanentRedirect", StatusPermanentRedirect_,
		MakeMeta(
			nil,
			`RFC 7538, 3
`, "1.0"))

	httpNamespace.InternVar("StatusPreconditionFailed", StatusPreconditionFailed_,
		MakeMeta(
			nil,
			`RFC 7232, 4.2
`, "1.0"))

	httpNamespace.InternVar("StatusPreconditionRequired", StatusPreconditionRequired_,
		MakeMeta(
			nil,
			`RFC 6585, 3
`, "1.0"))

	httpNamespace.InternVar("StatusProcessing", StatusProcessing_,
		MakeMeta(
			nil,
			`RFC 2518, 10.1
`, "1.0"))

	httpNamespace.InternVar("StatusProxyAuthRequired", StatusProxyAuthRequired_,
		MakeMeta(
			nil,
			`RFC 7235, 3.2
`, "1.0"))

	httpNamespace.InternVar("StatusRequestEntityTooLarge", StatusRequestEntityTooLarge_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.11
`, "1.0"))

	httpNamespace.InternVar("StatusRequestHeaderFieldsTooLarge", StatusRequestHeaderFieldsTooLarge_,
		MakeMeta(
			nil,
			`RFC 6585, 5
`, "1.0"))

	httpNamespace.InternVar("StatusRequestTimeout", StatusRequestTimeout_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.7
`, "1.0"))

	httpNamespace.InternVar("StatusRequestURITooLong", StatusRequestURITooLong_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.12
`, "1.0"))

	httpNamespace.InternVar("StatusRequestedRangeNotSatisfiable", StatusRequestedRangeNotSatisfiable_,
		MakeMeta(
			nil,
			`RFC 7233, 4.4
`, "1.0"))

	httpNamespace.InternVar("StatusResetContent", StatusResetContent_,
		MakeMeta(
			nil,
			`RFC 7231, 6.3.6
`, "1.0"))

	httpNamespace.InternVar("StatusSeeOther", StatusSeeOther_,
		MakeMeta(
			nil,
			`RFC 7231, 6.4.4
`, "1.0"))

	httpNamespace.InternVar("StatusServiceUnavailable", StatusServiceUnavailable_,
		MakeMeta(
			nil,
			`RFC 7231, 6.6.4
`, "1.0"))

	httpNamespace.InternVar("StatusSwitchingProtocols", StatusSwitchingProtocols_,
		MakeMeta(
			nil,
			`RFC 7231, 6.2.2
`, "1.0"))

	httpNamespace.InternVar("StatusTeapot", StatusTeapot_,
		MakeMeta(
			nil,
			`RFC 7168, 2.3.3
`, "1.0"))

	httpNamespace.InternVar("StatusTemporaryRedirect", StatusTemporaryRedirect_,
		MakeMeta(
			nil,
			`RFC 7231, 6.4.7
`, "1.0"))

	httpNamespace.InternVar("StatusTooEarly", StatusTooEarly_,
		MakeMeta(
			nil,
			`RFC 8470, 5.2.
`, "1.0"))

	httpNamespace.InternVar("StatusTooManyRequests", StatusTooManyRequests_,
		MakeMeta(
			nil,
			`RFC 6585, 4
`, "1.0"))

	httpNamespace.InternVar("StatusUnauthorized", StatusUnauthorized_,
		MakeMeta(
			nil,
			`RFC 7235, 3.1
`, "1.0"))

	httpNamespace.InternVar("StatusUnavailableForLegalReasons", StatusUnavailableForLegalReasons_,
		MakeMeta(
			nil,
			`RFC 7725, 3
`, "1.0"))

	httpNamespace.InternVar("StatusUnprocessableEntity", StatusUnprocessableEntity_,
		MakeMeta(
			nil,
			`RFC 4918, 11.2
`, "1.0"))

	httpNamespace.InternVar("StatusUnsupportedMediaType", StatusUnsupportedMediaType_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.13
`, "1.0"))

	httpNamespace.InternVar("StatusUpgradeRequired", StatusUpgradeRequired_,
		MakeMeta(
			nil,
			`RFC 7231, 6.5.15
`, "1.0"))

	httpNamespace.InternVar("StatusUseProxy", StatusUseProxy_,
		MakeMeta(
			nil,
			`RFC 7231, 6.4.5
`, "1.0"))

	httpNamespace.InternVar("StatusVariantAlsoNegotiates", StatusVariantAlsoNegotiates_,
		MakeMeta(
			nil,
			`RFC 2295, 8.1
`, "1.0"))

	httpNamespace.InternVar("TimeFormat", TimeFormat_,
		MakeMeta(
			nil,
			`TimeFormat is the time format to use when generating times in HTTP
headers. It is like time.RFC1123 but hard-codes GMT as the time
zone. The time being formatted must be in UTC for Format to
generate the correct format.

For parsing this time format, see ParseTime.
`, "1.0"))

	httpNamespace.InternVar("TrailerPrefix", TrailerPrefix_,
		MakeMeta(
			nil,
			`TrailerPrefix is a magic prefix for ResponseWriter.Header map keys
that, if present, signals that the map entry is actually for
the response trailers, and not the response headers. The prefix
is stripped after the ServeHTTP call finishes and the values are
sent in the trailers.

This mechanism is intended only for trailers that are not known
prior to the headers being written. If the set of trailers is fixed
or known before the header is written, the normal Go trailers mechanism
is preferred:
   https://golang.org/pkg/net/http/#ResponseWriter
   https://golang.org/pkg/net/http/#example_ResponseWriter_trailers
`, "1.0"))

	httpNamespace.InternVar("CanonicalHeaderKey", CanonicalHeaderKey_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__s"))),
			`CanonicalHeaderKey returns the canonical format of the
header key s. The canonicalization converts the first
letter and any letter following a hyphen to upper case;
the rest are converted to lowercase. For example, the
canonical key for "accept-encoding" is "Accept-Encoding".
If s contains a space or invalid header field bytes, it is
returned without modifications.

Go input arguments: (s string)

Go return type: string

Joker input arguments: [^String s]

Joker return type: String`, "1.0"))

	httpNamespace.InternVar("ConnState.", ConnState_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for http.ConnState`, "1.0"))

	httpNamespace.InternVar("Dir.", Dir_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for http.Dir`, "1.0"))

	httpNamespace.InternVar("FileServer", FileServer_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__root"))),
			`FileServer returns a handler that serves HTTP requests
with the contents of the file system rooted at root.

To use the operating system's file system implementation,
use http.Dir:

    http.Handle("/", http.FileServer(http.Dir("/tmp")))

As a special case, the returned file server redirects any request
ending in "/index.html" to the same path, without the final
"index.html".

Go input arguments: (root FileSystem)

Go return type: Handler

Joker input arguments: [^go.std.net.http/FileSystem root]

Joker return type: go.std.net.http/Handler`, "1.0"))

	httpNamespace.InternVar("Get", Get_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__url"))),
			`Get issues a GET to the specified URL. If the response is one of
the following redirect codes, Get follows the redirect, up to a
maximum of 10 redirects:

   301 (Moved Permanently)
   302 (Found)
   303 (See Other)
   307 (Temporary Redirect)
   308 (Permanent Redirect)

An error is returned if there were too many redirects or if there
was an HTTP protocol error. A non-2xx response doesn't cause an
error. Any returned error will be of type *url.Error. The url.Error
value's Timeout method will report true if request timed out or was
canceled.

When err is nil, resp always contains a non-nil resp.Body.
Caller should close resp.Body when done reading from it.

Get is a wrapper around DefaultClient.Get.

To make a request with custom headers, use NewRequest and
DefaultClient.Do.

Go input arguments: (url string)

Go return type: (resp *Response, err error)

Joker input arguments: [^String url]

Joker return type: [(atom-of go.std.net.http/Response) Error]`, "1.0"))

	httpNamespace.InternVar("Head", Head_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__url"))),
			`Head issues a HEAD to the specified URL. If the response is one of
the following redirect codes, Head follows the redirect, up to a
maximum of 10 redirects:

   301 (Moved Permanently)
   302 (Found)
   303 (See Other)
   307 (Temporary Redirect)
   308 (Permanent Redirect)

Head is a wrapper around DefaultClient.Head

Go input arguments: (url string)

Go return type: (resp *Response, err error)

Joker input arguments: [^String url]

Joker return type: [(atom-of go.std.net.http/Response) Error]`, "1.0"))

	httpNamespace.InternVar("ListenAndServe", ListenAndServe_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__addr"), MakeSymbol("__handler"))),
			`ListenAndServe listens on the TCP network address addr and then calls
Serve with handler to handle requests on incoming connections.
Accepted connections are configured to enable TCP keep-alives.

The handler is typically nil, in which case the DefaultServeMux is used.

ListenAndServe always returns a non-nil error.

Go input arguments: (addr string, handler Handler)

Go return type: error

Joker input arguments: [^String addr, ^go.std.net.http/Handler handler]

Joker return type: Error`, "1.0"))

	httpNamespace.InternVar("ListenAndServeTLS", ListenAndServeTLS_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__addr"), MakeSymbol("__certFile"), MakeSymbol("__keyFile"), MakeSymbol("__handler"))),
			`ListenAndServeTLS acts identically to ListenAndServe, except that it
expects HTTPS connections. Additionally, files containing a certificate and
matching private key for the server must be provided. If the certificate
is signed by a certificate authority, the certFile should be the concatenation
of the server's certificate, any intermediates, and the CA's certificate.

Go input arguments: (addr string, certFile string, keyFile string, handler Handler)

Go return type: error

Joker input arguments: [^String addr, ^String certFile, ^String keyFile, ^go.std.net.http/Handler handler]

Joker return type: Error`, "1.0"))

	httpNamespace.InternVar("NewFileTransport", NewFileTransport_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__fs"))),
			`NewFileTransport returns a new RoundTripper, serving the provided
FileSystem. The returned RoundTripper ignores the URL host in its
incoming requests, as well as most other properties of the
request.

The typical use case for NewFileTransport is to register the "file"
protocol with a Transport, as in:

  t := &http.Transport{}
  t.RegisterProtocol("file", http.NewFileTransport(http.Dir("/")))
  c := &http.Client{Transport: t}
  res, err := c.Get("file:///etc/passwd")
  ...

Go input arguments: (fs FileSystem)

Go return type: RoundTripper

Joker input arguments: [^go.std.net.http/FileSystem fs]

Joker return type: go.std.net.http/RoundTripper`, "1.0"))

	httpNamespace.InternVar("NewServeMux", NewServeMux_,
		MakeMeta(
			NewListFrom(NewVectorFrom()),
			`NewServeMux allocates and returns a new ServeMux.

Go return type: *ServeMux

Joker input arguments: []

Joker return type: (atom-of go.std.net.http/ServeMux)`, "1.0"))

	httpNamespace.InternVar("NotFoundHandler", NotFoundHandler_,
		MakeMeta(
			NewListFrom(NewVectorFrom()),
			`NotFoundHandler returns a simple request handler
that replies to each request with a ` + "`" + `` + "`" + `404 page not found'' reply.

Go return type: Handler

Joker input arguments: []

Joker return type: go.std.net.http/Handler`, "1.0"))

	httpNamespace.InternVar("ParseHTTPVersion", ParseHTTPVersion_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__vers"))),
			`ParseHTTPVersion parses a HTTP version string.
"HTTP/1.0" returns (1, 0, true).

Go input arguments: (vers string)

Go return type: (major int, minor int, ok bool)

Joker input arguments: [^String vers]

Joker return type: [Int Int Boolean]`, "1.0"))

	httpNamespace.InternVar("ParseTime", ParseTime_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__text"))),
			`ParseTime parses a time header (such as the Date: header),
trying each of the three formats allowed by HTTP/1.1:
TimeFormat, time.RFC850, and time.ANSIC.

Go input arguments: (text string)

Go return type: (t time.Time, err error)

Joker input arguments: [^String text]

Joker return type: [go.std.time/Time Error]`, "1.0"))

	httpNamespace.InternVar("ProtocolError.", ProtocolError_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for http.ProtocolError`, "1.0"))

	httpNamespace.InternVar("ProxyFromEnvironment", ProxyFromEnvironment_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__req"))),
			`ProxyFromEnvironment returns the URL of the proxy to use for a
given request, as indicated by the environment variables
HTTP_PROXY, HTTPS_PROXY and NO_PROXY (or the lowercase versions
thereof). HTTPS_PROXY takes precedence over HTTP_PROXY for https
requests.

The environment values may be either a complete URL or a
"host[:port]", in which case the "http" scheme is assumed.
An error is returned if the value is a different form.

A nil URL and nil error are returned if no proxy is defined in the
environment, or a proxy should not be used for the given request,
as defined by NO_PROXY.

As a special case, if req.URL.Host is "localhost" (with or without
a port number), then a nil URL and nil error will be returned.

Go input arguments: (req *Request)

Go return type: (*net/url.URL, error)

Joker input arguments: [^(atom-of go.std.net.http/Request) req]

Joker return type: [(atom-of go.std.net.url/URL) Error]`, "1.0"))

	httpNamespace.InternVar("RedirectHandler", RedirectHandler_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__url"), MakeSymbol("__code"))),
			`RedirectHandler returns a request handler that redirects
each request it receives to the given url using the given
status code.

The provided code should be in the 3xx range and is usually
StatusMovedPermanently, StatusFound or StatusSeeOther.

Go input arguments: (url string, code int)

Go return type: Handler

Joker input arguments: [^String url, ^Int code]

Joker return type: go.std.net.http/Handler`, "1.0"))

	httpNamespace.InternVar("SameSite.", SameSite_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for http.SameSite`, "1.0"))

	httpNamespace.InternVar("ServeMux.", ServeMux_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("_v"))),
			`Constructor for http.ServeMux`, "1.0"))

	httpNamespace.InternVar("StatusText", StatusText_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__code"))),
			`StatusText returns a text for the HTTP status code. It returns the empty
string if the code is unknown.

Go input arguments: (code int)

Go return type: string

Joker input arguments: [^Int code]

Joker return type: String`, "1.0"))

	httpNamespace.InternVar("StripPrefix", StripPrefix_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__prefix"), MakeSymbol("__h"))),
			`StripPrefix returns a handler that serves HTTP requests
by removing the given prefix from the request URL's Path
and invoking the handler h. StripPrefix handles a
request for a path that doesn't begin with prefix by
replying with an HTTP 404 not found error.

Go input arguments: (prefix string, h Handler)

Go return type: Handler

Joker input arguments: [^String prefix, ^go.std.net.http/Handler h]

Joker return type: go.std.net.http/Handler`, "1.0"))

}

func init() {
	httpNamespace.Lazy = Init
}
