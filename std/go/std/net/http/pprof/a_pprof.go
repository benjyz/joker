// This file is generated by generate-std.joke script. Do not edit manually!

package pprof

import (
	. "github.com/candid82/joker/core"
)

var pprofNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.http.pprof"))



var Handler_ Proc

func __Handler_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 1:
		__name := ExtractString(_args, 0)
		_res := __handler(__name)
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	Handler_ = __Handler_

	initNative()

	pprofNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/http/pprof package.

Package pprof serves via its HTTP server runtime profiling data
in the format expected by the pprof visualization tool.

The package is typically only imported for the side effect of
registering its HTTP handlers.
The handled paths all begin with /debug/pprof/.

To use pprof, link this package into your program:
	import _ "net/http/pprof"

If your application is not already running an http server, you
need to start one. Add "net/http" and "log" to your imports and
the following code to your main function:

	go func() {
		log.Println(http.ListenAndServe("localhost:6060", nil))
	}()

Then use the pprof tool to look at the heap profile:

	go tool pprof http://localhost:6060/debug/pprof/heap

Or to look at a 30-second CPU profile:

	go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30

Or to look at the goroutine blocking profile, after calling
runtime.SetBlockProfileRate in your program:

	go tool pprof http://localhost:6060/debug/pprof/block

Or to collect a 5-second execution trace:

	wget http://localhost:6060/debug/pprof/trace?seconds=5

Or to look at the holders of contended mutexes, after calling
runtime.SetMutexProfileFraction in your program:

	go tool pprof http://localhost:6060/debug/pprof/mutex

To view all available profiles, open http://localhost:6060/debug/pprof/
in your browser.

For a study of the facility in action, visit

	https://blog.golang.org/2011/06/profiling-go-programs.html
`, "1.0"))

	
	pprofNamespace.InternVar("Handler", Handler_,
		MakeMeta(
			NewListFrom(NewVectorFrom(MakeSymbol("__name"))),
			`Handler returns an HTTP handler that serves the named profile.

Go input arguments: (name string)

Go return type: net/http.Handler

Joker input arguments: [^String name]

Joker return type: go.std.net.http/Handler`, "1.0"))

}

func init() {
	pprofNamespace.Lazy = Init
}
