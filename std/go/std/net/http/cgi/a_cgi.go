// This file is generated by generate-std.joke script. Do not edit manually!

package cgi

import (
	. "github.com/candid82/joker/core"
)

var cgiNamespace = GLOBAL_ENV.EnsureNamespace(MakeSymbol("go.std.net.http.cgi"))



var Request_ Proc

func __Request_(_args []Object) Object {
	_c := len(_args)
	switch {
	case _c == 0:
		_res := __request()
		return _res

	default:
		PanicArity(_c)
	}
	return NIL
}

func Init() {

	Request_ = __Request_

	initNative()

	cgiNamespace.ResetMeta(MakeMeta(nil, `Provides a low-level interface to the net/http/cgi package.

Package cgi implements CGI (Common Gateway Interface) as specified
in RFC 3875.

Note that using CGI means starting a new process to handle each
request, which is typically less efficient than using a
long-running server. This package is intended primarily for
compatibility with existing systems.
`, "1.0"))

	
	cgiNamespace.InternVar("Request", Request_,
		MakeMeta(
			NewListFrom(NewVectorFrom()),
			`Request returns the HTTP request as represented in the current
environment. This assumes the current program is being run
by a web server in a CGI environment.
The returned Request's Body is populated, if applicable.

Go return type: (*net/http.Request, error)

Joker input arguments: []

Joker return type: [(atom-of go.std.net.http/Request) Error]`, "1.0"))

}

func init() {
	cgiNamespace.Lazy = Init
}
