// Auto-generated by gostd at 2019-09-17T13:14:28.216621211-04:00 by version 0.1, do not edit!!

package cgi

import (
	"fmt"
	. "github.com/candid82/joker/core"
	_cgi "net/http/cgi"
	"reflect"
)

func ExtractGoObjectHandler(args []Object, index int) *_cgi.Handler {
	a := args[index]
	switch o := a.(type) {
	case GoObject:
		switch r := o.O.(type) {
		case _cgi.Handler:
			return &r
		case *_cgi.Handler:
			return r
		}
	}
	panic(RT.NewArgTypeError(index, a, "GoObject[net/http/cgi.Handler]"))
}

// func _mapToHandler(o Map) *_cgi.Handler {
// 	return &_cgi.Handler{}
// }

// func _vectorToHandler(o *Vector) *_cgi.Handler {
// 	return &_cgi.Handler{
// 		Path: AssertString(o.Nth(0), "").S,
// 		Root: AssertString(o.Nth(1), "").S,
// 		Dir: AssertString(o.Nth(2), "").S,
// 		Env: ABEND048(codegen.go: no conversion from Clojure for []string (string)),
// 		InheritEnv: ABEND048(codegen.go: no conversion from Clojure for []string (string)),
// 		Logger: *ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 		Args: ABEND048(codegen.go: no conversion from Clojure for []string (string)),
// 		Stderr: ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 		PathLocationHandler: ABEND047(gotypes.go: unsupported type *ast.SelectorExpr),
// 	}
// }

// func _ConstructHandler(_v Object) *_cgi.Handler {
// 	switch _o := _v.(type) {
// 	case GoObject:
// 		switch _g := _o.O.(type) {
// 		case _cgi.Handler:
// 			return &_g
// 		case *_cgi.Handler:
// 			return _g
// 		}
// 	case *ArrayMap, *HashMap:
// 		return _mapToHandler(_o.(Map))
// 	case *Vector:
// 		return _vectorToHandler(_o)
// 	}
// 	panic(RT.NewArgTypeError(0, _v, "GoObject[cgi.Handler] or: Map or Vector"))
// }

func ExtractGo_go_std_net_http_cgi__Handler(rcvr, arg string, args *ArraySeq, n int) (res _cgi.Handler) {
	a := CheckGoNth(rcvr, "go.std.net.http.cgi/Handler", arg, args, n).O
	res, ok := a.(_cgi.Handler)
	if !ok {
		panic(RT.NewError(fmt.Sprintf("Argument %d passed to %s should be type GoObject[go.std.net.http.cgi/Handler], but is GoObject[%s]",
			n, rcvr, GoTypeToString(reflect.TypeOf(a)))))
	}
	return
}

func __request() Object {
	_res1, _res2 := _cgi.Request()
	_res := EmptyVector()
	_res = _res.Conjoin(MakeGoObject(_res1))
	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
	return _res
}

// func __requestFromMap(__params map[]) Object {
// 	_res1, _res2 := _cgi.RequestFromMap(__params)
// 	_res := EmptyVector()
// 	_res = _res.Conjoin(MakeGoObject(_res1))
// 	_res = _res.Conjoin(func () Object { if (_res2) == nil { return NIL } else { return MakeError(_res2) } }())
// 	return _res
// }

// func __serve(__handler ABEND987(genutils.go: imports not yet supported: http.Handler))  {
// 	_res := _cgi.Serve(__handler)
// 	return func () Object { if (_res) == nil { return NIL } else { return MakeError(_res) } }()
// }

// func __ptrTo_Handler_ServeHTTP(o GoObject, args Object) Object {
// __rw ABEND987(genutils.go: imports not yet supported: http.ResponseWriter), __req *ABEND987(genutils.go: imports not yet supported: http.Request)}

func initNative() {
}
