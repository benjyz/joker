(ns
  ^{:go-imports []
    :doc "Provides a platform-independent interface to operating system functionality."}
  os)

(defn env
  "Returns a map representing the environment."
  {:added "1.0"
  :go "env()"}
  [])

(defn args
  "Returns a sequence of the command line arguments, starting with the program name (normally, joker)."
  {:added "1.0"
  :go "commandArgs()"}
  [])

(defn exit
  "Causes the current program to exit with the given status code."
  {:added "1.0"
  :go "NIL; ExitJoker(code)"}
  [^Int code])

(defn sh
  "Executes the named program with the given arguments. Returns a map with the following keys:
      :success - whether or not the execution was successful,
      :err-msg (present iff :success if false) - string capturing error object returned by Go runtime
      :exit - exit code of program (or attempt to execute it),
      :out - string capturing stdout of the program,
      :err - string capturing stderr of the program."
  {:added "1.0"
  :go "sh(\"\", name, arguments)"}
  [^String name & ^String arguments])

(defn sh-from
  "Executes the named program with the given arguments and working directory set to dir.
  Returns a map with the following keys:
      :success - whether or not the execution was successful,
      :err-msg (present iff :success if false) - string capturing error object returned by Go runtime
      :exit - exit code of program (or attempt to execute it),
      :out - string capturing stdout of the program,
      :err - string capturing stderr of the program."
  {:added "1.0"
  :go "sh(dir, name, arguments)"}
  [^String dir ^String name & ^String arguments])

(defn mkdir
  "Creates a new directory with the specified name and permission bits."
  {:added "1.0"
  :go "mkdir(name, perm)"}
  [^String name ^Int perm])

(defn ls
  "Reads the directory named by dirname and returns a list of directory entries sorted by filename."
  {:added "1.0"
  :go "readDir(dirname)"}
  [^String dirname])

(defn ^String cwd
  "Returns a rooted path name corresponding to the current directory. If the current directory can
  be reached via multiple paths (due to symbolic links), cwd may return any one of them."
  {:added "1.0"
  :go "getwd()"}
  [])

(defn chdir
  "Chdir changes the current working directory to the named directory. If there is an error, an exception will be thrown. Returns nil."
  {:added "1.0"
  :go "chdir(dirname)"}
  [^String dirname])

(defn stat
  "Returns a map describing the named file. The info map has the following attributes:
  :name - base name of the file
  :size - length in bytes for regular files; system-dependent for others
  :mode - file mode bits
  :modtime - modification time
  :dir? - true if file is a directory"
  {:added "1.0"
  :go "stat(filename)"}
  [^String filename])
