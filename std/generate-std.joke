;;;; Generate foo/a_foo.go files based on foo.joke files.
;;;;
;;;; Given:
;;;;
;;;; (defn <RTN-TYPE> FN
;;;;   DOCSTRING
;;;;   {:added VERSION
;;;;    :go GOCODE}
;;;;   [ARGSPEC...])
;;;;
;;;; This results in the following code in a_foo.go:
;;;;
;;;;   var GOFN Proc = func(_args []Object) Object { BODY }"
;;;;
;;;; GOFN is a slightly mangled form of FN (it's capitalized to be a
;;;; public method, an underscore is appended, etc.; see "go-name",
;;;; below) and BODY chooses an implementation based on the # of
;;;; elements in _args. (So "[ARGSPEC...]" could actually be
;;;; "([ARGSPEC1...])  ([ARGSPEC2...]...)", each with a unique # of
;;;; arguments, in which case GOCODE is not just a string, but a map
;;;; of the # of arguments to the corresponding string.)
;;;; "PanicArity()" is called if the # of arguments does not match.
;;;;
;;;; Each such implementation extracts the arguments based on their
;;;; ARGSPEC-declared types (ARGSPEC typically being "^ARGTYPE
;;;; ARGNAME"), via "ExtractARGTYPE(_args, N)" (where N is the
;;;; argument index), then calls the corresponding GOCODE, saving the
;;;; result in "_res", which is then returned.
;;;;
;;;; Note that an ARGTYPE containing a forward slash (/) indicates a
;;;; Go type, in which case "ExtractGoARGTYPE()" is called (note the
;;;; "Go" keyword following "Extract"). These routines are
;;;; autogenerated into foo/foo_native.go by the Go-library wrapping
;;;; tool (currently called "gostd").
;;;;
;;;; If RTN-TYPE is omitted, GOCODE's result is returned as-is (which
;;;; typically requires GOCODE to refer to a custom implementation in
;;;; foo/foo_native.go, as in the case of a function that returns
;;;; "nil", aka NIL in Joker's Go code); otherwise, "Make<RTN-TYPE>"
;;;; is called to wrap the result in the desired type.
;;;;
;;;; At the package NSNAME level ("foo" in foo/a_foo.go),
;;;; "<NSNAME>Namespace" is defined as a global variable initialized
;;;; to a global Clojure environment with NSFULLNAME (e.g. "a.b.foo")
;;;; as a symbol.
;;;;
;;;; Non-functions (such as constants and variables) and functions
;;;; (see above) follow.
;;;;
;;;; Finally, "func init() {...}" is generated, including:
;;;;
;;;;   <NSNAME>Namespace.ResetMeta(MakeMeta(nil, "{NSDOCSTRING}", "VERSION"))
;;;;
;;;; (NSDOCSTRING comes from the ":doc" metadata in the "ns"
;;;; invocation at the top of foo.joke; VERSION is currently hardcoded
;;;; to "1.0". That's also where imports are specified; they're
;;;; generated near the top of foo/a_foo.go, just after the "package"
;;;; definition.)
;;;;
;;;; Then the non-function and function names are interned in that
;;;; same namespace, with each such intern looking like:
;;;;
;;;;   <NSNAME>Namespace.InternVar("FN", GOFN,
;;;;     MakeMeta(NewListFrom(NewVectorFrom(MakeSymbol("ARG1"), ...)),
;;;;              DOCSTRING)
;;;;
;;;; ARGn is basically each ARGSPEC, including "&" where applicable,
;;;; but without the tags (so, the type info is lost here).
;;;;
;;;; This is where Joker looks up "bar" in "(bar ...)", using the
;;;; applicable namespace in effect, and knows to call "bar_" (the
;;;; GOFN for "bar") with the array of Object's comprising the
;;;; arguments in "...".

(require '[joker.string :as s])

(def rpl s/replace)

(defn debug
  [& args]
  (when ((joker.os/env) "JOKER_DEBUG_STD")
    (apply println args)))

(def libroot
  "Namespace prefix denoting where the gostd-generated implementations live.

  gostd generates the imports with this prefix. While the syntax
  suggests these namespaces are exposed to Joker code, they are
  not (unlike go.std.*); this prefix disambiguates, for purposes of Go
  code autogenerated by this script and by gostd, internal
  implementations (such as type conversions) from the original Go
  packages being wrapped."
  "joker.std.")

;;; Discover namespaces dynamically by finding *.joke files.

;;; TODO: Replace dependencies on the very libraries being converted
;;; already being present.  E.g. have run.sh (or a new script)
;;; dynamically discover the *.joke files to convert, replacing the
;;; code below (to set <namespaces>) to take the list from
;;; *command-line-args*, which could also support a --debug flag.
;;; I.e. one should be able to delete all the std/*/*.go files,
;;; rebuild Joker without them, and still run this script. But since
;;; those files currently come with the source distribution, this
;;; doesn't seem urgent, especially given the preexisting dependency
;;; on joker.string.
(def namespaces
  (vec (->> (joker.os/ls ".")
            (remove :dir?)
            (map :name)
            (remove #(= "generate-std.joke" %))
            (filter #(s/ends-with? % ".joke"))
            (map #(rpl % #"[.]joke$" ""))
            (map symbol))))

(debug "Namespaces:" namespaces)
(apply require :reload namespaces) ; :reload in case namespaces become 'joker.base64 etc.

(def fn-template
  (slurp "fn.tmpl"))

(def arity-template
  (slurp "arity.tmpl"))

(def package-template
  (slurp "package.tmpl"))

(def intern-template
  (slurp "intern.tmpl"))

(def addmeta-template
  (s/trim-right (slurp "addmeta.tmpl")))

(defn q
  [s]
  (str "\"" s "\""))

(defn raw-quoted-string
  "Returns a Go-style backtick-quoted string with backticks handled by appending double-quoted backticks"
  [s]
  (str "`" (rpl s "`" "` + \"`\" + `") "`")
  )

(defn go-name
  "Convert Clojure-style function name to unique Go-style name suitable as its internal implementation."
  [fn-name]
  (let [n (-> fn-name
              (rpl "-" "_")
              (rpl "?" "")
              (str "_"))]
    (if (s/ends-with? fn-name "?")
      (str "is" n)
      n)))

(defn resolve-package
  [pkg ns-name imports]
  (if (= pkg ns-name)
    ""  ; it me
    (do ;;(println pkg ns-name imports)
        (str (get (get imports (str libroot pkg) [(str pkg) "FAIL"]) 0) "."))))

(defn extract-arg
  "Generate code to extract a single argument from an argument list, using either the native Extract<Type>() or the autogenerated ExtractGo<Type>() routine."
  [m ns-name imports]
  (let [fulltype (str (:tag m))]
    (if (s/includes? fulltype "/")
      (let [spl (s/split fulltype #"/")
            pkg (spl 0)
            t (spl 1)
            t (cond-> t
                (:varargs m) (str "VarArgs"))]
        (str (resolve-package pkg ns-name imports) "ExtractGoObject" t))
      (let [t (cond-> fulltype
                (:varargs m) (str "s"))]
        (str "Extract" t)))))

(defn extract-args
  "Generate code to extract the arguments in the list, assigning the extracted values to variable names corresponding to the argument names."
  [args ns-name imports]
  (s/join
   "\n\t\t"
   (map-indexed
    (fn [i arg]
      (let [m (meta arg)
            extract (extract-arg m ns-name imports)]
        (str arg " := " extract "(_args, " (str i) ")")))
    args)))

(defn handle-varargs
  [args]
  (let [c (count args)]
    (if (and (> c 1)
             (= '& (nth args (- c 2))))
      (let [vargs (vary-meta (last args) assoc :varargs true)]
        (conj (subvec args 0 (- c 2)) vargs))
      args)))

(defn ^:private type-name
  [tag]
  (if (vector? tag)
    (str (first tag) "Vector")
    (str tag)))

(defn generate-arity
  [args imports go tag ns-name]
  (let [handle-args (handle-varargs args)
        cnt (count handle-args)
        varargs? (< cnt (count args))
        go-expr (cond
                  (string? go) go
                  varargs? (:varargs go)
                  :else (get go cnt))
        go-res (if (s/starts-with? go-expr "!")
                 (subs go-expr 1)
                 (str "_res := " go-expr))]
    (-> arity-template
        (rpl "{arity}" (if varargs? "true" (str "_c == " (count args))))
        (rpl "{arityCheck}" (if varargs?
                              (str "CheckArity(_args, " (dec cnt) ", " 999 ")")
                              "{blank}"))
        (rpl "{args}" (if (empty? args)
                        "{blank}"
                        (extract-args handle-args ns-name imports)))
        (rpl "{goExpr}" (rpl go-res "; " "\n\t\t"))
        (rpl "{return}"
             (if tag
               (str "return Make" (type-name tag) "(_res)")
               "return _res")))))

(defn generate-arglist
  [args]
  (str "NewVectorFrom("
       (s/join ", " (for [arg args]
                      (str "MakeSymbol(" (q (str arg)) ")")))
       ")"))

(defn make-value
  "Returns code to make the Joker object representing the given value.

  E.g. 'String{S: \"value\"}'. Except for integers, the values are treated as strings (for now)."
  [v]
  (condp = (str (type v))
    "Int" (str "Int{I: " v "}")
    (str "String{S: " (q v) "}")))

(defn add-other-meta
  "Append meta tags other than what are normally present or irrelevant (:go)."
  [m]
  (let [m (dissoc m :doc :added :arglists :ns :name :file :line :column :go)]
    (s/join "" (map #(-> addmeta-template
                    (rpl "{key}" (s/replace-first (str (key %)) ":" ""))
                    (rpl "{value}" (make-value (val %)))) m))))

(defn generate-fn-decl
  [ns-name ns-name-final imports k v]
  (debug "Processing function" v)
  (let [m (meta v)
        arglists (:arglists m)
        go-fn-name (go-name (str k))
        arities (s/join "\n\t" (map #(generate-arity % imports (:go m) (:tag m) ns-name) arglists))
        fn-str (-> fn-template
                   (rpl "{fnName}" go-fn-name)
                   (rpl "{arities}" arities))
        intern-str (-> intern-template
                       (rpl "{nsFullName}" ns-name)
                       (rpl "{nsName}" ns-name-final)
                       (rpl "{fnName}" (str k))
                       (rpl "{goName}" go-fn-name)
                       (rpl "{fnDocstring}" (raw-quoted-string (:doc m)))
                       (rpl "{added}" (:added m))
                       (rpl "{moreMeta}" (add-other-meta m))
                       (rpl "{args}"
                            (str "NewListFrom("
                                 (s/join ", " (for [args arglists]
                                                (generate-arglist args)))
                                 ")")))]
    [fn-str intern-str]))

(defn generate-fn-init
  [v]
  (debug "Processing fn-init" v)
  (let [g (go-name (str v))]
    (format "\t%s = __%s" g g)))

(defn go-return-type
  "Returns the return type of the Make<t>() function. Would be unnecessary if Go code could declare a var as having 'the type returned by <func>'."
  [t]
  (condp = t
    "BigInt" "*BigInt"
    "BigIntU" "*BigInt"
    "Number" "*BigInt"
    "StringVector" "*Vector"
    "Error" "String"
    t))

(defn generate-const-or-var-decl
  [name m]
  (let [type (type-name (:tag m))]
    (cond (= type "Var")
          (format "var %s *GoVar" name)
          (= type "GoType")
          ""  ; Intern directly from call to avoid init-order issues
          :else
          (format "var %s %s" name (go-return-type type)))))

(defn generate-const-or-var-init
  [name m]
  (let [type (type-name (:tag m))]
    (cond (= type "Var")
          (format "\t%s = &GoVar{Value: &%s}"  ; Get pointer to the actual var, not a copy of the var
                  name
                  (:go m))
          (= type "GoType")
          ""  ; Intern directly from call to avoid init-order issues
          :else
          (format "\t%s = Make%s(%s)"
                  name
                  type
                  (:go m)))))

(defn direct-or-indirect-init
  [m name]
  (let [type (type-name (:tag m))]
    (cond (not= type "GoType")
          name
          :else  ; Intern directly from call to avoid init-order issues
          (format "Make%s(%s)"
                  type
                  (:go m)))))

(defn generate-non-fn-decl
  [ns-name ns-name-final k v]
  (let [m (meta v)
        go-non-fn-name (direct-or-indirect-init m (go-name (str k)))
        non-fn-str (generate-const-or-var-decl go-non-fn-name m)
        intern-str (-> intern-template
                       (rpl "{nsFullName}" ns-name)
                       (rpl "{nsName}" ns-name-final)
                       (rpl "{fnName}" (str k))
                       (rpl "{goName}" go-non-fn-name)
                       (rpl "{fnDocstring}" (raw-quoted-string (:doc m)))
                       (rpl "{added}" (:added m))
                       (rpl "{moreMeta}" (add-other-meta m))
                       (rpl "{args}" "nil"))]
    [non-fn-str intern-str]))

(defn generate-non-fn-init
  [ns-name-final k v]
  (debug "Processing non-fn-init" v)
  (let [m (meta v)
        go-non-fn-name (go-name (str k))
        non-fn-str (generate-const-or-var-init go-non-fn-name m)]
    non-fn-str))

(defn comment-out
  [s]
  (-> s
      (rpl "\n// " "\n")
      (rpl "\n" "\n//")
      (rpl "\n// package" "\npackage")))

(defn compare-imports
  [^String l ^String r]
  (cond
    (s/starts-with? l ". ") (if (s/starts-with? r ". ")
                              (compare l r)
                              -1)
    (s/starts-with? r ". ") 1
    :else (compare l r)))

(defn- ns-public-fns
  "Return only publics that are functions."
  [ns]
  (remove #(:macro (meta (val %)))
          (filter #(:arglists (meta (val %))) (ns-publics ns))))

(defn- ns-public-non-fns
  "Return only publics that are not functions."
  [ns]
  (remove #(:macro (meta (val %)))
          (remove #(:arglists (meta (val %))) (ns-publics ns))))

(defn- ns-public-go-fns
  "Return only publics that are functions and have additional Go-specific metadata."
  [ns]
  (filter #(:go (meta (val %))) (ns-public-fns ns)))

(defn- ns-public-go-non-fns
  "Return only publics that are not functions and have additional Go-specific metadata."
  [ns]
  (filter #(:go (meta (val %))) (ns-public-non-fns ns)))

(defn- warn-about-skipped-publics
  [skipped]
  (when (> (count skipped) 0)
    (println-err "WARNING: skipping publics that are not Go-calling functions or vars:" skipped)))

(defn- generate-imports
  "The joker.* namespaces supply simple vectors. The gostd tool provides maps: the key of each map is the full name of the namespace; the value is a two-element vector, the first being the local name of the namespace, and the second the full import specification."
  [m]
  (if (vector? m)
    (mapv q m)
    (mapv #(str ((val %) 0) " " (q ((val %) 1))) m)))

(defn generate-ns
  [ns-sym ns-name ns-name-final]
  (let [ns (find-ns ns-sym)
        m (meta ns)
        go-non-fns (sort-by first (ns-public-go-non-fns ns))
        go-fns (sort-by first (ns-public-go-fns ns))
        fn-decls (for [[k v] go-fns]
              (generate-fn-decl ns-name ns-name-final (:go-imports m) k v))
        fn-inits (for [[k _] go-fns]
                    (generate-fn-init k))
        non-fn-decls (for [[k v] go-non-fns]
                       (generate-non-fn-decl ns-name ns-name-final k v))
        non-fn-inits (for [[k v] go-non-fns]
                       (generate-non-fn-init ns-name-final k v))
        res (-> package-template
                (rpl "{nsFullName}" ns-name)
                (rpl "{nsName}" ns-name-final)
                (rpl "{imports}"
                     (s/join "\n\t" (sort compare-imports (conj
                                                           (generate-imports (:go-imports m))
                                                           ". \"github.com/candid82/joker/core\""))))
                (rpl "{non-fn-decls}" (s/join "\n" (filter #(> (count %) 0) (map first non-fn-decls))))
                (rpl "{non-fn-inits}" (s/join "\n" (filter #(> (count %) 0) non-fn-inits)))
                (rpl "{fn-decls}" (s/join "\n" (map first fn-decls)))
                (rpl "{fn-inits}" (s/join "\n" fn-inits))
                (rpl "{nsDocstring}" (raw-quoted-string (:doc m)))
                (rpl "{non-fn-interns}" (s/join "\n\t" (map second non-fn-decls)))
                (rpl "{fn-interns}" (s/join "\n\t" (map second fn-decls))))
        res (if (:empty m)
              (comment-out res)
              res)]
    (warn-about-skipped-publics (remove (set (concat (map key go-fns)
                                                     (map key go-non-fns)))
                                        (map #(key %) (ns-publics ns))))
    res))

(defn ns-file-name
  [dir ns-name-final]
  (str dir "/a_" ns-name-final ".go"))

(defn remove-blanky-lines
  [s]
  (-> s
      (rpl #"[[:space:]]*{blank}" "")))

(doseq [ns-sym namespaces]
  (let [ns-name (str "joker." ns-sym)
        dir (rpl (str ns-sym) "." "/")
        ns-name-final (rpl ns-name #".*[.]" "")]
    (debug "Processing namespace" ns-name "in" dir "final name" ns-name-final)
    (spit (ns-file-name dir ns-name-final)
          (remove-blanky-lines (generate-ns ns-sym ns-name ns-name-final)))))

;;; Handle "custom" (gostd-generated) namespaces.

(defn new-custom-namespaces-here
  [dir]
  (->> (joker.os/ls dir)
       (remove :dir?)
       (map :name)
       (filter #(s/ends-with? % ".joke"))
       (map #(rpl % #"[.]joke$" ""))
       (map symbol)
       (map #(str dir "/" %))))

(defn find-dirs
  [dir]
  (->> (joker.os/ls dir)
       (filter :dir?)
       (map :name)))

(defn walk-dirs
  [dir]
  (let [d (find-dirs dir)
        dirs (map #(str dir "/" %) d)
        subdirs (mapcat #(walk-dirs %) dirs)]
    (if (empty? subdirs)
      dirs
      (apply concat (list dirs subdirs)))))

(def custom-namespaces (mapv (comp symbol #(rpl % "/" "."))
                             (sort (mapcat new-custom-namespaces-here
                                           (try (walk-dirs "go")
                                                (catch Error e nil))))))

(when (seq custom-namespaces)
  (apply require :reload custom-namespaces))

(doseq [ns-sym custom-namespaces]
  (let [ns-name (str ns-sym)
        dir (rpl ns-name "." "/")
        ns-name-final (rpl ns-name #".*[.]" "")]
    (debug "Processing custom namespace" ns-name "in" dir "final name" ns-name-final)
    (spit (ns-file-name dir ns-name-final)
          (remove-blanky-lines (generate-ns ns-sym ns-name ns-name-final)))))
