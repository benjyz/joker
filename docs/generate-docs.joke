(doseq [ns (remove #(= % 'user) joker.core/*core-namespaces*)] (require ns))

(alias 'cli 'joker.tools.cli)
(alias 'os 'joker.os)
(alias 's 'joker.string)
(alias 'h 'joker.html)

(def index-template
  (slurp "templates/index.html"))

(def ns-template
  (slurp "templates/ns.html"))

(def var-template
  (slurp "templates/var.html"))

(def receiver-template
  (slurp "templates/receiver.html"))

(def special-form-template
  (slurp "templates/special-form.html"))

(def namespace-template
  (slurp "templates/ns-summary.html"))

(def type-template
  (slurp "templates/type-summary.html"))

(def link-item-template
  (slurp "templates/link-item.html"))

(def usage-template
  (slurp "templates/usage.html"))

(def usage-with-types-template
  (slurp "templates/usage-with-types.html"))

(defn go-type-of
  [^Namespace ns ^GoVar v]
  (let [ty (GoTypeOfAsString v)]
    (s/replace-first ty (str ns "/") "")))

(defn type-name
  [^Namespace ns ^Object v]
  (let [m (meta v)]
    (cond
      (not (bound? v)) "Object"
      (:special-form m) "Special form"
      (:macro m) "Macro"
      (= Fn (type @v)) "Function"
      (= Proc (type @v)) "Function"
      (= GoVar (type @v)) (str "GoVar of " (go-type-of ns (deref v)))
      (:tag m) (let [t (str (:tag m))]
                 (if (= t "GoType")
                   (str (if (:specificity m)
                          "Abstract "
                          "Concrete ") t)
                   (str t)))
      (:const m) (str "Constant " (type @v))
      :else (str (type @v)))))

(defn ^Keyword sym-kind
  [^Var v]
  (let [m (meta v)]
    (condp = (type (deref v))
      Fn (cond
           (:special-form m) :special
           (:macro m) :macro
           :else :function)
      Proc :function
      GoType :type
      GoVar :variable
      GoObject :variable
      (cond
        (not (bound? v)) :variable  ; E.g. joker.core/*1
        (:special-form m) :special
        (:const m) :constant
        :else :variable))))

(defn ^String sym-kind-name
  [^Var v]
  (condp = (sym-kind v)
    :function "Function"
    :special "Special form"
    :macro "Macro"
    :type "GoType"
    :constant "Constant"
    :variable "Variable"))

(defn link-item-doc
  [n k]
  (-> link-item-template
      (s/replace "{name}" n)
      (s/replace "{escaped-name}" (h/escape n))
      (s/replace "{kind}" k)))

(defn maybe-tag-prefix
  [x]
  (if-let [m (meta x)]
    (if-let [t (:tag m)]
      (str "^" t " ")
      "")
    ""))

(defn tagged-arg
  [a]
  (str (maybe-tag-prefix a) a))

(defn tagged-vector
  [v]
  (map tagged-arg v))

(defn tagged-arglist
  [k l]
  (str (maybe-tag-prefix l) "(" (s/join " " (cons k (tagged-vector l))) ")"))

(defn maybe-typed-usage
  [u uwt]
  (if (s/includes? uwt "^")
    (-> usage-with-types-template
        (s/replace "{usage}" (h/escape u))
        (s/replace "{usage-with-types}" (h/escape uwt)))
    (s/replace usage-template "{usage}" (h/escape u))))

(defn usage
  [k m]
  (let [usages-with-types (if (:special-form m)
                            (for [form (:forms m)]
                              (str form))
                            (for [arglist (:arglists m)]
                              (tagged-arglist k arglist)))
        usages (if (:special-form m)
                 (for [form (:forms m)]
                   (str form))
                 (for [arglist (:arglists m)]
                   (str (apply list k arglist))))]
    (s/join "" (map maybe-typed-usage usages usages-with-types))))

(defn- source-file
  [ns]
  (s/join "_" (rest (s/split (str ns) #"\."))))

(defn type-string
  "Returns the type name without the qualifying path (which is assumed to be local to the current namespace)."
  [^String t]
  (let [prefix (get (s/split t #"[A-Za-z0-9_]+") 0)
        base (get (s/split t #"/") 1)]
    (str prefix base)))

(defn receiver-doc
  [t r what]
  (if-let [m (Go t r)]
    (-> receiver-template
        (s/replace "{id}" (str r))
        (s/replace "{name}" (str r))
        (s/replace "{type}" (str what " for " (type-string (str t))))
        (s/replace "{kind}" what)
        (s/replace "{usage}" (s/replace usage-template "{usage}" (str (apply list (get m :arglists)))))
        (s/replace "{docstring}" (s/replace (joker.html/escape (:doc m)) "\n" "<br>\n"))
        (s/replace "{added}" (str (:added m)))
        (s/replace
         "{source}"
         (if (:line m)
           (format "<a href=\"https://github.com/candid82/joker/blob/master/core/data/%s.joke#L%s\">source</a>"
                   (source-file (:ns m))
                   (str (:line m)))
           "{blank}")))
    "{blank}"))

(defn receivers-doc
  [k v what]
  (let [go-type-info (deref (Go v nil))
        members (get go-type-info "Members")
        memvec (sort (get members nil))]
    (s/join
     ""
     (for [m memvec]
       (receiver-doc v m what)))))

(defn var-doc
  [k v]
  (let [m (meta v)
        ns (get m :ns "<internal>")
        full-name (str ns "/" (str k))
        usage-str (usage k m)]
    (when-not (or (:added m) (:private m))
      (println "WARNING: public var without added meta key: " full-name))
    (when-not (or (:doc m) (:private m))
      (println "WARNING: public var without doc meta key: " full-name))
    (-> var-template
        (s/replace "{id}" (str k))
        (s/replace "{name}" (h/escape (str k)))
        (s/replace "{type}" (type-name ns v))
        (s/replace "{kind}" (sym-kind-name v))
        (s/replace "{usage}" usage-str)
        (s/replace "{docstring}" (s/replace (joker.html/escape (or (:doc m) "<<<MISSING DOCUMENTATION>>>")) "\n" "<br>\n"))
        (s/replace "{added}" (str (:added m)))
        (s/replace
         "{source}"
         (if (:line m)
           (format "<a href=\"https://github.com/candid82/joker/blob/master/core/data/%s.joke#L%s\">source</a>"
                   (source-file (:ns m))
                   (str (:line m)))
           "{blank}"))
        (s/replace
         "{receivers}"
         (if (= GoType (type (deref v)))
           (let [what (if (:specificity (meta v)) "Method" "Receiver")]
             (receivers-doc k (deref v) what))
           "{blank}"))
        (s/replace "{show-types}"
                   (if (s/includes? usage-str "^")
                     "<a href=\"#\" class=\"types\">show types</a>"
                     "{blank}")))))

(defn- first-line
  [s]
  (first (s/split s #"\n")))

(defn special-form-doc
  [name meta]
  (let [usage (let [examples (for [form (:forms meta)]
                               (s/replace usage-template "{usage}" (str form)))]
                (s/join "" examples))]
    (-> special-form-template
        (s/replace "{id}" name)
        (s/replace "{name}" name)
        (s/replace "{docstring}" (s/replace (joker.html/escape (:doc meta)) "\n" "<br>\n"))
        (s/replace "{usage}" usage))))

(defn namespace-doc
  [ns-sym]
  (let [ns (find-ns ns-sym)
        k (str (ns-name ns))
        m (meta ns)]
    (when-not (:added m)
      (println "WARNING: namespace without added meta key: " k))
    (when-not (:doc m)
      (println "WARNING: namespace without doc meta key: " k))
    (-> namespace-template
        (s/replace "{id}" k)
        (s/replace "{name}" k)
        (s/replace "{docstring}" (s/replace (joker.html/escape (first-line (:doc m))) "\n" "<br>\n"))
        (s/replace "{added}" (str (:added m))))))

(defn type-doc
  [k]
  (let [m (meta (get (joker.core/types__) k))]
    (when-not (:added m)
      (println "WARNING: type without added meta key: " k))
    (when-not (:doc m)
      (println "WARNING: type without doc meta key: " k))
    (-> type-template
        (s/replace "{id}" k)
        (s/replace "{name}" k)
        (s/replace "{docstring}" (s/replace (joker.html/escape (:doc m)) "\n" "<br>\n"))
        (s/replace "{added}" (str (:added m))))))

(defn ^Boolean sym-kind-is
  [^Var s ^Keyword x]
  (= x (sym-kind s)))

(defn filter-vals
  "Filters on values in a map using supplied function, returning map with only matching key/value pairs."
  [f m]
  (into {} (filter #(-> % val f) m)))

(defn section-doc
  [ns-sym ns-vars-fn match]
  (s/replace (s/join
    ""
    (for [[k v] (sort (filter-vals match (ns-vars-fn ns-sym)))]
      (var-doc k v))) #"^$" "(None.)"))

(defn ns-doc
  [ns-sym ns-vars-fn]
  (let [ns (find-ns ns-sym)
        m (meta ns)
        index (s/join
                       ""
                       (for [[k v] (sort #(compare (key %1) (key %2)) (ns-vars-fn ns-sym))]
                         (link-item-doc (str k) (sym-kind-name v))))
        functions-doc (section-doc ns-sym ns-vars-fn #(or (sym-kind-is % :function) (sym-kind-is % :macro) (sym-kind-is % :special)))
        constants-doc (section-doc ns-sym ns-vars-fn #(sym-kind-is % :constant))
        variables-doc (section-doc ns-sym ns-vars-fn #(sym-kind-is % :variable))
        types-doc (section-doc ns-sym ns-vars-fn #(sym-kind-is % :type))
        others-doc (section-doc ns-sym ns-vars-fn #(sym-kind-is % :other))
        _ (when (not= "(None.)" others-doc) (throw (ex-info (str "non-null others: " others-doc) {})))]
    (-> ns-template
        (s/replace "{name}" (name ns-sym))
        (s/replace "{added}" (str (:added m)))
        (s/replace "{docstring}" (s/replace (joker.html/escape (:doc m)) "\n" "<br>\n"))
        (s/replace "{constants}" constants-doc)
        (s/replace "{variables}" variables-doc)
        (s/replace "{functions}" functions-doc)
        (s/replace "{types}" types-doc)
        (s/replace "{others}" others-doc)
        (s/replace "{index}" index))))

(defn go-version
  []
  (s/replace (go.std.runtime/Version) "go" ""))

(defn joker-commit
  []
  (let [r (os/sh "git" "rev-parse" "--short" "master")]
    (if (:success r)
      (s/trim (:out r))
      (str "error obtaining commit: " (s/trim (:err r))))))

(defn index-doc
  [special-forms namespaces types]
  (let [special-forms-docs (s/join
                            ""
                            (for [sf (sort (keys special-forms))]
                              (special-form-doc (str sf) (special-forms sf))))
        special-form-links-doc (s/join
                                ""
                                (->> (sort (keys special-forms))
                                     (map #(link-item-doc (str %) "Special Form"))))

        namespaces-docs (s/join
                         ""
                         (for [ns-sym namespaces]
                           (namespace-doc ns-sym)))
        ns-links-doc (s/join
                      ""
                      (->> namespaces
                           (map #(link-item-doc (str %) "Namespace"))))
        types-docs (s/join
                    ""
                    (for [t types]
                      (type-doc t)))
        type-links-doc (s/join
                        ""
                        (->> types
                             (map #(link-item-doc (str %) "Type"))))]
    (-> index-template
        (s/replace "{JokerVersion}" (joker-version))
        (s/replace "{commit}" (joker-commit))
        (s/replace "{GoVersion}" (go-version))
        (s/replace "{index-of-special-forms}" special-form-links-doc)
        (s/replace "{special-forms}" special-forms-docs)
        (s/replace "{index-of-namespaces}" ns-links-doc)
        (s/replace "{namespaces}" namespaces-docs)
        (s/replace "{index-of-types}" type-links-doc)
        (s/replace "{types}" types-docs))))

(defn remove-blanky-lines
  [s]
  (-> s
      (s/replace #"[[:space:]]*{blank}" "")))

(defn full-doc
  [ns-fn ns-vars-fn]
  (let [namespaces (->> (ns-fn)
                        (map ns-name)
                        (remove #(= 'user %))
                        (sort))
        types (->> (joker.core/types__)
                   (map key)
                   (sort))
        special-forms joker.repl/special-doc-map]
    (spit "index.html" (index-doc special-forms namespaces types))
    (doseq [ns namespaces]
      (spit (str ns ".html") (remove-blanky-lines (ns-doc ns ns-vars-fn))))))

(defn is-go
  [^Namespace ns]
  (s/starts-with? (str ns) "go.std."))

(defn no-go-ns
  []
  (->> (all-ns)
       (remove #(is-go %))))

;;; Bind the REPL stuff so (deref ...) of them doesn't fail.
(doseq [s ['*1 '*2 '*3 '*e]]
  (intern 'joker.core s "empty"))

(let [opts (cli/parse-opts *command-line-args*
                           [
                            [nil "--all" "Include private as well as public members in documentation"]
                            [nil "--no-go" "Do not include the go.std.* namespaces"]
                            ["-h" "--help"]
                            ])]
  (when-let [err (or (when (:help (:options opts)) "") (:errors opts))]
    (println (s/join "\n" err))
    (println "Usage:")
    (println (:summary opts))
    (os/exit 1))
  (let [ns-fn (if (:no-go (:options opts))
                no-go-ns
                all-ns)
        ns-vars-fn (if (:all (:options opts))
                     ns-interns
                     ns-publics)]
    (full-doc ns-fn ns-vars-fn)))
