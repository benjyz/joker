(alias 'string 'joker.string)
(require 'joker.walk)
(require 'joker.tools.cli)
(require 'joker.test)
(require 'joker.template)
(require 'joker.set)
(require 'joker.repl)

(def index-template
  (slurp "templates/index.html"))

(def ns-template
  (slurp "templates/ns.html"))

(def var-template
  (slurp "templates/var.html"))

(def namespace-template
  (slurp "templates/ns-summary.html"))

(def link-item-template
  (slurp "templates/link-item.html"))

(def usage-template
  (slurp "templates/usage.html"))

(defn type-name
  [v]
  (cond
    (not (bound? v)) "Object"
    (:special-form (meta v)) "Special form"
    (:macro (meta v)) "Macro"
    (= Fn (type @v)) "Function"
    (= Proc (type @v)) "Function"
    :else (str (type @v))))

(defn link-item-doc
  [k]
  (string/replace link-item-template "{name}" k))

(defn usage
  [k m]
  (if (:special-form m)
    (let [examples (for [form (:forms m)]
                     (string/replace usage-template "{usage}" (str form)))]
      (string/join "" examples))
    (let [examples (for [arglist (:arglists m)]
                     (string/replace usage-template "{usage}" (str (apply list k arglist))))]
      (string/join "" examples))))

(defn- source-file
  [ns]
  (string/join "_" (rest (string/split (str ns) #"\."))))

(defn var-doc
  [k v]
  (let [m (meta v)]
    (when-not (:added m)
      (println "WARNING: public var without added meta key: " k))
    (when-not (:doc m)
      (println "WARNING: public var without doc meta key: " k))
    (-> var-template
        (string/replace "{id}" (str k))
        (string/replace "{name}" (str k))
        (string/replace "{type}" (type-name v))
        (string/replace "{usage}" (usage k m))
        (string/replace "{docstring}" (string/replace (str (:doc m)) "\n" "<br>"))
        (string/replace "{added}" (str (:added m)))
        (string/replace
         "{source}"
         (if (:line m)
           (format "<a href=\"https://github.com/candid82/joker/blob/master/core/data/%s.joke#L%s\">source</a>"
                   (source-file (:ns m))
                   (str (:line m)))
           "")))))

(defn namespace-doc
  [ns-sym]
  (let [ns (find-ns ns-sym)
        k (str (ns-name ns))
        m (meta ns)]
    (when-not (:added m)
      (println "WARNING: namespace without added meta key: " k))
    (when-not (:doc m)
      (println "WARNING: namespace without doc meta key: " k))
    (-> namespace-template
        (string/replace "{id}" k)
        (string/replace "{name}" k)
        (string/replace "{docstring}" (string/replace (str (:doc m)) "\n" "<br>"))
        (string/replace "{added}" (str (:added m))))))

(defn ns-doc
  [ns-sym]
  (let [ns (find-ns ns-sym)
        m (meta ns)
        vars-doc (string/join
                  ""
                  (for [[k v] (sort (ns-publics ns-sym))]
                    (var-doc k v)))
        var-links-doc (string/join
                       ""
                       (for [k (sort (keys (ns-publics ns-sym)))]
                         (link-item-doc (str k))))]
    (-> ns-template
        (string/replace "{name}" (name ns-sym))
        (string/replace "{added}" (str (:added m)))
        (string/replace "{docstring}" (str (:doc m)))
        (string/replace  "{vars}" vars-doc)
        (string/replace "{index}" var-links-doc))))

(defn index-doc
  [namespaces]
  (let [namespaces-docs (string/join
                         ""
                         (for [ns-sym namespaces]
                           (namespace-doc ns-sym)))
        ns-links-doc (string/join
                      ""
                      (->> namespaces
                           (map #(link-item-doc (str %)))))]
    (-> index-template
        (string/replace "{index}" ns-links-doc)
        (string/replace "{namespaces}" namespaces-docs))))

(defn full-doc
  []
  (let [namespaces (->> (all-ns)
                        (map ns-name)
                        (remove #(= 'user %))
                        (sort))]
    (spit "index.html" (index-doc namespaces))
    (doseq [ns namespaces]
      (spit (str ns ".html") (ns-doc ns)))))

(full-doc)





